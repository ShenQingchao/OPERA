# test_id: 0 
verify_model(torch.nn.PixelShuffle(2,).eval(), input_data=[torch.randn([1, 144, 16, 16], dtype=torch.float32)])
# test_id: 1 
verify_model(torch.nn.PixelShuffle(2,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 2 
verify_model(torch.nn.PixelShuffle(3,).eval(), input_data=[torch.randn([1, 144, 16, 16], dtype=torch.float32)])
# test_id: 3 
verify_model(torch.nn.PixelShuffle(3,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 4 
verify_model(torch.nn.PixelShuffle(4,).eval(), input_data=[torch.randn([1, 144, 16, 16], dtype=torch.float32)])
# test_id: 5 
verify_model(torch.nn.PixelShuffle(4,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 6 
para_0 = torch.randn([10, 10], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=False,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 7 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([10, 10], dtype=torch.float32)])
# test_id: 8 
para_0 = torch.randn([tensor(10), tensor(10)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=False,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 9 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 10 
para_0 = torch.randn([10, 10], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = False
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 11 
verify_model(torch.nn.Hardtanh(0.0,6.0,False,).eval(), input_data=[torch.randn([10, 10], dtype=torch.float32)])
# test_id: 12 
verify_model(torch.nn.ReLU6().eval(), input_data=[torch.randn([10, 10], dtype=torch.float32)])
# test_id: 13 
para_0 = torch.randn([tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = False
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 14 
verify_model(torch.nn.Hardtanh(0.0,6.0,False,).eval(), input_data=[torch.randn([tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 15 
verify_model(torch.nn.ReLU6().eval(), input_data=[torch.randn([tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 16 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = torch.randn([3], dtype=torch.float32)
class prelu(Module):
    def forward(self, *args):
        return torch.nn.functional.prelu(args[0], para_1,)
verify_model(prelu().float().eval(), input_data=para_0)


# test_id: 17 
verify_model(torch.nn.PReLU(num_parameters=3,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 18 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(3)], dtype=torch.float32)
class prelu(Module):
    def forward(self, *args):
        return torch.nn.functional.prelu(args[0], para_1,)
verify_model(prelu().float().eval(), input_data=para_0)


# test_id: 19 
verify_model(torch.nn.PReLU(num_parameters=3,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 20 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = torch.randn([1], dtype=torch.float32)
class prelu(Module):
    def forward(self, *args):
        return torch.nn.functional.prelu(args[0], para_1,)
verify_model(prelu().float().eval(), input_data=para_0)


# test_id: 21 
verify_model(torch.nn.PReLU(num_parameters=1,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 22 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(1)], dtype=torch.float32)
class prelu(Module):
    def forward(self, *args):
        return torch.nn.functional.prelu(args[0], para_1,)
verify_model(prelu().float().eval(), input_data=para_0)


# test_id: 23 
verify_model(torch.nn.PReLU(num_parameters=1,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 24 
para_0 = torch.randn([2], dtype=torch.float32)
para_1 = torch.randn([1], dtype=torch.float32)
class prelu(Module):
    def forward(self, *args):
        return torch.nn.functional.prelu(args[0], para_1,)
verify_model(prelu().float().eval(), input_data=para_0)


# test_id: 25 
verify_model(torch.nn.PReLU(num_parameters=1,).eval(), input_data=[torch.randn([2], dtype=torch.float32)])
# test_id: 26 
para_0 = torch.randn([tensor(2)], dtype=torch.float32)
para_1 = torch.randn([tensor(1)], dtype=torch.float32)
class prelu(Module):
    def forward(self, *args):
        return torch.nn.functional.prelu(args[0], para_1,)
verify_model(prelu().float().eval(), input_data=para_0)


# test_id: 27 
verify_model(torch.nn.PReLU(num_parameters=1,).eval(), input_data=[torch.randn([tensor(2)], dtype=torch.float32)])
# test_id: 28 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = 0.01
para_2 = False
class leaky_relu(Module):
    def forward(self, *args):
        return torch.nn.functional.leaky_relu(args[0], para_1,para_2,)
verify_model(leaky_relu().float().eval(), input_data=para_0)


# test_id: 29 
verify_model(torch.nn.LeakyReLU().eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 30 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 0.01
para_2 = False
class leaky_relu(Module):
    def forward(self, *args):
        return torch.nn.functional.leaky_relu(args[0], para_1,para_2,)
verify_model(leaky_relu().float().eval(), input_data=para_0)


# test_id: 31 
verify_model(torch.nn.LeakyReLU().eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 32 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = 0.05
para_2 = False
class leaky_relu(Module):
    def forward(self, *args):
        return torch.nn.functional.leaky_relu(args[0], para_1,para_2,)
verify_model(leaky_relu().float().eval(), input_data=para_0)


# test_id: 33 
verify_model(torch.nn.LeakyReLU(negative_slope=0.05,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 34 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 0.05
para_2 = False
class leaky_relu(Module):
    def forward(self, *args):
        return torch.nn.functional.leaky_relu(args[0], para_1,para_2,)
verify_model(leaky_relu().float().eval(), input_data=para_0)


# test_id: 35 
verify_model(torch.nn.LeakyReLU(negative_slope=0.05,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 36 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = 1.0
para_2 = True
class leaky_relu(Module):
    def forward(self, *args):
        return torch.nn.functional.leaky_relu(args[0], para_1,para_2,)
verify_model(leaky_relu().float().eval(), input_data=para_0)


# test_id: 37 
verify_model(torch.nn.LeakyReLU(negative_slope=1.0,inplace=True,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 38 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 1.0
para_2 = True
class leaky_relu(Module):
    def forward(self, *args):
        return torch.nn.functional.leaky_relu(args[0], para_1,para_2,)
verify_model(leaky_relu().float().eval(), input_data=para_0)


# test_id: 39 
verify_model(torch.nn.LeakyReLU(negative_slope=1.0,inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 40 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = 1.25
para_2 = True
class leaky_relu(Module):
    def forward(self, *args):
        return torch.nn.functional.leaky_relu(args[0], para_1,para_2,)
verify_model(leaky_relu().float().eval(), input_data=para_0)


# test_id: 41 
verify_model(torch.nn.LeakyReLU(negative_slope=1.25,inplace=True,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 42 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 1.25
para_2 = True
class leaky_relu(Module):
    def forward(self, *args):
        return torch.nn.functional.leaky_relu(args[0], para_1,para_2,)
verify_model(leaky_relu().float().eval(), input_data=para_0)


# test_id: 43 
verify_model(torch.nn.LeakyReLU(negative_slope=1.25,inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 44 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = 1.0
para_2 = False
class elu(Module):
    def forward(self, *args):
        return torch.nn.functional.elu(args[0], para_1,para_2,)
verify_model(elu().float().eval(), input_data=para_0)


# test_id: 45 
verify_model(torch.nn.ELU().eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 46 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 1.0
para_2 = False
class elu(Module):
    def forward(self, *args):
        return torch.nn.functional.elu(args[0], para_1,para_2,)
verify_model(elu().float().eval(), input_data=para_0)


# test_id: 47 
verify_model(torch.nn.ELU().eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 48 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = 0.3
para_2 = False
class elu(Module):
    def forward(self, *args):
        return torch.nn.functional.elu(args[0], para_1,para_2,)
verify_model(elu().float().eval(), input_data=para_0)


# test_id: 49 
verify_model(torch.nn.ELU(alpha=0.3,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 50 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 0.3
para_2 = False
class elu(Module):
    def forward(self, *args):
        return torch.nn.functional.elu(args[0], para_1,para_2,)
verify_model(elu().float().eval(), input_data=para_0)


# test_id: 51 
verify_model(torch.nn.ELU(alpha=0.3,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 52 
verify_model(torch.nn.ELU(alpha=1.0,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 53 
verify_model(torch.nn.ELU(alpha=1.0,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 54 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = 1.3
para_2 = False
class elu(Module):
    def forward(self, *args):
        return torch.nn.functional.elu(args[0], para_1,para_2,)
verify_model(elu().float().eval(), input_data=para_0)


# test_id: 55 
verify_model(torch.nn.ELU(alpha=1.3,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 56 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 1.3
para_2 = False
class elu(Module):
    def forward(self, *args):
        return torch.nn.functional.elu(args[0], para_1,para_2,)
verify_model(elu().float().eval(), input_data=para_0)


# test_id: 57 
verify_model(torch.nn.ELU(alpha=1.3,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 58 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = 1.0
para_2 = False
class celu(Module):
    def forward(self, *args):
        return torch.nn.functional.celu(args[0], para_1,para_2,)
verify_model(celu().float().eval(), input_data=para_0)


# test_id: 59 
verify_model(torch.nn.CELU().eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 60 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 1.0
para_2 = False
class celu(Module):
    def forward(self, *args):
        return torch.nn.functional.celu(args[0], para_1,para_2,)
verify_model(celu().float().eval(), input_data=para_0)


# test_id: 61 
verify_model(torch.nn.CELU().eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 62 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = 0.3
para_2 = False
class celu(Module):
    def forward(self, *args):
        return torch.nn.functional.celu(args[0], para_1,para_2,)
verify_model(celu().float().eval(), input_data=para_0)


# test_id: 63 
verify_model(torch.nn.CELU(alpha=0.3,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 64 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 0.3
para_2 = False
class celu(Module):
    def forward(self, *args):
        return torch.nn.functional.celu(args[0], para_1,para_2,)
verify_model(celu().float().eval(), input_data=para_0)


# test_id: 65 
verify_model(torch.nn.CELU(alpha=0.3,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 66 
verify_model(torch.nn.CELU(alpha=1.0,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 67 
verify_model(torch.nn.CELU(alpha=1.0,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 68 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = 1.3
para_2 = False
class celu(Module):
    def forward(self, *args):
        return torch.nn.functional.celu(args[0], para_1,para_2,)
verify_model(celu().float().eval(), input_data=para_0)


# test_id: 69 
verify_model(torch.nn.CELU(alpha=1.3,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 70 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 1.3
para_2 = False
class celu(Module):
    def forward(self, *args):
        return torch.nn.functional.celu(args[0], para_1,para_2,)
verify_model(celu().float().eval(), input_data=para_0)


# test_id: 71 
verify_model(torch.nn.CELU(alpha=1.3,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 72 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
class gelu(Module):
    def forward(self, *args):
        return torch.nn.functional.gelu(args[0], )
verify_model(gelu().float().eval(), input_data=para_0)


# test_id: 73 
verify_model(torch.nn.GELU().eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 74 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
class gelu(Module):
    def forward(self, *args):
        return torch.nn.functional.gelu(args[0], )
verify_model(gelu().float().eval(), input_data=para_0)


# test_id: 75 
verify_model(torch.nn.GELU().eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 76 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = False
class selu(Module):
    def forward(self, *args):
        return torch.nn.functional.selu(args[0], para_1,)
verify_model(selu().float().eval(), input_data=para_0)


# test_id: 77 
verify_model(torch.nn.SELU().eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 78 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = False
class selu(Module):
    def forward(self, *args):
        return torch.nn.functional.selu(args[0], para_1,)
verify_model(selu().float().eval(), input_data=para_0)


# test_id: 79 
verify_model(torch.nn.SELU().eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 80 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
class silu(Module):
    def forward(self, *args):
        return torch.nn.functional.silu(args[0], inplace=False,)
verify_model(silu().float().eval(), input_data=para_0)


# test_id: 81 
verify_model(torch.nn.SiLU().eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 82 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
class silu(Module):
    def forward(self, *args):
        return torch.nn.functional.silu(args[0], inplace=False,)
verify_model(silu().float().eval(), input_data=para_0)


# test_id: 83 
verify_model(torch.nn.SiLU().eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 84 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = -1
class glu(Module):
    def forward(self, *args):
        return torch.nn.functional.glu(args[0], para_1,)
verify_model(glu().float().eval(), input_data=para_0)


# test_id: 85 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = -1
class glu(Module):
    def forward(self, *args):
        return torch.nn.functional.glu(args[0], para_1,)
verify_model(glu().float().eval(), input_data=para_0)


# test_id: 86 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = 1
para_2 = 20
class softplus(Module):
    def forward(self, *args):
        return torch.nn.functional.softplus(args[0], para_1,para_2,)
verify_model(softplus().float().eval(), input_data=para_0)


# test_id: 87 
verify_model(torch.nn.Softplus().eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 88 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 1
para_2 = 20
class softplus(Module):
    def forward(self, *args):
        return torch.nn.functional.softplus(args[0], para_1,para_2,)
verify_model(softplus().float().eval(), input_data=para_0)


# test_id: 89 
verify_model(torch.nn.Softplus().eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 90 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = 1.5
para_2 = 20
class softplus(Module):
    def forward(self, *args):
        return torch.nn.functional.softplus(args[0], para_1,para_2,)
verify_model(softplus().float().eval(), input_data=para_0)


# test_id: 91 
verify_model(torch.nn.Softplus(beta=1.5,threshold=20,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 92 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 1.5
para_2 = 20
class softplus(Module):
    def forward(self, *args):
        return torch.nn.functional.softplus(args[0], para_1,para_2,)
verify_model(softplus().float().eval(), input_data=para_0)


# test_id: 93 
verify_model(torch.nn.Softplus(beta=1.5,threshold=20,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 94 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = 5
para_2 = 10
class softplus(Module):
    def forward(self, *args):
        return torch.nn.functional.softplus(args[0], para_1,para_2,)
verify_model(softplus().float().eval(), input_data=para_0)


# test_id: 95 
verify_model(torch.nn.Softplus(beta=5,threshold=10,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 96 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 5
para_2 = 10
class softplus(Module):
    def forward(self, *args):
        return torch.nn.functional.softplus(args[0], para_1,para_2,)
verify_model(softplus().float().eval(), input_data=para_0)


# test_id: 97 
verify_model(torch.nn.Softplus(beta=5,threshold=10,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 98 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
class softsign(Module):
    def forward(self, *args):
        return torch.nn.functional.softsign(args[0], )
verify_model(softsign().float().eval(), input_data=para_0)


# test_id: 99 
verify_model(torch.nn.Softsign().eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 100 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
class softsign(Module):
    def forward(self, *args):
        return torch.nn.functional.softsign(args[0], )
verify_model(softsign().float().eval(), input_data=para_0)


# test_id: 101 
verify_model(torch.nn.Softsign().eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 102 
para_0 = torch.randn([10, 10], dtype=torch.float32)
class logsigmoid(Module):
    def forward(self, *args):
        return torch.nn.functional.logsigmoid(args[0], )
verify_model(logsigmoid().float().eval(), input_data=para_0)


# test_id: 103 
verify_model(torch.nn.LogSigmoid().eval(), input_data=[torch.randn([10, 10], dtype=torch.float32)])
# test_id: 104 
para_0 = torch.randn([tensor(10), tensor(10)], dtype=torch.float32)
class logsigmoid(Module):
    def forward(self, *args):
        return torch.nn.functional.logsigmoid(args[0], )
verify_model(logsigmoid().float().eval(), input_data=para_0)


# test_id: 105 
verify_model(torch.nn.LogSigmoid().eval(), input_data=[torch.randn([tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 106 
para_0 = torch.randn([2], dtype=torch.float32)
class logsigmoid(Module):
    def forward(self, *args):
        return torch.nn.functional.logsigmoid(args[0], )
verify_model(logsigmoid().float().eval(), input_data=para_0)


# test_id: 107 
verify_model(torch.nn.LogSigmoid().eval(), input_data=[torch.randn([2], dtype=torch.float32)])
# test_id: 108 
para_0 = torch.randn([tensor(2)], dtype=torch.float32)
class logsigmoid(Module):
    def forward(self, *args):
        return torch.nn.functional.logsigmoid(args[0], )
verify_model(logsigmoid().float().eval(), input_data=para_0)


# test_id: 109 
verify_model(torch.nn.LogSigmoid().eval(), input_data=[torch.randn([tensor(2)], dtype=torch.float32)])
# test_id: 110 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = [1, 1]
class adaptive_avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool2d(args[0], para_1,)
verify_model(adaptive_avg_pool2d().float().eval(), input_data=para_0)


# test_id: 111 
verify_model(torch.nn.AdaptiveAvgPool2d([1, 1],).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 112 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [1, 1]
class adaptive_avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool2d(args[0], para_1,)
verify_model(adaptive_avg_pool2d().float().eval(), input_data=para_0)


# test_id: 113 
verify_model(torch.nn.AdaptiveAvgPool2d([1, 1],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 114 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = [10, 10]
class adaptive_avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool2d(args[0], para_1,)
verify_model(adaptive_avg_pool2d().float().eval(), input_data=para_0)


# test_id: 115 
verify_model(torch.nn.AdaptiveAvgPool2d([10, 10],).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 116 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [10, 10]
class adaptive_avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool2d(args[0], para_1,)
verify_model(adaptive_avg_pool2d().float().eval(), input_data=para_0)


# test_id: 117 
verify_model(torch.nn.AdaptiveAvgPool2d([10, 10],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 118 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = [1]
class adaptive_avg_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool1d(args[0], para_1,)
verify_model(adaptive_avg_pool1d().float().eval(), input_data=para_0)


# test_id: 119 
verify_model(torch.nn.AdaptiveAvgPool1d([1],).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 120 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = [1]
class adaptive_avg_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool1d(args[0], para_1,)
verify_model(adaptive_avg_pool1d().float().eval(), input_data=para_0)


# test_id: 121 
verify_model(torch.nn.AdaptiveAvgPool1d([1],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 122 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = [5]
class adaptive_avg_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool1d(args[0], para_1,)
verify_model(adaptive_avg_pool1d().float().eval(), input_data=para_0)


# test_id: 123 
verify_model(torch.nn.AdaptiveAvgPool1d([5],).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 124 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = [5]
class adaptive_avg_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool1d(args[0], para_1,)
verify_model(adaptive_avg_pool1d().float().eval(), input_data=para_0)


# test_id: 125 
verify_model(torch.nn.AdaptiveAvgPool1d([5],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 126 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = [1, 1]
para_2 = False
class adaptive_max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool2d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool2d().float().eval(), input_data=para_0)


# test_id: 127 
verify_model(torch.nn.AdaptiveMaxPool2d([1, 1],).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 128 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [1, 1]
para_2 = False
class adaptive_max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool2d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool2d().float().eval(), input_data=para_0)


# test_id: 129 
verify_model(torch.nn.AdaptiveMaxPool2d([1, 1],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 130 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = [10, 10]
para_2 = False
class adaptive_max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool2d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool2d().float().eval(), input_data=para_0)


# test_id: 131 
verify_model(torch.nn.AdaptiveMaxPool2d([10, 10],).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 132 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [10, 10]
para_2 = False
class adaptive_max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool2d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool2d().float().eval(), input_data=para_0)


# test_id: 133 
verify_model(torch.nn.AdaptiveMaxPool2d([10, 10],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 134 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = [1]
para_2 = False
class adaptive_max_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool1d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool1d().float().eval(), input_data=para_0)


# test_id: 135 
verify_model(torch.nn.AdaptiveMaxPool1d([1],).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 136 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = [1]
para_2 = False
class adaptive_max_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool1d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool1d().float().eval(), input_data=para_0)


# test_id: 137 
verify_model(torch.nn.AdaptiveMaxPool1d([1],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 138 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = [5]
para_2 = False
class adaptive_max_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool1d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool1d().float().eval(), input_data=para_0)


# test_id: 139 
verify_model(torch.nn.AdaptiveMaxPool1d([5],).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 140 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = [5]
para_2 = False
class adaptive_max_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool1d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool1d().float().eval(), input_data=para_0)


# test_id: 141 
verify_model(torch.nn.AdaptiveMaxPool1d([5],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 142 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = [1, 1]
para_2 = [1, 1]
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 143 
verify_model(torch.nn.MaxPool2d(kernel_size=[1, 1],).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 144 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [1, 1]
para_2 = [1, 1]
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 145 
verify_model(torch.nn.MaxPool2d(kernel_size=[1, 1],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 146 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = [2, 2]
para_2 = [2, 2]
para_3 = 0
para_4 = [2, 3]
para_5 = False
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 147 
verify_model(torch.nn.MaxPool2d(kernel_size=[2, 2],dilation=[2, 3],).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 148 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [2, 2]
para_2 = [2, 2]
para_3 = 0
para_4 = [2, 3]
para_5 = False
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 149 
verify_model(torch.nn.MaxPool2d(kernel_size=[2, 2],dilation=[2, 3],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 150 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = [10, 10]
para_2 = [10, 10]
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 151 
verify_model(torch.nn.MaxPool2d(kernel_size=[10, 10],).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 152 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [10, 10]
para_2 = [10, 10]
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 153 
verify_model(torch.nn.MaxPool2d(kernel_size=[10, 10],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 154 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = [4, 4]
para_2 = 2
para_3 = 2
para_4 = 1
para_5 = False
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 155 
verify_model(torch.nn.MaxPool2d(kernel_size=[4, 4],padding=2,stride=2,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 156 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [4, 4]
para_2 = 2
para_3 = 2
para_4 = 1
para_5 = False
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 157 
verify_model(torch.nn.MaxPool2d(kernel_size=[4, 4],padding=2,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 158 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], kernel_size=[10, 10],)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 159 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], kernel_size=[10, 10],)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 160 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = [1, 1]
para_2 = [1, 1]
para_3 = 0
para_4 = 1
para_5 = False
para_6 = True
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 161 
verify_model(torch.nn.MaxPool2d(kernel_size=[1, 1],return_indices=True,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 162 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [1, 1]
para_2 = [1, 1]
para_3 = 0
para_4 = 1
para_5 = False
para_6 = True
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 163 
verify_model(torch.nn.MaxPool2d(kernel_size=[1, 1],return_indices=True,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 164 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], kernel_size=[4, 4],stride=[{'shape': [], 'dtype': 'torch.int32'}, {'shape': [], 'dtype': 'torch.int32'}],)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 165 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], kernel_size=[4, 4],stride=[{'shape': [], 'dtype': 'torch.int32'}, {'shape': [], 'dtype': 'torch.int32'}],)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 166 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = 1
para_2 = 1
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool1d().float().eval(), input_data=para_0)


# test_id: 167 
verify_model(torch.nn.MaxPool1d(kernel_size=1,).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 168 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = 1
para_2 = 1
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool1d().float().eval(), input_data=para_0)


# test_id: 169 
verify_model(torch.nn.MaxPool1d(kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 170 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = 2
para_2 = 2
para_3 = 0
para_4 = [1]
para_5 = False
para_6 = False
class max_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool1d().float().eval(), input_data=para_0)


# test_id: 171 
verify_model(torch.nn.MaxPool1d(kernel_size=2,dilation=[1],).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 172 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = 2
para_2 = 2
para_3 = 0
para_4 = [1]
para_5 = False
para_6 = False
class max_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool1d().float().eval(), input_data=para_0)


# test_id: 173 
verify_model(torch.nn.MaxPool1d(kernel_size=2,dilation=[1],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 174 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = 10
para_2 = 10
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool1d().float().eval(), input_data=para_0)


# test_id: 175 
verify_model(torch.nn.MaxPool1d(kernel_size=10,).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 176 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = 10
para_2 = 10
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool1d().float().eval(), input_data=para_0)


# test_id: 177 
verify_model(torch.nn.MaxPool1d(kernel_size=10,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 178 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = 4
para_2 = 2
para_3 = 2
para_4 = 1
para_5 = False
para_6 = False
class max_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool1d().float().eval(), input_data=para_0)


# test_id: 179 
verify_model(torch.nn.MaxPool1d(kernel_size=4,padding=2,stride=2,).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 180 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = 4
para_2 = 2
para_3 = 2
para_4 = 1
para_5 = False
para_6 = False
class max_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool1d().float().eval(), input_data=para_0)


# test_id: 181 
verify_model(torch.nn.MaxPool1d(kernel_size=4,padding=2,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 182 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
class max_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool1d(args[0], kernel_size=10,)
verify_model(max_pool1d().float().eval(), input_data=para_0)


# test_id: 183 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
class max_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool1d(args[0], kernel_size=10,)
verify_model(max_pool1d().float().eval(), input_data=para_0)


# test_id: 184 
para_0 = torch.randn([1, 3, 10, 10, 10], dtype=torch.float32)
para_1 = [1, 1, 1]
para_2 = [1, 1, 1]
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 185 
verify_model(torch.nn.MaxPool3d(kernel_size=[1, 1, 1],).eval(), input_data=[torch.randn([1, 3, 10, 10, 10], dtype=torch.float32)])
# test_id: 186 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [1, 1, 1]
para_2 = [1, 1, 1]
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 187 
verify_model(torch.nn.MaxPool3d(kernel_size=[1, 1, 1],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 188 
para_0 = torch.randn([1, 3, 10, 10, 10], dtype=torch.float32)
para_1 = [2, 2, 2]
para_2 = [2, 2, 2]
para_3 = 0
para_4 = [1, 2, 3]
para_5 = False
para_6 = False
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 189 
verify_model(torch.nn.MaxPool3d(kernel_size=[2, 2, 2],dilation=[1, 2, 3],).eval(), input_data=[torch.randn([1, 3, 10, 10, 10], dtype=torch.float32)])
# test_id: 190 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [2, 2, 2]
para_2 = [2, 2, 2]
para_3 = 0
para_4 = [1, 2, 3]
para_5 = False
para_6 = False
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 191 
verify_model(torch.nn.MaxPool3d(kernel_size=[2, 2, 2],dilation=[1, 2, 3],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 192 
para_0 = torch.randn([1, 3, 10, 10, 10], dtype=torch.float32)
para_1 = [10, 10, 10]
para_2 = [10, 10, 10]
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 193 
verify_model(torch.nn.MaxPool3d(kernel_size=[10, 10, 10],).eval(), input_data=[torch.randn([1, 3, 10, 10, 10], dtype=torch.float32)])
# test_id: 194 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [10, 10, 10]
para_2 = [10, 10, 10]
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 195 
verify_model(torch.nn.MaxPool3d(kernel_size=[10, 10, 10],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 196 
para_0 = torch.randn([1, 3, 10, 10, 10], dtype=torch.float32)
para_1 = [4, 4, 4]
para_2 = 2
para_3 = 2
para_4 = 1
para_5 = False
para_6 = False
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 197 
verify_model(torch.nn.MaxPool3d(kernel_size=[4, 4, 4],padding=2,stride=2,).eval(), input_data=[torch.randn([1, 3, 10, 10, 10], dtype=torch.float32)])
# test_id: 198 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [4, 4, 4]
para_2 = 2
para_3 = 2
para_4 = 1
para_5 = False
para_6 = False
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 199 
verify_model(torch.nn.MaxPool3d(kernel_size=[4, 4, 4],padding=2,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 200 
para_0 = torch.randn([3, 10, 10, 10], dtype=torch.float32)
para_1 = [1, 1, 1]
para_2 = [1, 1, 1]
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 201 
verify_model(torch.nn.MaxPool3d(kernel_size=[1, 1, 1],).eval(), input_data=[torch.randn([3, 10, 10, 10], dtype=torch.float32)])
# test_id: 202 
para_0 = torch.randn([tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [1, 1, 1]
para_2 = [1, 1, 1]
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 203 
verify_model(torch.nn.MaxPool3d(kernel_size=[1, 1, 1],).eval(), input_data=[torch.randn([tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 204 
para_0 = torch.randn([3, 10, 10, 10], dtype=torch.float32)
para_1 = [2, 2, 2]
para_2 = [2, 2, 2]
para_3 = 0
para_4 = [1, 2, 3]
para_5 = False
para_6 = False
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 205 
verify_model(torch.nn.MaxPool3d(kernel_size=[2, 2, 2],dilation=[1, 2, 3],).eval(), input_data=[torch.randn([3, 10, 10, 10], dtype=torch.float32)])
# test_id: 206 
para_0 = torch.randn([tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [2, 2, 2]
para_2 = [2, 2, 2]
para_3 = 0
para_4 = [1, 2, 3]
para_5 = False
para_6 = False
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 207 
verify_model(torch.nn.MaxPool3d(kernel_size=[2, 2, 2],dilation=[1, 2, 3],).eval(), input_data=[torch.randn([tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 208 
para_0 = torch.randn([3, 10, 10, 10], dtype=torch.float32)
para_1 = [10, 10, 10]
para_2 = [10, 10, 10]
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 209 
verify_model(torch.nn.MaxPool3d(kernel_size=[10, 10, 10],).eval(), input_data=[torch.randn([3, 10, 10, 10], dtype=torch.float32)])
# test_id: 210 
para_0 = torch.randn([tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [10, 10, 10]
para_2 = [10, 10, 10]
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 211 
verify_model(torch.nn.MaxPool3d(kernel_size=[10, 10, 10],).eval(), input_data=[torch.randn([tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 212 
para_0 = torch.randn([3, 10, 10, 10], dtype=torch.float32)
para_1 = [4, 4, 4]
para_2 = 2
para_3 = 2
para_4 = 1
para_5 = False
para_6 = False
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 213 
verify_model(torch.nn.MaxPool3d(kernel_size=[4, 4, 4],padding=2,stride=2,).eval(), input_data=[torch.randn([3, 10, 10, 10], dtype=torch.float32)])
# test_id: 214 
para_0 = torch.randn([tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [4, 4, 4]
para_2 = 2
para_3 = 2
para_4 = 1
para_5 = False
para_6 = False
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 215 
verify_model(torch.nn.MaxPool3d(kernel_size=[4, 4, 4],padding=2,stride=2,).eval(), input_data=[torch.randn([tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 216 
para_0 = torch.randn([3, 10, 10, 10], dtype=torch.float32)
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], kernel_size=[10, 10, 10],)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 217 
para_0 = torch.randn([tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)
class max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool3d(args[0], kernel_size=[10, 10, 10],)
verify_model(max_pool3d().float().eval(), input_data=para_0)


# test_id: 218 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = [10]
para_2 = [10]
para_3 = (0,)
para_4 = False
para_5 = True
class avg_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool1d(args[0], para_1,para_2,para_3,para_4,para_5,)
verify_model(avg_pool1d().float().eval(), input_data=para_0)


# test_id: 219 
verify_model(torch.nn.AvgPool1d(kernel_size=[10],).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 220 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = [10]
para_2 = [10]
para_3 = (0,)
para_4 = False
para_5 = True
class avg_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool1d(args[0], para_1,para_2,para_3,para_4,para_5,)
verify_model(avg_pool1d().float().eval(), input_data=para_0)


# test_id: 221 
verify_model(torch.nn.AvgPool1d(kernel_size=[10],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 222 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
class avg_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool1d(args[0], kernel_size=[10],)
verify_model(avg_pool1d().float().eval(), input_data=para_0)


# test_id: 223 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
class avg_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool1d(args[0], kernel_size=[10],)
verify_model(avg_pool1d().float().eval(), input_data=para_0)


# test_id: 224 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = [5]
para_2 = (2,)
para_3 = (2,)
para_4 = False
para_5 = True
class avg_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool1d(args[0], para_1,para_2,para_3,para_4,para_5,)
verify_model(avg_pool1d().float().eval(), input_data=para_0)


# test_id: 225 
verify_model(torch.nn.AvgPool1d(kernel_size=[5],stride=2,padding=2,).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 226 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = [5]
para_2 = (2,)
para_3 = (2,)
para_4 = False
para_5 = True
class avg_pool1d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool1d(args[0], para_1,para_2,para_3,para_4,para_5,)
verify_model(avg_pool1d().float().eval(), input_data=para_0)


# test_id: 227 
verify_model(torch.nn.AvgPool1d(kernel_size=[5],stride=2,padding=2,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 228 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = [10, 10]
para_2 = [10, 10]
para_3 = 0
para_4 = False
para_5 = True
para_6 = None
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 229 
verify_model(torch.nn.AvgPool2d(kernel_size=[10, 10],).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 230 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [10, 10]
para_2 = [10, 10]
para_3 = 0
para_4 = False
para_5 = True
para_6 = None
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 231 
verify_model(torch.nn.AvgPool2d(kernel_size=[10, 10],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 232 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], kernel_size=[10, 10],)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 233 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], kernel_size=[10, 10],)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 234 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = 5
para_2 = 2
para_3 = 2
para_4 = False
para_5 = True
para_6 = None
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 235 
verify_model(torch.nn.AvgPool2d(kernel_size=5,stride=2,padding=2,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 236 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 5
para_2 = 2
para_3 = 2
para_4 = False
para_5 = True
para_6 = None
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 237 
verify_model(torch.nn.AvgPool2d(kernel_size=5,stride=2,padding=2,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 238 
para_0 = torch.randn([1, 1, 1, 9], dtype=torch.float32)
para_1 = [1, 2]
para_2 = [1, 2]
para_3 = 0
para_4 = True
para_5 = True
para_6 = None
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 239 
verify_model(torch.nn.AvgPool2d(kernel_size=[1, 2],stride=[1, 2],ceil_mode=True,count_include_pad=True,).eval(), input_data=[torch.randn([1, 1, 1, 9], dtype=torch.float32)])
# test_id: 240 
para_0 = torch.randn([tensor(1), tensor(1), tensor(1), tensor(9)], dtype=torch.float32)
para_1 = [1, 2]
para_2 = [1, 2]
para_3 = 0
para_4 = True
para_5 = True
para_6 = None
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 241 
verify_model(torch.nn.AvgPool2d(kernel_size=[1, 2],stride=[1, 2],ceil_mode=True,count_include_pad=True,).eval(), input_data=[torch.randn([tensor(1), tensor(1), tensor(1), tensor(9)], dtype=torch.float32)])
# test_id: 242 
para_0 = torch.randn([1, 3, 10, 10, 10], dtype=torch.float32)
para_1 = [10, 10, 10]
para_2 = [10, 10, 10]
para_3 = 0
para_4 = False
para_5 = True
para_6 = None
class avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(avg_pool3d().float().eval(), input_data=para_0)


# test_id: 243 
verify_model(torch.nn.AvgPool3d(kernel_size=[10, 10, 10],).eval(), input_data=[torch.randn([1, 3, 10, 10, 10], dtype=torch.float32)])
# test_id: 244 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = [10, 10, 10]
para_2 = [10, 10, 10]
para_3 = 0
para_4 = False
para_5 = True
para_6 = None
class avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(avg_pool3d().float().eval(), input_data=para_0)


# test_id: 245 
verify_model(torch.nn.AvgPool3d(kernel_size=[10, 10, 10],).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 246 
para_0 = torch.randn([1, 3, 10, 10, 10], dtype=torch.float32)
class avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool3d(args[0], kernel_size=[10, 10, 10],)
verify_model(avg_pool3d().float().eval(), input_data=para_0)


# test_id: 247 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)
class avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool3d(args[0], kernel_size=[10, 10, 10],)
verify_model(avg_pool3d().float().eval(), input_data=para_0)


# test_id: 248 
para_0 = torch.randn([1, 3, 10, 10, 10], dtype=torch.float32)
para_1 = 5
para_2 = 2
para_3 = 2
para_4 = False
para_5 = True
para_6 = None
class avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(avg_pool3d().float().eval(), input_data=para_0)


# test_id: 249 
verify_model(torch.nn.AvgPool3d(kernel_size=5,stride=2,padding=2,).eval(), input_data=[torch.randn([1, 3, 10, 10, 10], dtype=torch.float32)])
# test_id: 250 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 5
para_2 = 2
para_3 = 2
para_4 = False
para_5 = True
para_6 = None
class avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(avg_pool3d().float().eval(), input_data=para_0)


# test_id: 251 
verify_model(torch.nn.AvgPool3d(kernel_size=5,stride=2,padding=2,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 252 
para_0 = torch.randn([10], dtype=torch.float32)
para_1 = -1.0
para_2 = 1.0
para_3 = False
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 253 
verify_model(torch.nn.Hardtanh().eval(), input_data=[torch.randn([10], dtype=torch.float32)])
# test_id: 254 
para_0 = torch.randn([tensor(10)], dtype=torch.float32)
para_1 = -1.0
para_2 = 1.0
para_3 = False
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 255 
verify_model(torch.nn.Hardtanh().eval(), input_data=[torch.randn([tensor(10)], dtype=torch.float32)])
# test_id: 256 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = torch.randn([6, 3, 7, 7], dtype=torch.float32)
para_2 = torch.randn([6], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 257 
verify_model(torch.nn.Conv2d(3,6,7,bias=True,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 258 
para_0 = torch.randn([1, 6, 4, 4], dtype=torch.float32)
para_1 = None
class softmax(Module):
    def forward(self, *args):
        return torch.nn.functional.softmax(args[0], para_1,_stacklevel=5,)
verify_model(softmax().float().eval(), input_data=para_0)


# test_id: 259 
verify_model(torch.nn.Softmax().eval(), input_data=[torch.randn([1, 6, 4, 4], dtype=torch.float32)])
# test_id: 260 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(6), tensor(3), tensor(7), tensor(7)], dtype=torch.float32)
para_2 = torch.randn([tensor(6)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 261 
verify_model(torch.nn.Conv2d(3,6,7,bias=True,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 262 
para_0 = torch.randn([tensor(1), tensor(6), tensor(4), tensor(4)], dtype=torch.float32)
para_1 = None
class softmax(Module):
    def forward(self, *args):
        return torch.nn.functional.softmax(args[0], para_1,_stacklevel=5,)
verify_model(softmax().float().eval(), input_data=para_0)


# test_id: 263 
verify_model(torch.nn.Softmax().eval(), input_data=[torch.randn([tensor(1), tensor(6), tensor(4), tensor(4)], dtype=torch.float32)])
# test_id: 264 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = torch.randn([6, 3, 7, 7], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 265 
verify_model(torch.nn.Conv2d(3,6,7,bias=False,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 266 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(6), tensor(3), tensor(7), tensor(7)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 267 
verify_model(torch.nn.Conv2d(3,6,7,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 268 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = torch.randn([6, 1, 7, 7], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 3
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 269 
verify_model(torch.nn.Conv2d(3,6,7,groups=3,bias=False,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 270 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(6), tensor(1), tensor(7), tensor(7)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 3
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 271 
verify_model(torch.nn.Conv2d(3,6,7,groups=3,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 272 
para_0 = torch.randn([1, 8, 16, 16], dtype=torch.float32)
para_1 = torch.randn([8, 4, 3, 3], dtype=torch.float32)
para_2 = torch.randn([8], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 2
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 273 
verify_model(torch.nn.Conv2d(8,8,kernel_size=(3, 3),stride=(1, 1),groups=2,).eval(), input_data=[torch.randn([1, 8, 16, 16], dtype=torch.float32)])
# test_id: 274 
para_0 = torch.randn([tensor(1), tensor(8), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = torch.randn([tensor(8), tensor(4), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(8)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 2
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 275 
verify_model(torch.nn.Conv2d(8,8,kernel_size=(3, 3),stride=(1, 1),groups=2,).eval(), input_data=[torch.randn([tensor(1), tensor(8), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 276 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = torch.randn([6, 3, 7], dtype=torch.float32)
para_2 = torch.randn([6], dtype=torch.float32)
para_3 = (1,)
para_4 = (0,)
para_5 = (1,)
para_6 = 1
class conv1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv1d().float().eval(), input_data=para_0)


# test_id: 277 
verify_model(torch.nn.Conv1d(3,6,7,).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 278 
para_0 = torch.randn([1, 6, 4], dtype=torch.float32)
para_1 = None
class softmax(Module):
    def forward(self, *args):
        return torch.nn.functional.softmax(args[0], para_1,_stacklevel=5,)
verify_model(softmax().float().eval(), input_data=para_0)


# test_id: 279 
verify_model(torch.nn.Softmax().eval(), input_data=[torch.randn([1, 6, 4], dtype=torch.float32)])
# test_id: 280 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(6), tensor(3), tensor(7)], dtype=torch.float32)
para_2 = torch.randn([tensor(6)], dtype=torch.float32)
para_3 = (1,)
para_4 = (0,)
para_5 = (1,)
para_6 = 1
class conv1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv1d().float().eval(), input_data=para_0)


# test_id: 281 
verify_model(torch.nn.Conv1d(3,6,7,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 282 
para_0 = torch.randn([tensor(1), tensor(6), tensor(4)], dtype=torch.float32)
para_1 = None
class softmax(Module):
    def forward(self, *args):
        return torch.nn.functional.softmax(args[0], para_1,_stacklevel=5,)
verify_model(softmax().float().eval(), input_data=para_0)


# test_id: 283 
verify_model(torch.nn.Softmax().eval(), input_data=[torch.randn([tensor(1), tensor(6), tensor(4)], dtype=torch.float32)])
# test_id: 284 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = torch.randn([6, 3, 7], dtype=torch.float32)
para_2 = None
para_3 = (1,)
para_4 = (0,)
para_5 = (1,)
para_6 = 1
class conv1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv1d().float().eval(), input_data=para_0)


# test_id: 285 
verify_model(torch.nn.Conv1d(3,6,7,bias=False,).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 286 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(6), tensor(3), tensor(7)], dtype=torch.float32)
para_2 = None
para_3 = (1,)
para_4 = (0,)
para_5 = (1,)
para_6 = 1
class conv1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv1d().float().eval(), input_data=para_0)


# test_id: 287 
verify_model(torch.nn.Conv1d(3,6,7,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 288 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = torch.randn([6, 1, 7], dtype=torch.float32)
para_2 = None
para_3 = (1,)
para_4 = (0,)
para_5 = (1,)
para_6 = 3
class conv1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv1d().float().eval(), input_data=para_0)


# test_id: 289 
verify_model(torch.nn.Conv1d(3,6,7,groups=3,bias=False,).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 290 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(6), tensor(1), tensor(7)], dtype=torch.float32)
para_2 = None
para_3 = (1,)
para_4 = (0,)
para_5 = (1,)
para_6 = 3
class conv1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv1d().float().eval(), input_data=para_0)


# test_id: 291 
verify_model(torch.nn.Conv1d(3,6,7,groups=3,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 292 
para_0 = torch.randn([1, 3, 16, 16, 16], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3, 3, 3], dtype=torch.float32)
para_2 = torch.randn([5], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 293 
verify_model(torch.nn.ConvTranspose3d(in_channels=3,out_channels=5,kernel_size=3,stride=1,output_padding=0,groups=1,bias=True,).eval(), input_data=[torch.randn([1, 3, 16, 16, 16], dtype=torch.float32)])
# test_id: 294 
para_0 = torch.randn([tensor(1), tensor(3), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(5)], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 295 
verify_model(torch.nn.ConvTranspose3d(in_channels=3,out_channels=5,kernel_size=3,stride=1,output_padding=0,groups=1,bias=True,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 296 
para_0 = torch.randn([1, 3, 128, 256], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3, 3], dtype=torch.float32)
para_2 = torch.randn([5], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (0, 0)
para_6 = 1
para_7 = (1, 1)
class conv_transpose2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose2d().float().eval(), input_data=para_0)


# test_id: 297 
verify_model(torch.nn.ConvTranspose2d(in_channels=3,out_channels=5,kernel_size=3,stride=1,output_padding=0,groups=1,bias=True,).eval(), input_data=[torch.randn([1, 3, 128, 256], dtype=torch.float32)])
# test_id: 298 
para_0 = torch.randn([tensor(1), tensor(3), tensor(128), tensor(256)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(5)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (0, 0)
para_6 = 1
para_7 = (1, 1)
class conv_transpose2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose2d().float().eval(), input_data=para_0)


# test_id: 299 
verify_model(torch.nn.ConvTranspose2d(in_channels=3,out_channels=5,kernel_size=3,stride=1,output_padding=0,groups=1,bias=True,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(128), tensor(256)], dtype=torch.float32)])
# test_id: 300 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3], dtype=torch.float32)
para_2 = torch.randn([5], dtype=torch.float32)
para_3 = (1,)
para_4 = (0,)
para_5 = (0,)
para_6 = 1
para_7 = (1,)
class conv_transpose1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose1d().float().eval(), input_data=para_0)


# test_id: 301 
verify_model(torch.nn.ConvTranspose1d(in_channels=3,out_channels=5,kernel_size=3,stride=1,output_padding=0,groups=1,bias=True,).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 302 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(5)], dtype=torch.float32)
para_3 = (1,)
para_4 = (0,)
para_5 = (0,)
para_6 = 1
para_7 = (1,)
class conv_transpose1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose1d().float().eval(), input_data=para_0)


# test_id: 303 
verify_model(torch.nn.ConvTranspose1d(in_channels=3,out_channels=5,kernel_size=3,stride=1,output_padding=0,groups=1,bias=True,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 304 
para_0 = torch.randn([1, 3, 16, 16, 16], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3, 3, 3], dtype=torch.float32)
para_2 = torch.randn([5], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 305 
verify_model(torch.nn.ConvTranspose3d(in_channels=3,out_channels=5,kernel_size=3,stride=2,output_padding=1,groups=1,bias=True,).eval(), input_data=[torch.randn([1, 3, 16, 16, 16], dtype=torch.float32)])
# test_id: 306 
para_0 = torch.randn([tensor(1), tensor(3), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(5)], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 307 
verify_model(torch.nn.ConvTranspose3d(in_channels=3,out_channels=5,kernel_size=3,stride=2,output_padding=1,groups=1,bias=True,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 308 
para_0 = torch.randn([1, 3, 128, 256], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3, 3], dtype=torch.float32)
para_2 = torch.randn([5], dtype=torch.float32)
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
para_7 = (1, 1)
class conv_transpose2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose2d().float().eval(), input_data=para_0)


# test_id: 309 
verify_model(torch.nn.ConvTranspose2d(in_channels=3,out_channels=5,kernel_size=3,stride=2,output_padding=1,groups=1,bias=True,).eval(), input_data=[torch.randn([1, 3, 128, 256], dtype=torch.float32)])
# test_id: 310 
para_0 = torch.randn([tensor(1), tensor(3), tensor(128), tensor(256)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(5)], dtype=torch.float32)
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
para_7 = (1, 1)
class conv_transpose2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose2d().float().eval(), input_data=para_0)


# test_id: 311 
verify_model(torch.nn.ConvTranspose2d(in_channels=3,out_channels=5,kernel_size=3,stride=2,output_padding=1,groups=1,bias=True,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(128), tensor(256)], dtype=torch.float32)])
# test_id: 312 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3], dtype=torch.float32)
para_2 = torch.randn([5], dtype=torch.float32)
para_3 = (2,)
para_4 = (0,)
para_5 = (1,)
para_6 = 1
para_7 = (1,)
class conv_transpose1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose1d().float().eval(), input_data=para_0)


# test_id: 313 
verify_model(torch.nn.ConvTranspose1d(in_channels=3,out_channels=5,kernel_size=3,stride=2,output_padding=1,groups=1,bias=True,).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 314 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(5)], dtype=torch.float32)
para_3 = (2,)
para_4 = (0,)
para_5 = (1,)
para_6 = 1
para_7 = (1,)
class conv_transpose1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose1d().float().eval(), input_data=para_0)


# test_id: 315 
verify_model(torch.nn.ConvTranspose1d(in_channels=3,out_channels=5,kernel_size=3,stride=2,output_padding=1,groups=1,bias=True,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 316 
para_0 = torch.randn([1, 3, 16, 16, 16], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3, 3, 3], dtype=torch.float32)
para_2 = torch.randn([5], dtype=torch.float32)
para_3 = (3, 3, 3)
para_4 = (0, 0, 0)
para_5 = (2, 2, 2)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 317 
verify_model(torch.nn.ConvTranspose3d(in_channels=3,out_channels=5,kernel_size=3,stride=3,output_padding=2,groups=1,bias=True,).eval(), input_data=[torch.randn([1, 3, 16, 16, 16], dtype=torch.float32)])
# test_id: 318 
para_0 = torch.randn([tensor(1), tensor(3), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(5)], dtype=torch.float32)
para_3 = (3, 3, 3)
para_4 = (0, 0, 0)
para_5 = (2, 2, 2)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 319 
verify_model(torch.nn.ConvTranspose3d(in_channels=3,out_channels=5,kernel_size=3,stride=3,output_padding=2,groups=1,bias=True,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 320 
para_0 = torch.randn([1, 3, 128, 256], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3, 3], dtype=torch.float32)
para_2 = torch.randn([5], dtype=torch.float32)
para_3 = (3, 3)
para_4 = (0, 0)
para_5 = (2, 2)
para_6 = 1
para_7 = (1, 1)
class conv_transpose2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose2d().float().eval(), input_data=para_0)


# test_id: 321 
verify_model(torch.nn.ConvTranspose2d(in_channels=3,out_channels=5,kernel_size=3,stride=3,output_padding=2,groups=1,bias=True,).eval(), input_data=[torch.randn([1, 3, 128, 256], dtype=torch.float32)])
# test_id: 322 
para_0 = torch.randn([tensor(1), tensor(3), tensor(128), tensor(256)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(5)], dtype=torch.float32)
para_3 = (3, 3)
para_4 = (0, 0)
para_5 = (2, 2)
para_6 = 1
para_7 = (1, 1)
class conv_transpose2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose2d().float().eval(), input_data=para_0)


# test_id: 323 
verify_model(torch.nn.ConvTranspose2d(in_channels=3,out_channels=5,kernel_size=3,stride=3,output_padding=2,groups=1,bias=True,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(128), tensor(256)], dtype=torch.float32)])
# test_id: 324 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3], dtype=torch.float32)
para_2 = torch.randn([5], dtype=torch.float32)
para_3 = (3,)
para_4 = (0,)
para_5 = (2,)
para_6 = 1
para_7 = (1,)
class conv_transpose1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose1d().float().eval(), input_data=para_0)


# test_id: 325 
verify_model(torch.nn.ConvTranspose1d(in_channels=3,out_channels=5,kernel_size=3,stride=3,output_padding=2,groups=1,bias=True,).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 326 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(5)], dtype=torch.float32)
para_3 = (3,)
para_4 = (0,)
para_5 = (2,)
para_6 = 1
para_7 = (1,)
class conv_transpose1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose1d().float().eval(), input_data=para_0)


# test_id: 327 
verify_model(torch.nn.ConvTranspose1d(in_channels=3,out_channels=5,kernel_size=3,stride=3,output_padding=2,groups=1,bias=True,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 328 
para_0 = torch.randn([1, 3, 16, 16, 16], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1, 1)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 329 
verify_model(torch.nn.ConvTranspose3d(in_channels=3,out_channels=5,kernel_size=3,stride=1,output_padding=0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 3, 16, 16, 16], dtype=torch.float32)])
# test_id: 330 
para_0 = torch.randn([tensor(1), tensor(3), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1, 1)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 331 
verify_model(torch.nn.ConvTranspose3d(in_channels=3,out_channels=5,kernel_size=3,stride=1,output_padding=0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 332 
para_0 = torch.randn([1, 3, 128, 256], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (0, 0)
para_6 = 1
para_7 = (1, 1)
class conv_transpose2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose2d().float().eval(), input_data=para_0)


# test_id: 333 
verify_model(torch.nn.ConvTranspose2d(in_channels=3,out_channels=5,kernel_size=3,stride=1,output_padding=0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 3, 128, 256], dtype=torch.float32)])
# test_id: 334 
para_0 = torch.randn([tensor(1), tensor(3), tensor(128), tensor(256)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (0, 0)
para_6 = 1
para_7 = (1, 1)
class conv_transpose2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose2d().float().eval(), input_data=para_0)


# test_id: 335 
verify_model(torch.nn.ConvTranspose2d(in_channels=3,out_channels=5,kernel_size=3,stride=1,output_padding=0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(128), tensor(256)], dtype=torch.float32)])
# test_id: 336 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3], dtype=torch.float32)
para_2 = None
para_3 = (1,)
para_4 = (0,)
para_5 = (0,)
para_6 = 1
para_7 = (1,)
class conv_transpose1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose1d().float().eval(), input_data=para_0)


# test_id: 337 
verify_model(torch.nn.ConvTranspose1d(in_channels=3,out_channels=5,kernel_size=3,stride=1,output_padding=0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 338 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1,)
para_4 = (0,)
para_5 = (0,)
para_6 = 1
para_7 = (1,)
class conv_transpose1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose1d().float().eval(), input_data=para_0)


# test_id: 339 
verify_model(torch.nn.ConvTranspose1d(in_channels=3,out_channels=5,kernel_size=3,stride=1,output_padding=0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 340 
para_0 = torch.randn([1, 3, 16, 16, 16], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 341 
verify_model(torch.nn.ConvTranspose3d(in_channels=3,out_channels=5,kernel_size=3,stride=2,output_padding=1,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 3, 16, 16, 16], dtype=torch.float32)])
# test_id: 342 
para_0 = torch.randn([tensor(1), tensor(3), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 343 
verify_model(torch.nn.ConvTranspose3d(in_channels=3,out_channels=5,kernel_size=3,stride=2,output_padding=1,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 344 
para_0 = torch.randn([1, 3, 128, 256], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
para_7 = (1, 1)
class conv_transpose2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose2d().float().eval(), input_data=para_0)


# test_id: 345 
verify_model(torch.nn.ConvTranspose2d(in_channels=3,out_channels=5,kernel_size=3,stride=2,output_padding=1,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 3, 128, 256], dtype=torch.float32)])
# test_id: 346 
para_0 = torch.randn([tensor(1), tensor(3), tensor(128), tensor(256)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
para_7 = (1, 1)
class conv_transpose2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose2d().float().eval(), input_data=para_0)


# test_id: 347 
verify_model(torch.nn.ConvTranspose2d(in_channels=3,out_channels=5,kernel_size=3,stride=2,output_padding=1,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(128), tensor(256)], dtype=torch.float32)])
# test_id: 348 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3], dtype=torch.float32)
para_2 = None
para_3 = (2,)
para_4 = (0,)
para_5 = (1,)
para_6 = 1
para_7 = (1,)
class conv_transpose1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose1d().float().eval(), input_data=para_0)


# test_id: 349 
verify_model(torch.nn.ConvTranspose1d(in_channels=3,out_channels=5,kernel_size=3,stride=2,output_padding=1,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 350 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2,)
para_4 = (0,)
para_5 = (1,)
para_6 = 1
para_7 = (1,)
class conv_transpose1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose1d().float().eval(), input_data=para_0)


# test_id: 351 
verify_model(torch.nn.ConvTranspose1d(in_channels=3,out_channels=5,kernel_size=3,stride=2,output_padding=1,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 352 
para_0 = torch.randn([1, 3, 16, 16, 16], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (3, 3, 3)
para_4 = (0, 0, 0)
para_5 = (2, 2, 2)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 353 
verify_model(torch.nn.ConvTranspose3d(in_channels=3,out_channels=5,kernel_size=3,stride=3,output_padding=2,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 3, 16, 16, 16], dtype=torch.float32)])
# test_id: 354 
para_0 = torch.randn([tensor(1), tensor(3), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (3, 3, 3)
para_4 = (0, 0, 0)
para_5 = (2, 2, 2)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 355 
verify_model(torch.nn.ConvTranspose3d(in_channels=3,out_channels=5,kernel_size=3,stride=3,output_padding=2,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 356 
para_0 = torch.randn([1, 3, 128, 256], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (3, 3)
para_4 = (0, 0)
para_5 = (2, 2)
para_6 = 1
para_7 = (1, 1)
class conv_transpose2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose2d().float().eval(), input_data=para_0)


# test_id: 357 
verify_model(torch.nn.ConvTranspose2d(in_channels=3,out_channels=5,kernel_size=3,stride=3,output_padding=2,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 3, 128, 256], dtype=torch.float32)])
# test_id: 358 
para_0 = torch.randn([tensor(1), tensor(3), tensor(128), tensor(256)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (3, 3)
para_4 = (0, 0)
para_5 = (2, 2)
para_6 = 1
para_7 = (1, 1)
class conv_transpose2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose2d().float().eval(), input_data=para_0)


# test_id: 359 
verify_model(torch.nn.ConvTranspose2d(in_channels=3,out_channels=5,kernel_size=3,stride=3,output_padding=2,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(128), tensor(256)], dtype=torch.float32)])
# test_id: 360 
para_0 = torch.randn([1, 3, 10], dtype=torch.float32)
para_1 = torch.randn([3, 5, 3], dtype=torch.float32)
para_2 = None
para_3 = (3,)
para_4 = (0,)
para_5 = (2,)
para_6 = 1
para_7 = (1,)
class conv_transpose1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose1d().float().eval(), input_data=para_0)


# test_id: 361 
verify_model(torch.nn.ConvTranspose1d(in_channels=3,out_channels=5,kernel_size=3,stride=3,output_padding=2,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 3, 10], dtype=torch.float32)])
# test_id: 362 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (3,)
para_4 = (0,)
para_5 = (2,)
para_6 = 1
para_7 = (1,)
class conv_transpose1d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose1d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose1d().float().eval(), input_data=para_0)


# test_id: 363 
verify_model(torch.nn.ConvTranspose1d(in_channels=3,out_channels=5,kernel_size=3,stride=3,output_padding=2,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10)], dtype=torch.float32)])
# test_id: 364 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(8), tensor(16)], dtype=torch.float32)
para_1 = torch.randn([tensor(2048), tensor(256), tensor(3), tensor(3)], dtype=torch.float32)
class conv_transpose2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose2d(args[0], para_1,stride=(2, 2),padding=(1, 1),output_padding=(1, 1),groups={'shape': [], 'dtype': 'torch.int64'},)
verify_model(conv_transpose2d().float().eval(), input_data=para_0)


# test_id: 365 
para_0 = torch.randn([1, 2048, 8, 16], dtype=torch.float32)
para_1 = torch.randn([2048, 256, 3, 3], dtype=torch.float32)
class conv_transpose2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose2d(args[0], para_1,stride=(2, 2),padding=(1, 1),output_padding=(1, 1),groups=4,)
verify_model(conv_transpose2d().float().eval(), input_data=para_0)


# test_id: 366 
para_0 = torch.randn([1, 3], dtype=torch.float32)
para_1 = 0
para_2 = 0
para_3 = False
class threshold(Module):
    def forward(self, *args):
        return torch.nn.functional.threshold(args[0], para_1,para_2,para_3,)
verify_model(threshold().float().eval(), input_data=para_0)


# test_id: 367 
verify_model(torch.nn.Threshold(0,0,).eval(), input_data=[torch.randn([1, 3], dtype=torch.float32)])
# test_id: 368 
para_0 = torch.randn([tensor(1), tensor(3)], dtype=torch.float32)
para_1 = 0
para_2 = 0
para_3 = False
class threshold(Module):
    def forward(self, *args):
        return torch.nn.functional.threshold(args[0], para_1,para_2,para_3,)
verify_model(threshold().float().eval(), input_data=para_0)


# test_id: 369 
verify_model(torch.nn.Threshold(0,0,).eval(), input_data=[torch.randn([tensor(1), tensor(3)], dtype=torch.float32)])
# test_id: 370 
para_0 = torch.randn([1, 16, 10, 10], dtype=torch.float32)
para_1 = torch.randn([16], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = torch.randn([16], dtype=torch.float32)
para_4 = torch.randn([16], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 371 
verify_model(torch.nn.BatchNorm2d(16,).eval(), input_data=[torch.randn([1, 16, 10, 10], dtype=torch.float32)])
# test_id: 372 
para_0 = torch.randn([tensor(1), tensor(16), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(16)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = torch.randn([tensor(16)], dtype=torch.float32)
para_4 = torch.randn([tensor(16)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 373 
verify_model(torch.nn.BatchNorm2d(16,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 374 
para_0 = torch.randn([1, 16, 10, 10, 10], dtype=torch.float32)
para_1 = torch.randn([16], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = torch.randn([16], dtype=torch.float32)
para_4 = torch.randn([16], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 375 
verify_model(torch.nn.BatchNorm3d(16,).eval(), input_data=[torch.randn([1, 16, 10, 10, 10], dtype=torch.float32)])
# test_id: 376 
para_0 = torch.randn([tensor(1), tensor(16), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(16)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = torch.randn([tensor(16)], dtype=torch.float32)
para_4 = torch.randn([tensor(16)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 377 
verify_model(torch.nn.BatchNorm3d(16,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 378 
para_0 = torch.randn([1, 16, 10, 10], dtype=torch.float32)
para_1 = None
para_2 = None
para_3 = None
para_4 = None
para_5 = True
para_6 = 0.1
para_7 = 1e-05
class instance_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.instance_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(instance_norm().float().eval(), input_data=para_0)


# test_id: 379 
verify_model(torch.nn.InstanceNorm2d(16,).eval(), input_data=[torch.randn([1, 16, 10, 10], dtype=torch.float32)])
# test_id: 380 
para_0 = torch.randn([tensor(1), tensor(16), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = None
para_2 = None
para_3 = None
para_4 = None
para_5 = True
para_6 = 0.1
para_7 = 1e-05
class instance_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.instance_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(instance_norm().float().eval(), input_data=para_0)


# test_id: 381 
verify_model(torch.nn.InstanceNorm2d(16,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 382 
para_0 = torch.randn([1, 16, 10, 10, 10], dtype=torch.float32)
para_1 = None
para_2 = None
para_3 = None
para_4 = None
para_5 = True
para_6 = 0.1
para_7 = 1e-05
class instance_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.instance_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(instance_norm().float().eval(), input_data=para_0)


# test_id: 383 
verify_model(torch.nn.InstanceNorm3d(16,).eval(), input_data=[torch.randn([1, 16, 10, 10, 10], dtype=torch.float32)])
# test_id: 384 
para_0 = torch.randn([tensor(1), tensor(16), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = None
para_2 = None
para_3 = None
para_4 = None
para_5 = True
para_6 = 0.1
para_7 = 1e-05
class instance_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.instance_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(instance_norm().float().eval(), input_data=para_0)


# test_id: 385 
verify_model(torch.nn.InstanceNorm3d(16,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 386 
para_0 = torch.randn([1, 16, 10, 10], dtype=torch.float32)
para_1 = (10,)
para_2 = torch.randn([10], dtype=torch.float32)
para_3 = torch.randn([10], dtype=torch.float32)
para_4 = 1e-05
class layer_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.layer_norm(args[0], para_1,para_2,para_3,para_4,)
verify_model(layer_norm().float().eval(), input_data=para_0)


# test_id: 387 
verify_model(torch.nn.LayerNorm(10,).eval(), input_data=[torch.randn([1, 16, 10, 10], dtype=torch.float32)])
# test_id: 388 
para_0 = torch.randn([tensor(1), tensor(16), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = (10,)
para_2 = torch.randn([tensor(10)], dtype=torch.float32)
para_3 = torch.randn([tensor(10)], dtype=torch.float32)
para_4 = 1e-05
class layer_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.layer_norm(args[0], para_1,para_2,para_3,para_4,)
verify_model(layer_norm().float().eval(), input_data=para_0)


# test_id: 389 
verify_model(torch.nn.LayerNorm(10,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 390 
para_0 = torch.randn([1, 16, 10, 10, 10], dtype=torch.float32)
para_1 = (10,)
para_2 = torch.randn([10], dtype=torch.float32)
para_3 = torch.randn([10], dtype=torch.float32)
para_4 = 1e-05
class layer_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.layer_norm(args[0], para_1,para_2,para_3,para_4,)
verify_model(layer_norm().float().eval(), input_data=para_0)


# test_id: 391 
verify_model(torch.nn.LayerNorm(10,).eval(), input_data=[torch.randn([1, 16, 10, 10, 10], dtype=torch.float32)])
# test_id: 392 
para_0 = torch.randn([tensor(1), tensor(16), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = (10,)
para_2 = torch.randn([tensor(10)], dtype=torch.float32)
para_3 = torch.randn([tensor(10)], dtype=torch.float32)
para_4 = 1e-05
class layer_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.layer_norm(args[0], para_1,para_2,para_3,para_4,)
verify_model(layer_norm().float().eval(), input_data=para_0)


# test_id: 393 
verify_model(torch.nn.LayerNorm(10,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(10), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 394 
verify_model(torch.nn.GroupNorm(3,6,).eval(), input_data=[torch.randn([10, 6, 5, 5], dtype=torch.float32)])
# test_id: 395 
verify_model(torch.nn.GroupNorm(3,6,).eval(), input_data=[torch.randn([tensor(10), tensor(6), tensor(5), tensor(5)], dtype=torch.float32)])
# test_id: 396 
verify_model(torch.nn.GroupNorm(1,6,).eval(), input_data=[torch.randn([10, 6, 5, 5], dtype=torch.float32)])
# test_id: 397 
verify_model(torch.nn.GroupNorm(1,6,).eval(), input_data=[torch.randn([tensor(10), tensor(6), tensor(5), tensor(5)], dtype=torch.float32)])
# test_id: 398 
verify_model(torch.nn.GroupNorm(6,6,).eval(), input_data=[torch.randn([10, 6, 5, 5], dtype=torch.float32)])
# test_id: 399 
verify_model(torch.nn.GroupNorm(6,6,).eval(), input_data=[torch.randn([tensor(10), tensor(6), tensor(5), tensor(5)], dtype=torch.float32)])
# test_id: 400 
verify_model(torch.nn.GroupNorm(1,10,).eval(), input_data=[torch.randn([1, 10, 4, 7], dtype=torch.float32)])
# test_id: 401 
verify_model(torch.nn.GroupNorm(1,10,).eval(), input_data=[torch.randn([tensor(1), tensor(10), tensor(4), tensor(7)], dtype=torch.float32)])
# test_id: 402 
verify_model(torch.nn.GroupNorm(2,10,).eval(), input_data=[torch.randn([1, 10, 4, 7], dtype=torch.float32)])
# test_id: 403 
verify_model(torch.nn.GroupNorm(2,10,).eval(), input_data=[torch.randn([tensor(1), tensor(10), tensor(4), tensor(7)], dtype=torch.float32)])
# test_id: 404 
verify_model(torch.nn.GroupNorm(5,10,).eval(), input_data=[torch.randn([1, 10, 4, 7], dtype=torch.float32)])
# test_id: 405 
verify_model(torch.nn.GroupNorm(5,10,).eval(), input_data=[torch.randn([tensor(1), tensor(10), tensor(4), tensor(7)], dtype=torch.float32)])
# test_id: 406 
verify_model(torch.nn.GroupNorm(10,10,).eval(), input_data=[torch.randn([1, 10, 4, 7], dtype=torch.float32)])
# test_id: 407 
verify_model(torch.nn.GroupNorm(10,10,).eval(), input_data=[torch.randn([tensor(1), tensor(10), tensor(4), tensor(7)], dtype=torch.float32)])
# test_id: 408 
para_0 = torch.randn([10, 10], dtype=torch.float32)
para_1 = 1
class log_softmax(Module):
    def forward(self, *args):
        return torch.nn.functional.log_softmax(args[0], para_1,_stacklevel=5,)
verify_model(log_softmax().float().eval(), input_data=para_0)


# test_id: 409 
verify_model(torch.nn.LogSoftmax(dim=1,).eval(), input_data=[torch.randn([10, 10], dtype=torch.float32)])
# test_id: 410 
para_0 = torch.randn([tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 1
class log_softmax(Module):
    def forward(self, *args):
        return torch.nn.functional.log_softmax(args[0], para_1,_stacklevel=5,)
verify_model(log_softmax().float().eval(), input_data=para_0)


# test_id: 411 
verify_model(torch.nn.LogSoftmax(dim=1,).eval(), input_data=[torch.randn([tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 412 
verify_model(torch.nn.Sigmoid().eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 413 
verify_model(torch.nn.Sigmoid().eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 414 
para_0 = torch.randn([10, 10], dtype=torch.float32)
para_1 = torch.randn([7, 10], dtype=torch.float32)
para_2 = torch.randn([7], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 415 
verify_model(torch.nn.Linear(10,7,bias=True,).eval(), input_data=[torch.randn([10, 10], dtype=torch.float32)])
# test_id: 416 
para_0 = torch.randn([tensor(10), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(7), tensor(10)], dtype=torch.float32)
para_2 = torch.randn([tensor(7)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 417 
verify_model(torch.nn.Linear(10,7,bias=True,).eval(), input_data=[torch.randn([tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 418 
para_0 = torch.randn([10, 10], dtype=torch.float32)
para_1 = torch.randn([7, 10], dtype=torch.float32)
para_2 = None
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 419 
verify_model(torch.nn.Linear(10,7,bias=False,).eval(), input_data=[torch.randn([10, 10], dtype=torch.float32)])
# test_id: 420 
para_0 = torch.randn([tensor(10), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(7), tensor(10)], dtype=torch.float32)
para_2 = None
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 421 
verify_model(torch.nn.Linear(10,7,bias=False,).eval(), input_data=[torch.randn([tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 422 
para_0 = torch.randn([2, 2], dtype=torch.float32)
para_1 = torch.randn([2, 2], dtype=torch.float32)
para_2 = torch.randn([2], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 423 
para_0 = torch.randn([tensor(2), tensor(2)], dtype=torch.float32)
para_1 = torch.randn([tensor(2), tensor(2)], dtype=torch.float32)
para_2 = torch.randn([tensor(2)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 424 
para_0 = torch.randn([2, 2], dtype=torch.float32)
para_1 = torch.randn([2, 2], dtype=torch.float32)
para_2 = torch.randn([2, 2], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 425 
para_0 = torch.randn([tensor(2), tensor(2)], dtype=torch.float32)
para_1 = torch.randn([tensor(2), tensor(2)], dtype=torch.float32)
para_2 = torch.randn([tensor(2), tensor(2)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 426 
para_0 = torch.randn([2, 2], dtype=torch.float32)
para_1 = torch.randn([2, 2], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 427 
para_0 = torch.randn([tensor(2), tensor(2)], dtype=torch.float32)
para_1 = torch.randn([tensor(2), tensor(2)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 428 
para_0 = torch.randn([2, 2], dtype=torch.float32)
para_1 = torch.randn([3, 2], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 429 
para_0 = torch.randn([tensor(2), tensor(2)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(2)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 430 
para_0 = torch.randn([2, 2], dtype=torch.float32)
para_1 = torch.randn([2], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 431 
para_0 = torch.randn([tensor(2), tensor(2)], dtype=torch.float32)
para_1 = torch.randn([tensor(2)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 432 
para_0 = torch.randn([4, 3, 2], dtype=torch.float32)
para_1 = torch.randn([3, 2], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 433 
para_0 = torch.randn([tensor(4), tensor(3), tensor(2)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(2)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 434 
para_0 = torch.randn([4, 3, 2], dtype=torch.float32)
para_1 = torch.randn([2, 2], dtype=torch.float32)
para_2 = torch.randn([2], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 435 
para_0 = torch.randn([tensor(4), tensor(3), tensor(2)], dtype=torch.float32)
para_1 = torch.randn([tensor(2), tensor(2)], dtype=torch.float32)
para_2 = torch.randn([tensor(2)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 436 
para_0 = torch.randn([10, 10], dtype=torch.float32)
para_1 = torch.randn([10, 10], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 437 
para_0 = torch.randn([tensor(10), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(10), tensor(10)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 438 
para_0 = torch.randn([2], dtype=torch.float32)
para_1 = torch.randn([2, 2], dtype=torch.float32)
para_2 = torch.randn([2], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 439 
para_0 = torch.randn([tensor(2)], dtype=torch.float32)
para_1 = torch.randn([tensor(2), tensor(2)], dtype=torch.float32)
para_2 = torch.randn([tensor(2)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 440 
para_0 = torch.randn([2], dtype=torch.float32)
para_1 = torch.randn([2, 2], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 441 
para_0 = torch.randn([tensor(2)], dtype=torch.float32)
para_1 = torch.randn([tensor(2), tensor(2)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 442 
para_0 = torch.randn([2], dtype=torch.float32)
para_1 = torch.randn([2], dtype=torch.float32)
para_2 = torch.randn([], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 443 
para_0 = torch.randn([tensor(2)], dtype=torch.float32)
para_1 = torch.randn([tensor(2)], dtype=torch.float32)
para_2 = torch.randn([], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 444 
para_0 = torch.randn([2], dtype=torch.float32)
para_1 = torch.randn([2], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 445 
para_0 = torch.randn([tensor(2)], dtype=torch.float32)
para_1 = torch.randn([tensor(2)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 446 
para_0 = torch.randn([10, 10], dtype=torch.float32)
para_1 = 0.5
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 447 
verify_model(torch.nn.Dropout(p=0.5,).eval(), input_data=[torch.randn([10, 10], dtype=torch.float32)])
# test_id: 448 
para_0 = torch.randn([tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 0.5
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 449 
verify_model(torch.nn.Dropout(p=0.5,).eval(), input_data=[torch.randn([tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 450 
para_0 = torch.randn([3, 10, 10], dtype=torch.float32)
para_1 = 0.5
para_2 = False
para_3 = False
class dropout2d(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout2d(args[0], para_1,para_2,para_3,)
verify_model(dropout2d().float().eval(), input_data=para_0)


# test_id: 451 
verify_model(torch.nn.Dropout2d(p=0.5,).eval(), input_data=[torch.randn([3, 10, 10], dtype=torch.float32)])
# test_id: 452 
para_0 = torch.randn([tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 0.5
para_2 = False
para_3 = False
class dropout2d(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout2d(args[0], para_1,para_2,para_3,)
verify_model(dropout2d().float().eval(), input_data=para_0)


# test_id: 453 
verify_model(torch.nn.Dropout2d(p=0.5,).eval(), input_data=[torch.randn([tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 454 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = 0.5
para_2 = False
para_3 = False
class dropout3d(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout3d(args[0], para_1,para_2,para_3,)
verify_model(dropout3d().float().eval(), input_data=para_0)


# test_id: 455 
verify_model(torch.nn.Dropout3d(p=0.5,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 456 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 0.5
para_2 = False
para_3 = False
class dropout3d(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout3d(args[0], para_1,para_2,para_3,)
verify_model(dropout3d().float().eval(), input_data=para_0)


# test_id: 457 
verify_model(torch.nn.Dropout3d(p=0.5,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 458 
para_0 = torch.randn([10, 10], dtype=torch.float32)
para_1 = 0.5
para_2 = False
class alpha_dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.alpha_dropout(args[0], para_1,para_2,)
verify_model(alpha_dropout().float().eval(), input_data=para_0)


# test_id: 459 
verify_model(torch.nn.AlphaDropout(p=0.5,).eval(), input_data=[torch.randn([10, 10], dtype=torch.float32)])
# test_id: 460 
para_0 = torch.randn([tensor(10), tensor(10)], dtype=torch.float32)
para_1 = 0.5
para_2 = False
class alpha_dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.alpha_dropout(args[0], para_1,para_2,)
verify_model(alpha_dropout().float().eval(), input_data=para_0)


# test_id: 461 
verify_model(torch.nn.AlphaDropout(p=0.5,).eval(), input_data=[torch.randn([tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 462 
para_0 = torch.randn([1, 3, 32, 32], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=(64, 64),scale_factor=None,mode='nearest',align_corners=None,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 463 
para_0 = torch.randn([tensor(1), tensor(3), tensor(32), tensor(32)], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=(64, 64),scale_factor=None,mode='nearest',align_corners=None,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 464 
para_0 = torch.randn([1, 3, 32, 32], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=None,scale_factor=2,mode='nearest',align_corners=None,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 465 
para_0 = torch.randn([tensor(1), tensor(3), tensor(32), tensor(32)], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=None,scale_factor=2,mode='nearest',align_corners=None,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 466 
para_0 = torch.randn([1, 3, 32, 32], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=(50, 50),scale_factor=None,mode='nearest',align_corners=None,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 467 
para_0 = torch.randn([tensor(1), tensor(3), tensor(32), tensor(32)], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=(50, 50),scale_factor=None,mode='nearest',align_corners=None,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 468 
para_0 = torch.randn([1, 3, 32, 32], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=(64, 64),scale_factor=None,mode='bilinear',align_corners=True,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 469 
para_0 = torch.randn([tensor(1), tensor(3), tensor(32), tensor(32)], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=(64, 64),scale_factor=None,mode='bilinear',align_corners=True,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 470 
para_0 = torch.randn([1, 3, 32, 32], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=None,scale_factor=2,mode='bilinear',align_corners=True,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 471 
para_0 = torch.randn([tensor(1), tensor(3), tensor(32), tensor(32)], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=None,scale_factor=2,mode='bilinear',align_corners=True,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 472 
para_0 = torch.randn([1, 3, 32, 32], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=(50, 50),scale_factor=None,mode='bilinear',align_corners=True,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 473 
para_0 = torch.randn([tensor(1), tensor(3), tensor(32), tensor(32)], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=(50, 50),scale_factor=None,mode='bilinear',align_corners=True,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 474 
para_0 = torch.randn([1, 3, 32, 32], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=(64, 64),scale_factor=None,mode='bicubic',align_corners=True,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 475 
para_0 = torch.randn([tensor(1), tensor(3), tensor(32), tensor(32)], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=(64, 64),scale_factor=None,mode='bicubic',align_corners=True,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 476 
para_0 = torch.randn([1, 3, 32, 32], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=None,scale_factor=2,mode='bicubic',align_corners=True,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 477 
para_0 = torch.randn([tensor(1), tensor(3), tensor(32), tensor(32)], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=None,scale_factor=2,mode='bicubic',align_corners=True,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 478 
para_0 = torch.randn([1, 3, 32, 32], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=(50, 50),scale_factor=None,mode='bicubic',align_corners=True,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 479 
para_0 = torch.randn([tensor(1), tensor(3), tensor(32), tensor(32)], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=(50, 50),scale_factor=None,mode='bicubic',align_corners=True,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 480 
para_0 = torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)
para_1 = (1, 1, 1)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 481 
verify_model(torch.nn.AdaptiveMaxPool3d((1, 1, 1),).eval(), input_data=[torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)])
# test_id: 482 
para_0 = torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = (1, 1, 1)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 483 
verify_model(torch.nn.AdaptiveMaxPool3d((1, 1, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 484 
para_0 = torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)
para_1 = (2, 2, 2)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 485 
verify_model(torch.nn.AdaptiveMaxPool3d((2, 2, 2),).eval(), input_data=[torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)])
# test_id: 486 
para_0 = torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = (2, 2, 2)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 487 
verify_model(torch.nn.AdaptiveMaxPool3d((2, 2, 2),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 488 
para_0 = torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)
para_1 = (1, 1, 1)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 489 
verify_model(torch.nn.AdaptiveAvgPool3d((1, 1, 1),).eval(), input_data=[torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)])
# test_id: 490 
para_0 = torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = (1, 1, 1)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 491 
verify_model(torch.nn.AdaptiveAvgPool3d((1, 1, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 492 
para_0 = torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)
para_1 = (2, 2, 2)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 493 
verify_model(torch.nn.AdaptiveAvgPool3d((2, 2, 2),).eval(), input_data=[torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)])
# test_id: 494 
para_0 = torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = (2, 2, 2)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 495 
verify_model(torch.nn.AdaptiveAvgPool3d((2, 2, 2),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 496 
para_0 = torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)
para_1 = (4, 8, 8)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 497 
verify_model(torch.nn.AdaptiveAvgPool3d((4, 8, 8),).eval(), input_data=[torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)])
# test_id: 498 
para_0 = torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = (4, 8, 8)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 499 
verify_model(torch.nn.AdaptiveAvgPool3d((4, 8, 8),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 500 
para_0 = torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)
para_1 = (7, 8, 9)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 501 
verify_model(torch.nn.AdaptiveMaxPool3d((7, 8, 9),).eval(), input_data=[torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)])
# test_id: 502 
para_0 = torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = (7, 8, 9)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 503 
verify_model(torch.nn.AdaptiveMaxPool3d((7, 8, 9),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 504 
para_0 = torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)
para_1 = (1, 1, 1)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 505 
verify_model(torch.nn.AdaptiveMaxPool3d((1, 1, 1),).eval(), input_data=[torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)])
# test_id: 506 
para_0 = torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)
para_1 = (1, 1, 1)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 507 
verify_model(torch.nn.AdaptiveMaxPool3d((1, 1, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)])
# test_id: 508 
para_0 = torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)
para_1 = (2, 2, 2)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 509 
verify_model(torch.nn.AdaptiveMaxPool3d((2, 2, 2),).eval(), input_data=[torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)])
# test_id: 510 
para_0 = torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)
para_1 = (2, 2, 2)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 511 
verify_model(torch.nn.AdaptiveMaxPool3d((2, 2, 2),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)])
# test_id: 512 
para_0 = torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)
para_1 = (1, 1, 1)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 513 
verify_model(torch.nn.AdaptiveAvgPool3d((1, 1, 1),).eval(), input_data=[torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)])
# test_id: 514 
para_0 = torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)
para_1 = (1, 1, 1)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 515 
verify_model(torch.nn.AdaptiveAvgPool3d((1, 1, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)])
# test_id: 516 
para_0 = torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)
para_1 = (2, 2, 2)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 517 
verify_model(torch.nn.AdaptiveAvgPool3d((2, 2, 2),).eval(), input_data=[torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)])
# test_id: 518 
para_0 = torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)
para_1 = (2, 2, 2)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 519 
verify_model(torch.nn.AdaptiveAvgPool3d((2, 2, 2),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)])
# test_id: 520 
para_0 = torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)
para_1 = (4, 8, 8)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 521 
verify_model(torch.nn.AdaptiveAvgPool3d((4, 8, 8),).eval(), input_data=[torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)])
# test_id: 522 
para_0 = torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)
para_1 = (4, 8, 8)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 523 
verify_model(torch.nn.AdaptiveAvgPool3d((4, 8, 8),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)])
# test_id: 524 
para_0 = torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)
para_1 = (7, 8, 9)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 525 
verify_model(torch.nn.AdaptiveMaxPool3d((7, 8, 9),).eval(), input_data=[torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)])
# test_id: 526 
para_0 = torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)
para_1 = (7, 8, 9)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 527 
verify_model(torch.nn.AdaptiveMaxPool3d((7, 8, 9),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)])
# test_id: 528 
para_0 = torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)
para_1 = (1, 1, 1)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 529 
verify_model(torch.nn.AdaptiveMaxPool3d((1, 1, 1),).eval(), input_data=[torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)])
# test_id: 530 
para_0 = torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = (1, 1, 1)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 531 
verify_model(torch.nn.AdaptiveMaxPool3d((1, 1, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 532 
para_0 = torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)
para_1 = (2, 2, 2)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 533 
verify_model(torch.nn.AdaptiveMaxPool3d((2, 2, 2),).eval(), input_data=[torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)])
# test_id: 534 
para_0 = torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = (2, 2, 2)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 535 
verify_model(torch.nn.AdaptiveMaxPool3d((2, 2, 2),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 536 
para_0 = torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)
para_1 = (1, 1, 1)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 537 
verify_model(torch.nn.AdaptiveAvgPool3d((1, 1, 1),).eval(), input_data=[torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)])
# test_id: 538 
para_0 = torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = (1, 1, 1)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 539 
verify_model(torch.nn.AdaptiveAvgPool3d((1, 1, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 540 
para_0 = torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)
para_1 = (2, 2, 2)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 541 
verify_model(torch.nn.AdaptiveAvgPool3d((2, 2, 2),).eval(), input_data=[torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)])
# test_id: 542 
para_0 = torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = (2, 2, 2)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 543 
verify_model(torch.nn.AdaptiveAvgPool3d((2, 2, 2),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 544 
para_0 = torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)
para_1 = (4, 8, 8)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 545 
verify_model(torch.nn.AdaptiveAvgPool3d((4, 8, 8),).eval(), input_data=[torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)])
# test_id: 546 
para_0 = torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = (4, 8, 8)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 547 
verify_model(torch.nn.AdaptiveAvgPool3d((4, 8, 8),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 548 
para_0 = torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)
para_1 = (7, 8, 9)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 549 
verify_model(torch.nn.AdaptiveMaxPool3d((7, 8, 9),).eval(), input_data=[torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)])
# test_id: 550 
para_0 = torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = (7, 8, 9)
para_2 = False
class adaptive_max_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_max_pool3d(args[0], para_1,para_2,)
verify_model(adaptive_max_pool3d().float().eval(), input_data=para_0)


# test_id: 551 
verify_model(torch.nn.AdaptiveMaxPool3d((7, 8, 9),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 552 
para_0 = torch.randn([3, 3, 4, 2], dtype=torch.float32)
para_1 = (1, 1)
para_2 = 'constant'
para_3 = 0
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 553 
para_0 = torch.randn([tensor(3), tensor(3), tensor(4), tensor(2)], dtype=torch.float32)
para_1 = (1, 1)
para_2 = 'constant'
para_3 = 0
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 554 
para_0 = torch.randn([3, 3, 4, 2], dtype=torch.float32)
para_1 = (1, 1, 2, 2)
para_2 = 'constant'
para_3 = 0
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 555 
para_0 = torch.randn([tensor(3), tensor(3), tensor(4), tensor(2)], dtype=torch.float32)
para_1 = (1, 1, 2, 2)
para_2 = 'constant'
para_3 = 0
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 556 
para_0 = torch.randn([3, 3, 4, 2], dtype=torch.float32)
para_1 = (0, 1, 2, 1, 3, 3)
para_2 = 'constant'
para_3 = 0
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 557 
para_0 = torch.randn([tensor(3), tensor(3), tensor(4), tensor(2)], dtype=torch.float32)
para_1 = (0, 1, 2, 1, 3, 3)
para_2 = 'constant'
para_3 = 0
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 558 
para_0 = torch.randn([3, 3, 4, 2], dtype=torch.float32)
para_1 = (1, 1)
para_2 = 'constant'
para_3 = 1
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 559 
para_0 = torch.randn([tensor(3), tensor(3), tensor(4), tensor(2)], dtype=torch.float32)
para_1 = (1, 1)
para_2 = 'constant'
para_3 = 1
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 560 
para_0 = torch.randn([3, 3, 4, 2], dtype=torch.float32)
para_1 = (1, 1, 2, 2)
para_2 = 'constant'
para_3 = 1
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 561 
para_0 = torch.randn([tensor(3), tensor(3), tensor(4), tensor(2)], dtype=torch.float32)
para_1 = (1, 1, 2, 2)
para_2 = 'constant'
para_3 = 1
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 562 
para_0 = torch.randn([3, 3, 4, 2], dtype=torch.float32)
para_1 = (0, 1, 2, 1, 3, 3)
para_2 = 'constant'
para_3 = 1
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 563 
para_0 = torch.randn([tensor(3), tensor(3), tensor(4), tensor(2)], dtype=torch.float32)
para_1 = (0, 1, 2, 1, 3, 3)
para_2 = 'constant'
para_3 = 1
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 564 
para_0 = torch.randn([3, 3, 4, 2], dtype=torch.float32)
para_1 = (1, 1)
para_2 = 'constant'
para_3 = 1.0
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 565 
para_0 = torch.randn([tensor(3), tensor(3), tensor(4), tensor(2)], dtype=torch.float32)
para_1 = (1, 1)
para_2 = 'constant'
para_3 = 1.0
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 566 
para_0 = torch.randn([3, 3, 4, 2], dtype=torch.float32)
para_1 = (1, 1, 2, 2)
para_2 = 'constant'
para_3 = 1.0
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 567 
para_0 = torch.randn([tensor(3), tensor(3), tensor(4), tensor(2)], dtype=torch.float32)
para_1 = (1, 1, 2, 2)
para_2 = 'constant'
para_3 = 1.0
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 568 
para_0 = torch.randn([3, 3, 4, 2], dtype=torch.float32)
para_1 = (0, 1, 2, 1, 3, 3)
para_2 = 'constant'
para_3 = 1.0
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 569 
para_0 = torch.randn([tensor(3), tensor(3), tensor(4), tensor(2)], dtype=torch.float32)
para_1 = (0, 1, 2, 1, 3, 3)
para_2 = 'constant'
para_3 = 1.0
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 570 
para_0 = torch.randn([1, 1, 3, 3], dtype=torch.float32)
para_1 = (2, 2, 2, 2)
para_2 = 'constant'
para_3 = 0.0
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 571 
verify_model(torch.nn.ZeroPad2d(2,).eval(), input_data=[torch.randn([1, 1, 3, 3], dtype=torch.float32)])
# test_id: 572 
para_0 = torch.randn([tensor(1), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_1 = (2, 2, 2, 2)
para_2 = 'constant'
para_3 = 0.0
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 573 
verify_model(torch.nn.ZeroPad2d(2,).eval(), input_data=[torch.randn([tensor(1), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)])
# test_id: 574 
para_0 = torch.randn([1, 1, 3, 3], dtype=torch.float32)
para_1 = (1, 1, 2, 0)
para_2 = 'constant'
para_3 = 0.0
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 575 
verify_model(torch.nn.ZeroPad2d((1, 1, 2, 0),).eval(), input_data=[torch.randn([1, 1, 3, 3], dtype=torch.float32)])
# test_id: 576 
para_0 = torch.randn([tensor(1), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_1 = (1, 1, 2, 0)
para_2 = 'constant'
para_3 = 0.0
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 577 
verify_model(torch.nn.ZeroPad2d((1, 1, 2, 0),).eval(), input_data=[torch.randn([tensor(1), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)])
# test_id: 578 
para_0 = torch.randn([1, 2, 4], dtype=torch.float32)
para_1 = (2, 2)
para_2 = 'constant'
para_3 = 3.5
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 579 
verify_model(torch.nn.ConstantPad1d(2,3.5,).eval(), input_data=[torch.randn([1, 2, 4], dtype=torch.float32)])
# test_id: 580 
para_0 = torch.randn([tensor(1), tensor(2), tensor(4)], dtype=torch.float32)
para_1 = (2, 2)
para_2 = 'constant'
para_3 = 3.5
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 581 
verify_model(torch.nn.ConstantPad1d(2,3.5,).eval(), input_data=[torch.randn([tensor(1), tensor(2), tensor(4)], dtype=torch.float32)])
# test_id: 582 
para_0 = torch.randn([1, 2, 3], dtype=torch.float32)
para_1 = (3, 1)
para_2 = 'constant'
para_3 = 3.5
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 583 
verify_model(torch.nn.ConstantPad1d((3, 1),3.5,).eval(), input_data=[torch.randn([1, 2, 3], dtype=torch.float32)])
# test_id: 584 
para_0 = torch.randn([tensor(1), tensor(2), tensor(3)], dtype=torch.float32)
para_1 = (3, 1)
para_2 = 'constant'
para_3 = 3.5
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 585 
verify_model(torch.nn.ConstantPad1d((3, 1),3.5,).eval(), input_data=[torch.randn([tensor(1), tensor(2), tensor(3)], dtype=torch.float32)])
# test_id: 586 
para_0 = torch.randn([1, 2, 2, 2], dtype=torch.float32)
para_1 = (2, 2, 2, 2)
para_2 = 'constant'
para_3 = 3.5
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 587 
verify_model(torch.nn.ConstantPad2d(2,3.5,).eval(), input_data=[torch.randn([1, 2, 2, 2], dtype=torch.float32)])
# test_id: 588 
para_0 = torch.randn([tensor(1), tensor(2), tensor(2), tensor(2)], dtype=torch.float32)
para_1 = (2, 2, 2, 2)
para_2 = 'constant'
para_3 = 3.5
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 589 
verify_model(torch.nn.ConstantPad2d(2,3.5,).eval(), input_data=[torch.randn([tensor(1), tensor(2), tensor(2), tensor(2)], dtype=torch.float32)])
# test_id: 590 
para_0 = torch.randn([1, 2, 2, 2], dtype=torch.float32)
para_1 = (3, 0, 2, 1)
para_2 = 'constant'
para_3 = 3.5
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 591 
verify_model(torch.nn.ConstantPad2d((3, 0, 2, 1),3.5,).eval(), input_data=[torch.randn([1, 2, 2, 2], dtype=torch.float32)])
# test_id: 592 
para_0 = torch.randn([tensor(1), tensor(2), tensor(2), tensor(2)], dtype=torch.float32)
para_1 = (3, 0, 2, 1)
para_2 = 'constant'
para_3 = 3.5
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 593 
verify_model(torch.nn.ConstantPad2d((3, 0, 2, 1),3.5,).eval(), input_data=[torch.randn([tensor(1), tensor(2), tensor(2), tensor(2)], dtype=torch.float32)])
# test_id: 594 
para_0 = torch.randn([1, 3, 2, 2, 2], dtype=torch.float32)
para_1 = (3, 3, 3, 3, 3, 3)
para_2 = 'constant'
para_3 = 3.5
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 595 
verify_model(torch.nn.ConstantPad3d(3,3.5,).eval(), input_data=[torch.randn([1, 3, 2, 2, 2], dtype=torch.float32)])
# test_id: 596 
para_0 = torch.randn([tensor(1), tensor(3), tensor(2), tensor(2), tensor(2)], dtype=torch.float32)
para_1 = (3, 3, 3, 3, 3, 3)
para_2 = 'constant'
para_3 = 3.5
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 597 
verify_model(torch.nn.ConstantPad3d(3,3.5,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(2), tensor(2), tensor(2)], dtype=torch.float32)])
# test_id: 598 
para_0 = torch.randn([1, 3, 2, 2, 2], dtype=torch.float32)
para_1 = (3, 4, 5, 6, 0, 1)
para_2 = 'constant'
para_3 = 3.5
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 599 
verify_model(torch.nn.ConstantPad3d((3, 4, 5, 6, 0, 1),3.5,).eval(), input_data=[torch.randn([1, 3, 2, 2, 2], dtype=torch.float32)])
# test_id: 600 
para_0 = torch.randn([tensor(1), tensor(3), tensor(2), tensor(2), tensor(2)], dtype=torch.float32)
para_1 = (3, 4, 5, 6, 0, 1)
para_2 = 'constant'
para_3 = 3.5
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,para_3,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 601 
verify_model(torch.nn.ConstantPad3d((3, 4, 5, 6, 0, 1),3.5,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(2), tensor(2), tensor(2)], dtype=torch.float32)])
# test_id: 602 
para_0 = torch.randn([1, 2, 4], dtype=torch.float32)
para_1 = (2, 2)
para_2 = 'reflect'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 603 
verify_model(torch.nn.ReflectionPad1d(2,).eval(), input_data=[torch.randn([1, 2, 4], dtype=torch.float32)])
# test_id: 604 
para_0 = torch.randn([tensor(1), tensor(2), tensor(4)], dtype=torch.float32)
para_1 = (2, 2)
para_2 = 'reflect'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 605 
verify_model(torch.nn.ReflectionPad1d(2,).eval(), input_data=[torch.randn([tensor(1), tensor(2), tensor(4)], dtype=torch.float32)])
# test_id: 606 
para_0 = torch.randn([1, 2, 4], dtype=torch.float32)
para_1 = (3, 1)
para_2 = 'reflect'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 607 
verify_model(torch.nn.ReflectionPad1d((3, 1),).eval(), input_data=[torch.randn([1, 2, 4], dtype=torch.float32)])
# test_id: 608 
para_0 = torch.randn([tensor(1), tensor(2), tensor(4)], dtype=torch.float32)
para_1 = (3, 1)
para_2 = 'reflect'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 609 
verify_model(torch.nn.ReflectionPad1d((3, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(2), tensor(4)], dtype=torch.float32)])
# test_id: 610 
para_0 = torch.randn([2, 4, 5], dtype=torch.float32)
para_1 = (2, 3)
para_2 = 'reflect'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 611 
verify_model(torch.nn.ReflectionPad1d((2, 3),).eval(), input_data=[torch.randn([2, 4, 5], dtype=torch.float32)])
# test_id: 612 
para_0 = torch.randn([tensor(2), tensor(4), tensor(5)], dtype=torch.float32)
para_1 = (2, 3)
para_2 = 'reflect'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 613 
verify_model(torch.nn.ReflectionPad1d((2, 3),).eval(), input_data=[torch.randn([tensor(2), tensor(4), tensor(5)], dtype=torch.float32)])
# test_id: 614 
para_0 = torch.randn([1, 1, 3, 3], dtype=torch.float32)
para_1 = (2, 2, 2, 2)
para_2 = 'reflect'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 615 
verify_model(torch.nn.ReflectionPad2d(2,).eval(), input_data=[torch.randn([1, 1, 3, 3], dtype=torch.float32)])
# test_id: 616 
para_0 = torch.randn([tensor(1), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_1 = (2, 2, 2, 2)
para_2 = 'reflect'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 617 
verify_model(torch.nn.ReflectionPad2d(2,).eval(), input_data=[torch.randn([tensor(1), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)])
# test_id: 618 
para_0 = torch.randn([1, 1, 3, 3], dtype=torch.float32)
para_1 = (1, 1, 2, 0)
para_2 = 'reflect'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 619 
verify_model(torch.nn.ReflectionPad2d((1, 1, 2, 0),).eval(), input_data=[torch.randn([1, 1, 3, 3], dtype=torch.float32)])
# test_id: 620 
para_0 = torch.randn([tensor(1), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_1 = (1, 1, 2, 0)
para_2 = 'reflect'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 621 
verify_model(torch.nn.ReflectionPad2d((1, 1, 2, 0),).eval(), input_data=[torch.randn([tensor(1), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)])
# test_id: 622 
para_0 = torch.randn([2, 4, 5, 6], dtype=torch.float32)
para_1 = (1, 3, 2, 4)
para_2 = 'reflect'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 623 
verify_model(torch.nn.ReflectionPad2d((1, 3, 2, 4),).eval(), input_data=[torch.randn([2, 4, 5, 6], dtype=torch.float32)])
# test_id: 624 
para_0 = torch.randn([tensor(2), tensor(4), tensor(5), tensor(6)], dtype=torch.float32)
para_1 = (1, 3, 2, 4)
para_2 = 'reflect'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 625 
verify_model(torch.nn.ReflectionPad2d((1, 3, 2, 4),).eval(), input_data=[torch.randn([tensor(2), tensor(4), tensor(5), tensor(6)], dtype=torch.float32)])
# test_id: 626 
para_0 = torch.randn([1, 2, 4], dtype=torch.float32)
para_1 = (2, 2)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 627 
verify_model(torch.nn.ReplicationPad1d(2,).eval(), input_data=[torch.randn([1, 2, 4], dtype=torch.float32)])
# test_id: 628 
para_0 = torch.randn([tensor(1), tensor(2), tensor(4)], dtype=torch.float32)
para_1 = (2, 2)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 629 
verify_model(torch.nn.ReplicationPad1d(2,).eval(), input_data=[torch.randn([tensor(1), tensor(2), tensor(4)], dtype=torch.float32)])
# test_id: 630 
para_0 = torch.randn([1, 2, 4], dtype=torch.float32)
para_1 = (3, 1)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 631 
verify_model(torch.nn.ReplicationPad1d((3, 1),).eval(), input_data=[torch.randn([1, 2, 4], dtype=torch.float32)])
# test_id: 632 
para_0 = torch.randn([tensor(1), tensor(2), tensor(4)], dtype=torch.float32)
para_1 = (3, 1)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 633 
verify_model(torch.nn.ReplicationPad1d((3, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(2), tensor(4)], dtype=torch.float32)])
# test_id: 634 
para_0 = torch.randn([2, 4, 5], dtype=torch.float32)
para_1 = (2, 3)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 635 
verify_model(torch.nn.ReplicationPad1d((2, 3),).eval(), input_data=[torch.randn([2, 4, 5], dtype=torch.float32)])
# test_id: 636 
para_0 = torch.randn([tensor(2), tensor(4), tensor(5)], dtype=torch.float32)
para_1 = (2, 3)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 637 
verify_model(torch.nn.ReplicationPad1d((2, 3),).eval(), input_data=[torch.randn([tensor(2), tensor(4), tensor(5)], dtype=torch.float32)])
# test_id: 638 
para_0 = torch.randn([1, 1, 3, 3], dtype=torch.float32)
para_1 = (2, 2, 2, 2)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 639 
verify_model(torch.nn.ReplicationPad2d(2,).eval(), input_data=[torch.randn([1, 1, 3, 3], dtype=torch.float32)])
# test_id: 640 
para_0 = torch.randn([tensor(1), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_1 = (2, 2, 2, 2)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 641 
verify_model(torch.nn.ReplicationPad2d(2,).eval(), input_data=[torch.randn([tensor(1), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)])
# test_id: 642 
para_0 = torch.randn([1, 1, 3, 3], dtype=torch.float32)
para_1 = (1, 1, 2, 0)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 643 
verify_model(torch.nn.ReplicationPad2d((1, 1, 2, 0),).eval(), input_data=[torch.randn([1, 1, 3, 3], dtype=torch.float32)])
# test_id: 644 
para_0 = torch.randn([tensor(1), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_1 = (1, 1, 2, 0)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 645 
verify_model(torch.nn.ReplicationPad2d((1, 1, 2, 0),).eval(), input_data=[torch.randn([tensor(1), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)])
# test_id: 646 
para_0 = torch.randn([2, 4, 5, 6], dtype=torch.float32)
para_1 = (1, 3, 2, 4)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 647 
verify_model(torch.nn.ReplicationPad2d((1, 3, 2, 4),).eval(), input_data=[torch.randn([2, 4, 5, 6], dtype=torch.float32)])
# test_id: 648 
para_0 = torch.randn([tensor(2), tensor(4), tensor(5), tensor(6)], dtype=torch.float32)
para_1 = (1, 3, 2, 4)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 649 
verify_model(torch.nn.ReplicationPad2d((1, 3, 2, 4),).eval(), input_data=[torch.randn([tensor(2), tensor(4), tensor(5), tensor(6)], dtype=torch.float32)])
# test_id: 650 
para_0 = torch.randn([1, 1, 3, 3, 3], dtype=torch.float32)
para_1 = (3, 3, 3, 3, 3, 3)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 651 
verify_model(torch.nn.ReplicationPad3d(3,).eval(), input_data=[torch.randn([1, 1, 3, 3, 3], dtype=torch.float32)])
# test_id: 652 
para_0 = torch.randn([tensor(1), tensor(1), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_1 = (3, 3, 3, 3, 3, 3)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 653 
verify_model(torch.nn.ReplicationPad3d(3,).eval(), input_data=[torch.randn([tensor(1), tensor(1), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)])
# test_id: 654 
para_0 = torch.randn([1, 1, 3, 3, 3], dtype=torch.float32)
para_1 = (1, 1, 2, 2, 1, 1)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 655 
verify_model(torch.nn.ReplicationPad3d((1, 1, 2, 2, 1, 1),).eval(), input_data=[torch.randn([1, 1, 3, 3, 3], dtype=torch.float32)])
# test_id: 656 
para_0 = torch.randn([tensor(1), tensor(1), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_1 = (1, 1, 2, 2, 1, 1)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 657 
verify_model(torch.nn.ReplicationPad3d((1, 1, 2, 2, 1, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(1), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)])
# test_id: 658 
para_0 = torch.randn([7, 5, 4, 5, 6], dtype=torch.float32)
para_1 = (2, 3, 2, 5, 1, 4)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 659 
verify_model(torch.nn.ReplicationPad3d((2, 3, 2, 5, 1, 4),).eval(), input_data=[torch.randn([7, 5, 4, 5, 6], dtype=torch.float32)])
# test_id: 660 
para_0 = torch.randn([tensor(7), tensor(5), tensor(4), tensor(5), tensor(6)], dtype=torch.float32)
para_1 = (2, 3, 2, 5, 1, 4)
para_2 = 'replicate'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 661 
verify_model(torch.nn.ReplicationPad3d((2, 3, 2, 5, 1, 4),).eval(), input_data=[torch.randn([tensor(7), tensor(5), tensor(4), tensor(5), tensor(6)], dtype=torch.float32)])
# test_id: 662 
para_0 = torch.randn([1, 1, 2, 2, 2], dtype=torch.float32)
para_1 = None
para_2 = 2.0
para_3 = 'nearest'
para_4 = None
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], para_1,para_2,para_3,para_4,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 663 
verify_model(torch.nn.Upsample(scale_factor=2,mode='nearest',).eval(), input_data=[torch.randn([1, 1, 2, 2, 2], dtype=torch.float32)])
# test_id: 664 
para_0 = torch.randn([tensor(1), tensor(1), tensor(2), tensor(2), tensor(2)], dtype=torch.float32)
para_1 = None
para_2 = 2.0
para_3 = 'nearest'
para_4 = None
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], para_1,para_2,para_3,para_4,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 665 
verify_model(torch.nn.Upsample(scale_factor=2,mode='nearest',).eval(), input_data=[torch.randn([tensor(1), tensor(1), tensor(2), tensor(2), tensor(2)], dtype=torch.float32)])
# test_id: 666 
para_0 = torch.randn([1, 1, 2, 2, 2], dtype=torch.float32)
para_1 = None
para_2 = 2.0
para_3 = 'trilinear'
para_4 = None
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], para_1,para_2,para_3,para_4,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 667 
verify_model(torch.nn.Upsample(scale_factor=2,mode='trilinear',).eval(), input_data=[torch.randn([1, 1, 2, 2, 2], dtype=torch.float32)])
# test_id: 668 
para_0 = torch.randn([tensor(1), tensor(1), tensor(2), tensor(2), tensor(2)], dtype=torch.float32)
para_1 = None
para_2 = 2.0
para_3 = 'trilinear'
para_4 = None
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], para_1,para_2,para_3,para_4,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 669 
verify_model(torch.nn.Upsample(scale_factor=2,mode='trilinear',).eval(), input_data=[torch.randn([tensor(1), tensor(1), tensor(2), tensor(2), tensor(2)], dtype=torch.float32)])
# test_id: 670 
para_0 = torch.randn([1, 1, 2, 2, 2], dtype=torch.float32)
para_1 = None
para_2 = 2.0
para_3 = 'trilinear'
para_4 = True
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], para_1,para_2,para_3,para_4,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 671 
verify_model(torch.nn.Upsample(scale_factor=2,mode='trilinear',align_corners=True,).eval(), input_data=[torch.randn([1, 1, 2, 2, 2], dtype=torch.float32)])
# test_id: 672 
para_0 = torch.randn([tensor(1), tensor(1), tensor(2), tensor(2), tensor(2)], dtype=torch.float32)
para_1 = None
para_2 = 2.0
para_3 = 'trilinear'
para_4 = True
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], para_1,para_2,para_3,para_4,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 673 
verify_model(torch.nn.Upsample(scale_factor=2,mode='trilinear',align_corners=True,).eval(), input_data=[torch.randn([tensor(1), tensor(1), tensor(2), tensor(2), tensor(2)], dtype=torch.float32)])
# test_id: 674 
para_0 = torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)
para_1 = torch.randn([16, 32, 3, 3, 3], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 675 
verify_model(torch.nn.Conv3d(32,16,(3, 3, 3),padding=(1, 1, 1),).eval(), input_data=[torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)])
# test_id: 676 
para_0 = torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(32), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 677 
verify_model(torch.nn.Conv3d(32,16,(3, 3, 3),padding=(1, 1, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 678 
para_0 = torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)
para_1 = torch.randn([16, 32, 5, 5, 5], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (2, 2, 2)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 679 
verify_model(torch.nn.Conv3d(32,16,(5, 5, 5),padding=(2, 2, 2),).eval(), input_data=[torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)])
# test_id: 680 
para_0 = torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(32), tensor(5), tensor(5), tensor(5)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (2, 2, 2)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 681 
verify_model(torch.nn.Conv3d(32,16,(5, 5, 5),padding=(2, 2, 2),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 682 
para_0 = torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)
para_1 = torch.randn([16, 32, 1, 1, 1], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 683 
verify_model(torch.nn.Conv3d(32,16,kernel_size=1,).eval(), input_data=[torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)])
# test_id: 684 
para_0 = torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(32), tensor(1), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 685 
verify_model(torch.nn.Conv3d(32,16,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 686 
para_0 = torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)
para_1 = torch.randn([16, 32, 1, 1, 1], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 687 
verify_model(torch.nn.Conv3d(32,16,kernel_size=1,stride=2,).eval(), input_data=[torch.randn([1, 32, 16, 16, 16], dtype=torch.float32)])
# test_id: 688 
para_0 = torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(32), tensor(1), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 689 
verify_model(torch.nn.Conv3d(32,16,kernel_size=1,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(16), tensor(16), tensor(16)], dtype=torch.float32)])
# test_id: 690 
para_0 = torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)
para_1 = torch.randn([16, 32, 3, 3, 3], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 691 
verify_model(torch.nn.Conv3d(32,16,(3, 3, 3),padding=(1, 1, 1),).eval(), input_data=[torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)])
# test_id: 692 
para_0 = torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(32), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 693 
verify_model(torch.nn.Conv3d(32,16,(3, 3, 3),padding=(1, 1, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)])
# test_id: 694 
para_0 = torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)
para_1 = torch.randn([16, 32, 5, 5, 5], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (2, 2, 2)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 695 
verify_model(torch.nn.Conv3d(32,16,(5, 5, 5),padding=(2, 2, 2),).eval(), input_data=[torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)])
# test_id: 696 
para_0 = torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(32), tensor(5), tensor(5), tensor(5)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (2, 2, 2)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 697 
verify_model(torch.nn.Conv3d(32,16,(5, 5, 5),padding=(2, 2, 2),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)])
# test_id: 698 
para_0 = torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)
para_1 = torch.randn([16, 32, 1, 1, 1], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 699 
verify_model(torch.nn.Conv3d(32,16,kernel_size=1,).eval(), input_data=[torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)])
# test_id: 700 
para_0 = torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(32), tensor(1), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 701 
verify_model(torch.nn.Conv3d(32,16,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)])
# test_id: 702 
para_0 = torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)
para_1 = torch.randn([16, 32, 1, 1, 1], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 703 
verify_model(torch.nn.Conv3d(32,16,kernel_size=1,stride=2,).eval(), input_data=[torch.randn([1, 32, 9, 15, 15], dtype=torch.float32)])
# test_id: 704 
para_0 = torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(32), tensor(1), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 705 
verify_model(torch.nn.Conv3d(32,16,kernel_size=1,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(9), tensor(15), tensor(15)], dtype=torch.float32)])
# test_id: 706 
para_0 = torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)
para_1 = torch.randn([16, 32, 3, 3, 3], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 707 
verify_model(torch.nn.Conv3d(32,16,(3, 3, 3),padding=(1, 1, 1),).eval(), input_data=[torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)])
# test_id: 708 
para_0 = torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(32), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 709 
verify_model(torch.nn.Conv3d(32,16,(3, 3, 3),padding=(1, 1, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 710 
para_0 = torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)
para_1 = torch.randn([16, 32, 5, 5, 5], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (2, 2, 2)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 711 
verify_model(torch.nn.Conv3d(32,16,(5, 5, 5),padding=(2, 2, 2),).eval(), input_data=[torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)])
# test_id: 712 
para_0 = torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(32), tensor(5), tensor(5), tensor(5)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (2, 2, 2)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 713 
verify_model(torch.nn.Conv3d(32,16,(5, 5, 5),padding=(2, 2, 2),).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 714 
para_0 = torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)
para_1 = torch.randn([16, 32, 1, 1, 1], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 715 
verify_model(torch.nn.Conv3d(32,16,kernel_size=1,).eval(), input_data=[torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)])
# test_id: 716 
para_0 = torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(32), tensor(1), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 717 
verify_model(torch.nn.Conv3d(32,16,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 718 
para_0 = torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)
para_1 = torch.randn([16, 32, 1, 1, 1], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 719 
verify_model(torch.nn.Conv3d(32,16,kernel_size=1,stride=2,).eval(), input_data=[torch.randn([1, 32, 13, 7, 7], dtype=torch.float32)])
# test_id: 720 
para_0 = torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(32), tensor(1), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 721 
verify_model(torch.nn.Conv3d(32,16,kernel_size=1,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 722 
para_0 = torch.randn([1, 8, 10, 5, 10], dtype=torch.float32)
para_1 = torch.randn([8, 33, 3, 3, 3], dtype=torch.float32)
para_2 = torch.randn([33], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 723 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=33,kernel_size=3,stride=2,).eval(), input_data=[torch.randn([1, 8, 10, 5, 10], dtype=torch.float32)])
# test_id: 724 
para_0 = torch.randn([tensor(1), tensor(8), tensor(10), tensor(5), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(8), tensor(33), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(33)], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 725 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=33,kernel_size=3,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(8), tensor(10), tensor(5), tensor(10)], dtype=torch.float32)])
# test_id: 726 
para_0 = torch.randn([1, 8, 10, 5, 10], dtype=torch.float32)
para_1 = torch.randn([8, 20, 3, 5, 2], dtype=torch.float32)
para_2 = torch.randn([20], dtype=torch.float32)
para_3 = (2, 1, 1)
para_4 = (0, 4, 2)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 727 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=20,kernel_size=(3, 5, 2),stride=(2, 1, 1),padding=(0, 4, 2),).eval(), input_data=[torch.randn([1, 8, 10, 5, 10], dtype=torch.float32)])
# test_id: 728 
para_0 = torch.randn([tensor(1), tensor(8), tensor(10), tensor(5), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(8), tensor(20), tensor(3), tensor(5), tensor(2)], dtype=torch.float32)
para_2 = torch.randn([tensor(20)], dtype=torch.float32)
para_3 = (2, 1, 1)
para_4 = (0, 4, 2)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 729 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=20,kernel_size=(3, 5, 2),stride=(2, 1, 1),padding=(0, 4, 2),).eval(), input_data=[torch.randn([tensor(1), tensor(8), tensor(10), tensor(5), tensor(10)], dtype=torch.float32)])
# test_id: 730 
para_0 = torch.randn([1, 8, 10, 5, 10], dtype=torch.float32)
para_1 = torch.randn([8, 20, 1, 1, 1], dtype=torch.float32)
para_2 = torch.randn([20], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 731 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=20,kernel_size=1,).eval(), input_data=[torch.randn([1, 8, 10, 5, 10], dtype=torch.float32)])
# test_id: 732 
para_0 = torch.randn([tensor(1), tensor(8), tensor(10), tensor(5), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(8), tensor(20), tensor(1), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(20)], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 733 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=20,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(8), tensor(10), tensor(5), tensor(10)], dtype=torch.float32)])
# test_id: 734 
para_0 = torch.randn([1, 8, 10, 5, 10], dtype=torch.float32)
para_1 = torch.randn([8, 5, 1, 1, 1], dtype=torch.float32)
para_2 = torch.randn([5], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 735 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=5,kernel_size=1,stride=2,).eval(), input_data=[torch.randn([1, 8, 10, 5, 10], dtype=torch.float32)])
# test_id: 736 
para_0 = torch.randn([tensor(1), tensor(8), tensor(10), tensor(5), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(8), tensor(5), tensor(1), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(5)], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 737 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=5,kernel_size=1,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(8), tensor(10), tensor(5), tensor(10)], dtype=torch.float32)])
# test_id: 738 
para_0 = torch.randn([1, 8, 5, 8, 8], dtype=torch.float32)
para_1 = torch.randn([8, 33, 3, 3, 3], dtype=torch.float32)
para_2 = torch.randn([33], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 739 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=33,kernel_size=3,stride=2,).eval(), input_data=[torch.randn([1, 8, 5, 8, 8], dtype=torch.float32)])
# test_id: 740 
para_0 = torch.randn([tensor(1), tensor(8), tensor(5), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(8), tensor(33), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(33)], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 741 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=33,kernel_size=3,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(8), tensor(5), tensor(8), tensor(8)], dtype=torch.float32)])
# test_id: 742 
para_0 = torch.randn([1, 8, 5, 8, 8], dtype=torch.float32)
para_1 = torch.randn([8, 20, 3, 5, 2], dtype=torch.float32)
para_2 = torch.randn([20], dtype=torch.float32)
para_3 = (2, 1, 1)
para_4 = (0, 4, 2)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 743 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=20,kernel_size=(3, 5, 2),stride=(2, 1, 1),padding=(0, 4, 2),).eval(), input_data=[torch.randn([1, 8, 5, 8, 8], dtype=torch.float32)])
# test_id: 744 
para_0 = torch.randn([tensor(1), tensor(8), tensor(5), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(8), tensor(20), tensor(3), tensor(5), tensor(2)], dtype=torch.float32)
para_2 = torch.randn([tensor(20)], dtype=torch.float32)
para_3 = (2, 1, 1)
para_4 = (0, 4, 2)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 745 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=20,kernel_size=(3, 5, 2),stride=(2, 1, 1),padding=(0, 4, 2),).eval(), input_data=[torch.randn([tensor(1), tensor(8), tensor(5), tensor(8), tensor(8)], dtype=torch.float32)])
# test_id: 746 
para_0 = torch.randn([1, 8, 5, 8, 8], dtype=torch.float32)
para_1 = torch.randn([8, 20, 1, 1, 1], dtype=torch.float32)
para_2 = torch.randn([20], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 747 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=20,kernel_size=1,).eval(), input_data=[torch.randn([1, 8, 5, 8, 8], dtype=torch.float32)])
# test_id: 748 
para_0 = torch.randn([tensor(1), tensor(8), tensor(5), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(8), tensor(20), tensor(1), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(20)], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 749 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=20,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(8), tensor(5), tensor(8), tensor(8)], dtype=torch.float32)])
# test_id: 750 
para_0 = torch.randn([1, 8, 5, 8, 8], dtype=torch.float32)
para_1 = torch.randn([8, 5, 1, 1, 1], dtype=torch.float32)
para_2 = torch.randn([5], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 751 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=5,kernel_size=1,stride=2,).eval(), input_data=[torch.randn([1, 8, 5, 8, 8], dtype=torch.float32)])
# test_id: 752 
para_0 = torch.randn([tensor(1), tensor(8), tensor(5), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(8), tensor(5), tensor(1), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(5)], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 753 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=5,kernel_size=1,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(8), tensor(5), tensor(8), tensor(8)], dtype=torch.float32)])
# test_id: 754 
para_0 = torch.randn([1, 8, 13, 7, 7], dtype=torch.float32)
para_1 = torch.randn([8, 33, 3, 3, 3], dtype=torch.float32)
para_2 = torch.randn([33], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 755 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=33,kernel_size=3,stride=2,).eval(), input_data=[torch.randn([1, 8, 13, 7, 7], dtype=torch.float32)])
# test_id: 756 
para_0 = torch.randn([tensor(1), tensor(8), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(8), tensor(33), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(33)], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 757 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=33,kernel_size=3,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(8), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 758 
para_0 = torch.randn([1, 8, 13, 7, 7], dtype=torch.float32)
para_1 = torch.randn([8, 20, 3, 5, 2], dtype=torch.float32)
para_2 = torch.randn([20], dtype=torch.float32)
para_3 = (2, 1, 1)
para_4 = (0, 4, 2)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 759 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=20,kernel_size=(3, 5, 2),stride=(2, 1, 1),padding=(0, 4, 2),).eval(), input_data=[torch.randn([1, 8, 13, 7, 7], dtype=torch.float32)])
# test_id: 760 
para_0 = torch.randn([tensor(1), tensor(8), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(8), tensor(20), tensor(3), tensor(5), tensor(2)], dtype=torch.float32)
para_2 = torch.randn([tensor(20)], dtype=torch.float32)
para_3 = (2, 1, 1)
para_4 = (0, 4, 2)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 761 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=20,kernel_size=(3, 5, 2),stride=(2, 1, 1),padding=(0, 4, 2),).eval(), input_data=[torch.randn([tensor(1), tensor(8), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 762 
para_0 = torch.randn([1, 8, 13, 7, 7], dtype=torch.float32)
para_1 = torch.randn([8, 20, 1, 1, 1], dtype=torch.float32)
para_2 = torch.randn([20], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 763 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=20,kernel_size=1,).eval(), input_data=[torch.randn([1, 8, 13, 7, 7], dtype=torch.float32)])
# test_id: 764 
para_0 = torch.randn([tensor(1), tensor(8), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(8), tensor(20), tensor(1), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(20)], dtype=torch.float32)
para_3 = (1, 1, 1)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 765 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=20,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(8), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 766 
para_0 = torch.randn([1, 8, 13, 7, 7], dtype=torch.float32)
para_1 = torch.randn([8, 5, 1, 1, 1], dtype=torch.float32)
para_2 = torch.randn([5], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 767 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=5,kernel_size=1,stride=2,).eval(), input_data=[torch.randn([1, 8, 13, 7, 7], dtype=torch.float32)])
# test_id: 768 
para_0 = torch.randn([tensor(1), tensor(8), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(8), tensor(5), tensor(1), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(5)], dtype=torch.float32)
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (0, 0, 0)
para_6 = 1
para_7 = (1, 1, 1)
class conv_transpose3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv_transpose3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(conv_transpose3d().float().eval(), input_data=para_0)


# test_id: 769 
verify_model(torch.nn.ConvTranspose3d(in_channels=8,out_channels=5,kernel_size=1,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(8), tensor(13), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 770 
para_0 = torch.randn([1, 3, 224, 224], dtype=torch.float32)
para_1 = torch.randn([64, 3, 7, 7], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (3, 3)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 771 
verify_model(torch.nn.Conv2d(512,512,kernel_size=3,stride=1,padding=1,groups=1,bias=False,dilation=1,).eval(), input_data=[torch.randn([1, 3, 224, 224], dtype=torch.float32)])
# test_id: 772 
para_0 = torch.randn([1, 64, 112, 112], dtype=torch.float32)
para_1 = torch.randn([64], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = torch.randn([64], dtype=torch.float32)
para_4 = torch.randn([64], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 773 
verify_model(torch.nn.BatchNorm2d(512,).eval(), input_data=[torch.randn([1, 64, 112, 112], dtype=torch.float32)])
# test_id: 774 
para_0 = torch.randn([1, 64, 112, 112], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 775 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 64, 112, 112], dtype=torch.float32)])
# test_id: 776 
para_0 = torch.randn([1, 64, 112, 112], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 1
para_4 = 1
para_5 = False
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 777 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,padding=1,).eval(), input_data=[torch.randn([1, 64, 112, 112], dtype=torch.float32)])
# test_id: 778 
para_0 = torch.randn([1, 64, 56, 56], dtype=torch.float32)
para_1 = torch.randn([64, 64, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 779 
verify_model(torch.nn.Conv2d(512,512,kernel_size=3,stride=1,padding=1,groups=1,bias=False,dilation=1,).eval(), input_data=[torch.randn([1, 64, 56, 56], dtype=torch.float32)])
# test_id: 780 
para_0 = torch.randn([1, 64, 56, 56], dtype=torch.float32)
para_1 = torch.randn([64], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = torch.randn([64], dtype=torch.float32)
para_4 = torch.randn([64], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 781 
verify_model(torch.nn.BatchNorm2d(512,).eval(), input_data=[torch.randn([1, 64, 56, 56], dtype=torch.float32)])
# test_id: 782 
para_0 = torch.randn([1, 64, 56, 56], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 783 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 64, 56, 56], dtype=torch.float32)])
# test_id: 784 
para_0 = torch.randn([1, 64, 56, 56], dtype=torch.float32)
para_1 = torch.randn([128, 64, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 785 
para_0 = torch.randn([1, 128, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128], dtype=torch.float32)
para_2 = torch.randn([128], dtype=torch.float32)
para_3 = torch.randn([128], dtype=torch.float32)
para_4 = torch.randn([128], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 786 
verify_model(torch.nn.BatchNorm2d(512,).eval(), input_data=[torch.randn([1, 128, 28, 28], dtype=torch.float32)])
# test_id: 787 
para_0 = torch.randn([1, 128, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 788 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 128, 28, 28], dtype=torch.float32)])
# test_id: 789 
para_0 = torch.randn([1, 128, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128, 128, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 790 
verify_model(torch.nn.Conv2d(512,512,kernel_size=3,stride=1,padding=1,groups=1,bias=False,dilation=1,).eval(), input_data=[torch.randn([1, 128, 28, 28], dtype=torch.float32)])
# test_id: 791 
para_0 = torch.randn([1, 64, 56, 56], dtype=torch.float32)
para_1 = torch.randn([128, 64, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 792 
para_0 = torch.randn([1, 128, 28, 28], dtype=torch.float32)
para_1 = torch.randn([256, 128, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 793 
para_0 = torch.randn([1, 256, 14, 14], dtype=torch.float32)
para_1 = torch.randn([256], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
para_3 = torch.randn([256], dtype=torch.float32)
para_4 = torch.randn([256], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 794 
verify_model(torch.nn.BatchNorm2d(512,).eval(), input_data=[torch.randn([1, 256, 14, 14], dtype=torch.float32)])
# test_id: 795 
para_0 = torch.randn([1, 256, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 796 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 256, 14, 14], dtype=torch.float32)])
# test_id: 797 
para_0 = torch.randn([1, 256, 14, 14], dtype=torch.float32)
para_1 = torch.randn([256, 256, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 798 
verify_model(torch.nn.Conv2d(512,512,kernel_size=3,stride=1,padding=1,groups=1,bias=False,dilation=1,).eval(), input_data=[torch.randn([1, 256, 14, 14], dtype=torch.float32)])
# test_id: 799 
para_0 = torch.randn([1, 128, 28, 28], dtype=torch.float32)
para_1 = torch.randn([256, 128, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 800 
para_0 = torch.randn([1, 256, 14, 14], dtype=torch.float32)
para_1 = torch.randn([512, 256, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 801 
para_0 = torch.randn([1, 512, 7, 7], dtype=torch.float32)
para_1 = torch.randn([512], dtype=torch.float32)
para_2 = torch.randn([512], dtype=torch.float32)
para_3 = torch.randn([512], dtype=torch.float32)
para_4 = torch.randn([512], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 802 
verify_model(torch.nn.BatchNorm2d(512,).eval(), input_data=[torch.randn([1, 512, 7, 7], dtype=torch.float32)])
# test_id: 803 
para_0 = torch.randn([1, 512, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 804 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 512, 7, 7], dtype=torch.float32)])
# test_id: 805 
para_0 = torch.randn([1, 512, 7, 7], dtype=torch.float32)
para_1 = torch.randn([512, 512, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 806 
verify_model(torch.nn.Conv2d(512,512,kernel_size=3,stride=1,padding=1,groups=1,bias=False,dilation=1,).eval(), input_data=[torch.randn([1, 512, 7, 7], dtype=torch.float32)])
# test_id: 807 
para_0 = torch.randn([1, 256, 14, 14], dtype=torch.float32)
para_1 = torch.randn([512, 256, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 808 
para_0 = torch.randn([1, 512, 7, 7], dtype=torch.float32)
para_1 = (1, 1)
class adaptive_avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool2d(args[0], para_1,)
verify_model(adaptive_avg_pool2d().float().eval(), input_data=para_0)


# test_id: 809 
verify_model(torch.nn.AdaptiveAvgPool2d((1, 1),).eval(), input_data=[torch.randn([1, 512, 7, 7], dtype=torch.float32)])
# test_id: 810 
para_0 = torch.randn([1, 512], dtype=torch.float32)
para_1 = torch.randn([1000, 512], dtype=torch.float32)
para_2 = torch.randn([1000], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 811 
verify_model(torch.nn.Linear(512,1000,).eval(), input_data=[torch.randn([1, 512], dtype=torch.float32)])
# test_id: 812 
para_0 = torch.randn([tensor(1), tensor(3), tensor(224), tensor(224)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(3), tensor(7), tensor(7)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (3, 3)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 813 
verify_model(torch.nn.Conv2d(512,512,kernel_size=3,stride=1,padding=1,groups=1,bias=False,dilation=1,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(224), tensor(224)], dtype=torch.float32)])
# test_id: 814 
para_0 = torch.randn([tensor(1), tensor(64), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = torch.randn([tensor(64)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = torch.randn([tensor(64)], dtype=torch.float32)
para_4 = torch.randn([tensor(64)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 815 
verify_model(torch.nn.BatchNorm2d(512,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 816 
para_0 = torch.randn([tensor(1), tensor(64), tensor(112), tensor(112)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 817 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 818 
para_0 = torch.randn([tensor(1), tensor(64), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 1
para_4 = 1
para_5 = False
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 819 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,padding=1,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 820 
para_0 = torch.randn([tensor(1), tensor(64), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(64), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 821 
verify_model(torch.nn.Conv2d(512,512,kernel_size=3,stride=1,padding=1,groups=1,bias=False,dilation=1,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 822 
para_0 = torch.randn([tensor(1), tensor(64), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(64)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = torch.randn([tensor(64)], dtype=torch.float32)
para_4 = torch.randn([tensor(64)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 823 
verify_model(torch.nn.BatchNorm2d(512,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 824 
para_0 = torch.randn([tensor(1), tensor(64), tensor(56), tensor(56)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 825 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 826 
para_0 = torch.randn([tensor(1), tensor(64), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(64), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 827 
para_0 = torch.randn([tensor(1), tensor(128), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128)], dtype=torch.float32)
para_2 = torch.randn([tensor(128)], dtype=torch.float32)
para_3 = torch.randn([tensor(128)], dtype=torch.float32)
para_4 = torch.randn([tensor(128)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 828 
verify_model(torch.nn.BatchNorm2d(512,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 829 
para_0 = torch.randn([tensor(1), tensor(128), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 830 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 831 
para_0 = torch.randn([tensor(1), tensor(128), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(128), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 832 
verify_model(torch.nn.Conv2d(512,512,kernel_size=3,stride=1,padding=1,groups=1,bias=False,dilation=1,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 833 
para_0 = torch.randn([tensor(1), tensor(64), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(64), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 834 
para_0 = torch.randn([tensor(1), tensor(128), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(128), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 835 
para_0 = torch.randn([tensor(1), tensor(256), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(256)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
para_3 = torch.randn([tensor(256)], dtype=torch.float32)
para_4 = torch.randn([tensor(256)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 836 
verify_model(torch.nn.BatchNorm2d(512,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 837 
para_0 = torch.randn([tensor(1), tensor(256), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 838 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 839 
para_0 = torch.randn([tensor(1), tensor(256), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(256), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 840 
verify_model(torch.nn.Conv2d(512,512,kernel_size=3,stride=1,padding=1,groups=1,bias=False,dilation=1,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 841 
para_0 = torch.randn([tensor(1), tensor(128), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(128), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 842 
para_0 = torch.randn([tensor(1), tensor(256), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(512), tensor(256), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 843 
para_0 = torch.randn([tensor(1), tensor(512), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(512)], dtype=torch.float32)
para_2 = torch.randn([tensor(512)], dtype=torch.float32)
para_3 = torch.randn([tensor(512)], dtype=torch.float32)
para_4 = torch.randn([tensor(512)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 844 
verify_model(torch.nn.BatchNorm2d(512,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 845 
para_0 = torch.randn([tensor(1), tensor(512), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 846 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 847 
para_0 = torch.randn([tensor(1), tensor(512), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(512), tensor(512), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 848 
verify_model(torch.nn.Conv2d(512,512,kernel_size=3,stride=1,padding=1,groups=1,bias=False,dilation=1,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 849 
para_0 = torch.randn([tensor(1), tensor(256), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(512), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 850 
para_0 = torch.randn([tensor(1), tensor(512), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = (1, 1)
class adaptive_avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool2d(args[0], para_1,)
verify_model(adaptive_avg_pool2d().float().eval(), input_data=para_0)


# test_id: 851 
verify_model(torch.nn.AdaptiveAvgPool2d((1, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 852 
para_0 = torch.randn([tensor(1), tensor(512)], dtype=torch.float32)
para_1 = torch.randn([tensor(1000), tensor(512)], dtype=torch.float32)
para_2 = torch.randn([tensor(1000)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 853 
verify_model(torch.nn.Linear(512,1000,).eval(), input_data=[torch.randn([tensor(1), tensor(512)], dtype=torch.float32)])
# test_id: 854 
para_0 = torch.randn([1, 3, 224, 224], dtype=torch.float32)
para_1 = torch.randn([96, 3, 7, 7], dtype=torch.float32)
para_2 = torch.randn([96], dtype=torch.float32)
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 855 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 3, 224, 224], dtype=torch.float32)])
# test_id: 856 
para_0 = torch.randn([1, 96, 109, 109], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 857 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 96, 109, 109], dtype=torch.float32)])
# test_id: 858 
para_0 = torch.randn([1, 96, 109, 109], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 859 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,ceil_mode=True,).eval(), input_data=[torch.randn([1, 96, 109, 109], dtype=torch.float32)])
# test_id: 860 
para_0 = torch.randn([1, 96, 54, 54], dtype=torch.float32)
para_1 = torch.randn([16, 96, 1, 1], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 861 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 96, 54, 54], dtype=torch.float32)])
# test_id: 862 
para_0 = torch.randn([1, 16, 54, 54], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 863 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 16, 54, 54], dtype=torch.float32)])
# test_id: 864 
para_0 = torch.randn([1, 16, 54, 54], dtype=torch.float32)
para_1 = torch.randn([64, 16, 1, 1], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 865 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 16, 54, 54], dtype=torch.float32)])
# test_id: 866 
para_0 = torch.randn([1, 64, 54, 54], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 867 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 64, 54, 54], dtype=torch.float32)])
# test_id: 868 
para_0 = torch.randn([1, 16, 54, 54], dtype=torch.float32)
para_1 = torch.randn([64, 16, 3, 3], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 869 
para_0 = torch.randn([1, 128, 54, 54], dtype=torch.float32)
para_1 = torch.randn([16, 128, 1, 1], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 870 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 128, 54, 54], dtype=torch.float32)])
# test_id: 871 
para_0 = torch.randn([1, 128, 54, 54], dtype=torch.float32)
para_1 = torch.randn([32, 128, 1, 1], dtype=torch.float32)
para_2 = torch.randn([32], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 872 
para_0 = torch.randn([1, 32, 54, 54], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 873 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 32, 54, 54], dtype=torch.float32)])
# test_id: 874 
para_0 = torch.randn([1, 32, 54, 54], dtype=torch.float32)
para_1 = torch.randn([128, 32, 1, 1], dtype=torch.float32)
para_2 = torch.randn([128], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 875 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 32, 54, 54], dtype=torch.float32)])
# test_id: 876 
para_0 = torch.randn([1, 128, 54, 54], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 877 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 128, 54, 54], dtype=torch.float32)])
# test_id: 878 
para_0 = torch.randn([1, 32, 54, 54], dtype=torch.float32)
para_1 = torch.randn([128, 32, 3, 3], dtype=torch.float32)
para_2 = torch.randn([128], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 879 
para_0 = torch.randn([1, 256, 54, 54], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 880 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,ceil_mode=True,).eval(), input_data=[torch.randn([1, 256, 54, 54], dtype=torch.float32)])
# test_id: 881 
para_0 = torch.randn([1, 256, 27, 27], dtype=torch.float32)
para_1 = torch.randn([32, 256, 1, 1], dtype=torch.float32)
para_2 = torch.randn([32], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 882 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 256, 27, 27], dtype=torch.float32)])
# test_id: 883 
para_0 = torch.randn([1, 32, 27, 27], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 884 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 32, 27, 27], dtype=torch.float32)])
# test_id: 885 
para_0 = torch.randn([1, 32, 27, 27], dtype=torch.float32)
para_1 = torch.randn([128, 32, 1, 1], dtype=torch.float32)
para_2 = torch.randn([128], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 886 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 32, 27, 27], dtype=torch.float32)])
# test_id: 887 
para_0 = torch.randn([1, 128, 27, 27], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 888 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 128, 27, 27], dtype=torch.float32)])
# test_id: 889 
para_0 = torch.randn([1, 32, 27, 27], dtype=torch.float32)
para_1 = torch.randn([128, 32, 3, 3], dtype=torch.float32)
para_2 = torch.randn([128], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 890 
para_0 = torch.randn([1, 256, 27, 27], dtype=torch.float32)
para_1 = torch.randn([48, 256, 1, 1], dtype=torch.float32)
para_2 = torch.randn([48], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 891 
para_0 = torch.randn([1, 48, 27, 27], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 892 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 48, 27, 27], dtype=torch.float32)])
# test_id: 893 
para_0 = torch.randn([1, 48, 27, 27], dtype=torch.float32)
para_1 = torch.randn([192, 48, 1, 1], dtype=torch.float32)
para_2 = torch.randn([192], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 894 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 48, 27, 27], dtype=torch.float32)])
# test_id: 895 
para_0 = torch.randn([1, 192, 27, 27], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 896 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 192, 27, 27], dtype=torch.float32)])
# test_id: 897 
para_0 = torch.randn([1, 48, 27, 27], dtype=torch.float32)
para_1 = torch.randn([192, 48, 3, 3], dtype=torch.float32)
para_2 = torch.randn([192], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 898 
para_0 = torch.randn([1, 384, 27, 27], dtype=torch.float32)
para_1 = torch.randn([48, 384, 1, 1], dtype=torch.float32)
para_2 = torch.randn([48], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 899 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 384, 27, 27], dtype=torch.float32)])
# test_id: 900 
para_0 = torch.randn([1, 384, 27, 27], dtype=torch.float32)
para_1 = torch.randn([64, 384, 1, 1], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 901 
para_0 = torch.randn([1, 64, 27, 27], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 902 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 64, 27, 27], dtype=torch.float32)])
# test_id: 903 
para_0 = torch.randn([1, 64, 27, 27], dtype=torch.float32)
para_1 = torch.randn([256, 64, 1, 1], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 904 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 64, 27, 27], dtype=torch.float32)])
# test_id: 905 
para_0 = torch.randn([1, 256, 27, 27], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 906 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 256, 27, 27], dtype=torch.float32)])
# test_id: 907 
para_0 = torch.randn([1, 64, 27, 27], dtype=torch.float32)
para_1 = torch.randn([256, 64, 3, 3], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 908 
para_0 = torch.randn([1, 512, 27, 27], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 909 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,ceil_mode=True,).eval(), input_data=[torch.randn([1, 512, 27, 27], dtype=torch.float32)])
# test_id: 910 
para_0 = torch.randn([1, 512, 13, 13], dtype=torch.float32)
para_1 = torch.randn([64, 512, 1, 1], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 911 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 512, 13, 13], dtype=torch.float32)])
# test_id: 912 
para_0 = torch.randn([1, 64, 13, 13], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 913 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 64, 13, 13], dtype=torch.float32)])
# test_id: 914 
para_0 = torch.randn([1, 64, 13, 13], dtype=torch.float32)
para_1 = torch.randn([256, 64, 1, 1], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 915 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 64, 13, 13], dtype=torch.float32)])
# test_id: 916 
para_0 = torch.randn([1, 256, 13, 13], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 917 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 256, 13, 13], dtype=torch.float32)])
# test_id: 918 
para_0 = torch.randn([1, 64, 13, 13], dtype=torch.float32)
para_1 = torch.randn([256, 64, 3, 3], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 919 
para_0 = torch.randn([1, 512, 13, 13], dtype=torch.float32)
para_1 = 0.5
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 920 
verify_model(torch.nn.Dropout(p=0.5,).eval(), input_data=[torch.randn([1, 512, 13, 13], dtype=torch.float32)])
# test_id: 921 
para_0 = torch.randn([1, 512, 13, 13], dtype=torch.float32)
para_1 = torch.randn([1000, 512, 1, 1], dtype=torch.float32)
para_2 = torch.randn([1000], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 922 
para_0 = torch.randn([1, 1000, 13, 13], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 923 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 1000, 13, 13], dtype=torch.float32)])
# test_id: 924 
para_0 = torch.randn([1, 1000, 13, 13], dtype=torch.float32)
para_1 = (1, 1)
class adaptive_avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool2d(args[0], para_1,)
verify_model(adaptive_avg_pool2d().float().eval(), input_data=para_0)


# test_id: 925 
verify_model(torch.nn.AdaptiveAvgPool2d((1, 1),).eval(), input_data=[torch.randn([1, 1000, 13, 13], dtype=torch.float32)])
# test_id: 926 
para_0 = torch.randn([tensor(1), tensor(3), tensor(224), tensor(224)], dtype=torch.float32)
para_1 = torch.randn([tensor(96), tensor(3), tensor(7), tensor(7)], dtype=torch.float32)
para_2 = torch.randn([tensor(96)], dtype=torch.float32)
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 927 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(224), tensor(224)], dtype=torch.float32)])
# test_id: 928 
para_0 = torch.randn([tensor(1), tensor(96), tensor(109), tensor(109)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 929 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(109), tensor(109)], dtype=torch.float32)])
# test_id: 930 
para_0 = torch.randn([tensor(1), tensor(96), tensor(109), tensor(109)], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 931 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,ceil_mode=True,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(109), tensor(109)], dtype=torch.float32)])
# test_id: 932 
para_0 = torch.randn([tensor(1), tensor(96), tensor(54), tensor(54)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(96), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 933 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(54), tensor(54)], dtype=torch.float32)])
# test_id: 934 
para_0 = torch.randn([tensor(1), tensor(16), tensor(54), tensor(54)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 935 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(54), tensor(54)], dtype=torch.float32)])
# test_id: 936 
para_0 = torch.randn([tensor(1), tensor(16), tensor(54), tensor(54)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(16), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 937 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(54), tensor(54)], dtype=torch.float32)])
# test_id: 938 
para_0 = torch.randn([tensor(1), tensor(64), tensor(54), tensor(54)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 939 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(54), tensor(54)], dtype=torch.float32)])
# test_id: 940 
para_0 = torch.randn([tensor(1), tensor(16), tensor(54), tensor(54)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(16), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 941 
para_0 = torch.randn([tensor(1), tensor(128), tensor(54), tensor(54)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(128), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 942 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(54), tensor(54)], dtype=torch.float32)])
# test_id: 943 
para_0 = torch.randn([tensor(1), tensor(128), tensor(54), tensor(54)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(128), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(32)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 944 
para_0 = torch.randn([tensor(1), tensor(32), tensor(54), tensor(54)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 945 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(54), tensor(54)], dtype=torch.float32)])
# test_id: 946 
para_0 = torch.randn([tensor(1), tensor(32), tensor(54), tensor(54)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(32), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(128)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 947 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(54), tensor(54)], dtype=torch.float32)])
# test_id: 948 
para_0 = torch.randn([tensor(1), tensor(128), tensor(54), tensor(54)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 949 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(54), tensor(54)], dtype=torch.float32)])
# test_id: 950 
para_0 = torch.randn([tensor(1), tensor(32), tensor(54), tensor(54)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(32), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(128)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 951 
para_0 = torch.randn([tensor(1), tensor(256), tensor(54), tensor(54)], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 952 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,ceil_mode=True,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(54), tensor(54)], dtype=torch.float32)])
# test_id: 953 
para_0 = torch.randn([tensor(1), tensor(256), tensor(27), tensor(27)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(32)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 954 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(27), tensor(27)], dtype=torch.float32)])
# test_id: 955 
para_0 = torch.randn([tensor(1), tensor(32), tensor(27), tensor(27)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 956 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(27), tensor(27)], dtype=torch.float32)])
# test_id: 957 
para_0 = torch.randn([tensor(1), tensor(32), tensor(27), tensor(27)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(32), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(128)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 958 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(27), tensor(27)], dtype=torch.float32)])
# test_id: 959 
para_0 = torch.randn([tensor(1), tensor(128), tensor(27), tensor(27)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 960 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(27), tensor(27)], dtype=torch.float32)])
# test_id: 961 
para_0 = torch.randn([tensor(1), tensor(32), tensor(27), tensor(27)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(32), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(128)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 962 
para_0 = torch.randn([tensor(1), tensor(256), tensor(27), tensor(27)], dtype=torch.float32)
para_1 = torch.randn([tensor(48), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(48)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 963 
para_0 = torch.randn([tensor(1), tensor(48), tensor(27), tensor(27)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 964 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(27), tensor(27)], dtype=torch.float32)])
# test_id: 965 
para_0 = torch.randn([tensor(1), tensor(48), tensor(27), tensor(27)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(48), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(192)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 966 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(27), tensor(27)], dtype=torch.float32)])
# test_id: 967 
para_0 = torch.randn([tensor(1), tensor(192), tensor(27), tensor(27)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 968 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(27), tensor(27)], dtype=torch.float32)])
# test_id: 969 
para_0 = torch.randn([tensor(1), tensor(48), tensor(27), tensor(27)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(48), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(192)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 970 
para_0 = torch.randn([tensor(1), tensor(384), tensor(27), tensor(27)], dtype=torch.float32)
para_1 = torch.randn([tensor(48), tensor(384), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(48)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 971 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(384), tensor(27), tensor(27)], dtype=torch.float32)])
# test_id: 972 
para_0 = torch.randn([tensor(1), tensor(384), tensor(27), tensor(27)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(384), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 973 
para_0 = torch.randn([tensor(1), tensor(64), tensor(27), tensor(27)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 974 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(27), tensor(27)], dtype=torch.float32)])
# test_id: 975 
para_0 = torch.randn([tensor(1), tensor(64), tensor(27), tensor(27)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(64), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 976 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(27), tensor(27)], dtype=torch.float32)])
# test_id: 977 
para_0 = torch.randn([tensor(1), tensor(256), tensor(27), tensor(27)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 978 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(27), tensor(27)], dtype=torch.float32)])
# test_id: 979 
para_0 = torch.randn([tensor(1), tensor(64), tensor(27), tensor(27)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(64), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 980 
para_0 = torch.randn([tensor(1), tensor(512), tensor(27), tensor(27)], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 981 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,ceil_mode=True,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(27), tensor(27)], dtype=torch.float32)])
# test_id: 982 
para_0 = torch.randn([tensor(1), tensor(512), tensor(13), tensor(13)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(512), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 983 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(13), tensor(13)], dtype=torch.float32)])
# test_id: 984 
para_0 = torch.randn([tensor(1), tensor(64), tensor(13), tensor(13)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 985 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(13), tensor(13)], dtype=torch.float32)])
# test_id: 986 
para_0 = torch.randn([tensor(1), tensor(64), tensor(13), tensor(13)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(64), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 987 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(13), tensor(13)], dtype=torch.float32)])
# test_id: 988 
para_0 = torch.randn([tensor(1), tensor(256), tensor(13), tensor(13)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 989 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(13), tensor(13)], dtype=torch.float32)])
# test_id: 990 
para_0 = torch.randn([tensor(1), tensor(64), tensor(13), tensor(13)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(64), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 991 
para_0 = torch.randn([tensor(1), tensor(512), tensor(13), tensor(13)], dtype=torch.float32)
para_1 = 0.5
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 992 
verify_model(torch.nn.Dropout(p=0.5,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(13), tensor(13)], dtype=torch.float32)])
# test_id: 993 
para_0 = torch.randn([tensor(1), tensor(512), tensor(13), tensor(13)], dtype=torch.float32)
para_1 = torch.randn([tensor(1000), tensor(512), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(1000)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 994 
para_0 = torch.randn([tensor(1), tensor(1000), tensor(13), tensor(13)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 995 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(1000), tensor(13), tensor(13)], dtype=torch.float32)])
# test_id: 996 
para_0 = torch.randn([tensor(1), tensor(1000), tensor(13), tensor(13)], dtype=torch.float32)
para_1 = (1, 1)
class adaptive_avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool2d(args[0], para_1,)
verify_model(adaptive_avg_pool2d().float().eval(), input_data=para_0)


# test_id: 997 
verify_model(torch.nn.AdaptiveAvgPool2d((1, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(1000), tensor(13), tensor(13)], dtype=torch.float32)])
# test_id: 998 
para_0 = torch.randn([1, 3, 224, 224], dtype=torch.float32)
para_1 = torch.randn([64, 3, 3, 3], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 999 
para_0 = torch.randn([1, 64, 111, 111], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1000 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 64, 111, 111], dtype=torch.float32)])
# test_id: 1001 
para_0 = torch.randn([1, 64, 111, 111], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 1002 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,ceil_mode=True,).eval(), input_data=[torch.randn([1, 64, 111, 111], dtype=torch.float32)])
# test_id: 1003 
para_0 = torch.randn([1, 64, 55, 55], dtype=torch.float32)
para_1 = torch.randn([16, 64, 1, 1], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1004 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 64, 55, 55], dtype=torch.float32)])
# test_id: 1005 
para_0 = torch.randn([1, 16, 55, 55], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1006 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 16, 55, 55], dtype=torch.float32)])
# test_id: 1007 
para_0 = torch.randn([1, 16, 55, 55], dtype=torch.float32)
para_1 = torch.randn([64, 16, 1, 1], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1008 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 16, 55, 55], dtype=torch.float32)])
# test_id: 1009 
para_0 = torch.randn([1, 64, 55, 55], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1010 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 64, 55, 55], dtype=torch.float32)])
# test_id: 1011 
para_0 = torch.randn([1, 16, 55, 55], dtype=torch.float32)
para_1 = torch.randn([64, 16, 3, 3], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1012 
para_0 = torch.randn([1, 128, 55, 55], dtype=torch.float32)
para_1 = torch.randn([16, 128, 1, 1], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1013 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 128, 55, 55], dtype=torch.float32)])
# test_id: 1014 
para_0 = torch.randn([1, 128, 55, 55], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 1015 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,ceil_mode=True,).eval(), input_data=[torch.randn([1, 128, 55, 55], dtype=torch.float32)])
# test_id: 1016 
para_0 = torch.randn([1, 128, 27, 27], dtype=torch.float32)
para_1 = torch.randn([32, 128, 1, 1], dtype=torch.float32)
para_2 = torch.randn([32], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1017 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 128, 27, 27], dtype=torch.float32)])
# test_id: 1018 
para_0 = torch.randn([1, 256, 27, 27], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 1019 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,ceil_mode=True,).eval(), input_data=[torch.randn([1, 256, 27, 27], dtype=torch.float32)])
# test_id: 1020 
para_0 = torch.randn([1, 256, 13, 13], dtype=torch.float32)
para_1 = torch.randn([48, 256, 1, 1], dtype=torch.float32)
para_2 = torch.randn([48], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1021 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 256, 13, 13], dtype=torch.float32)])
# test_id: 1022 
para_0 = torch.randn([1, 48, 13, 13], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1023 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 48, 13, 13], dtype=torch.float32)])
# test_id: 1024 
para_0 = torch.randn([1, 48, 13, 13], dtype=torch.float32)
para_1 = torch.randn([192, 48, 1, 1], dtype=torch.float32)
para_2 = torch.randn([192], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1025 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 48, 13, 13], dtype=torch.float32)])
# test_id: 1026 
para_0 = torch.randn([1, 192, 13, 13], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1027 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 192, 13, 13], dtype=torch.float32)])
# test_id: 1028 
para_0 = torch.randn([1, 48, 13, 13], dtype=torch.float32)
para_1 = torch.randn([192, 48, 3, 3], dtype=torch.float32)
para_2 = torch.randn([192], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1029 
para_0 = torch.randn([1, 384, 13, 13], dtype=torch.float32)
para_1 = torch.randn([48, 384, 1, 1], dtype=torch.float32)
para_2 = torch.randn([48], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1030 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([1, 384, 13, 13], dtype=torch.float32)])
# test_id: 1031 
para_0 = torch.randn([1, 384, 13, 13], dtype=torch.float32)
para_1 = torch.randn([64, 384, 1, 1], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1032 
para_0 = torch.randn([tensor(1), tensor(3), tensor(224), tensor(224)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1033 
para_0 = torch.randn([tensor(1), tensor(64), tensor(111), tensor(111)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1034 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(111), tensor(111)], dtype=torch.float32)])
# test_id: 1035 
para_0 = torch.randn([tensor(1), tensor(64), tensor(111), tensor(111)], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 1036 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,ceil_mode=True,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(111), tensor(111)], dtype=torch.float32)])
# test_id: 1037 
para_0 = torch.randn([tensor(1), tensor(64), tensor(55), tensor(55)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(64), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1038 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(55), tensor(55)], dtype=torch.float32)])
# test_id: 1039 
para_0 = torch.randn([tensor(1), tensor(16), tensor(55), tensor(55)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1040 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(55), tensor(55)], dtype=torch.float32)])
# test_id: 1041 
para_0 = torch.randn([tensor(1), tensor(16), tensor(55), tensor(55)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(16), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1042 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(55), tensor(55)], dtype=torch.float32)])
# test_id: 1043 
para_0 = torch.randn([tensor(1), tensor(64), tensor(55), tensor(55)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1044 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(55), tensor(55)], dtype=torch.float32)])
# test_id: 1045 
para_0 = torch.randn([tensor(1), tensor(16), tensor(55), tensor(55)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(16), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1046 
para_0 = torch.randn([tensor(1), tensor(128), tensor(55), tensor(55)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(128), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1047 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(55), tensor(55)], dtype=torch.float32)])
# test_id: 1048 
para_0 = torch.randn([tensor(1), tensor(128), tensor(55), tensor(55)], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 1049 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,ceil_mode=True,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(55), tensor(55)], dtype=torch.float32)])
# test_id: 1050 
para_0 = torch.randn([tensor(1), tensor(128), tensor(27), tensor(27)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(128), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(32)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1051 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(27), tensor(27)], dtype=torch.float32)])
# test_id: 1052 
para_0 = torch.randn([tensor(1), tensor(256), tensor(27), tensor(27)], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 1053 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,ceil_mode=True,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(27), tensor(27)], dtype=torch.float32)])
# test_id: 1054 
para_0 = torch.randn([tensor(1), tensor(256), tensor(13), tensor(13)], dtype=torch.float32)
para_1 = torch.randn([tensor(48), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(48)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1055 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(13), tensor(13)], dtype=torch.float32)])
# test_id: 1056 
para_0 = torch.randn([tensor(1), tensor(48), tensor(13), tensor(13)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1057 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(13), tensor(13)], dtype=torch.float32)])
# test_id: 1058 
para_0 = torch.randn([tensor(1), tensor(48), tensor(13), tensor(13)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(48), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(192)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1059 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(13), tensor(13)], dtype=torch.float32)])
# test_id: 1060 
para_0 = torch.randn([tensor(1), tensor(192), tensor(13), tensor(13)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1061 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(13), tensor(13)], dtype=torch.float32)])
# test_id: 1062 
para_0 = torch.randn([tensor(1), tensor(48), tensor(13), tensor(13)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(48), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(192)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1063 
para_0 = torch.randn([tensor(1), tensor(384), tensor(13), tensor(13)], dtype=torch.float32)
para_1 = torch.randn([tensor(48), tensor(384), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(48)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1064 
verify_model(torch.nn.Conv2d(512,1000,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(384), tensor(13), tensor(13)], dtype=torch.float32)])
# test_id: 1065 
para_0 = torch.randn([tensor(1), tensor(384), tensor(13), tensor(13)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(384), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1066 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 3, 224, 224], dtype=torch.float32)])
# test_id: 1067 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 64, 112, 112], dtype=torch.float32)])
# test_id: 1068 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 64, 56, 56], dtype=torch.float32)])
# test_id: 1069 
para_0 = torch.randn([1, 64, 56, 56], dtype=torch.float32)
para_1 = torch.randn([128, 64, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1070 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 64, 56, 56], dtype=torch.float32)])
# test_id: 1071 
para_0 = torch.randn([1, 128, 56, 56], dtype=torch.float32)
para_1 = torch.randn([128], dtype=torch.float32)
para_2 = torch.randn([128], dtype=torch.float32)
para_3 = torch.randn([128], dtype=torch.float32)
para_4 = torch.randn([128], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1072 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 128, 56, 56], dtype=torch.float32)])
# test_id: 1073 
para_0 = torch.randn([1, 128, 56, 56], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1074 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 128, 56, 56], dtype=torch.float32)])
# test_id: 1075 
para_0 = torch.randn([1, 128, 56, 56], dtype=torch.float32)
para_1 = torch.randn([32, 128, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1076 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 128, 56, 56], dtype=torch.float32)])
# test_id: 1077 
para_0 = torch.randn([1, 96, 56, 56], dtype=torch.float32)
para_1 = torch.randn([96], dtype=torch.float32)
para_2 = torch.randn([96], dtype=torch.float32)
para_3 = torch.randn([96], dtype=torch.float32)
para_4 = torch.randn([96], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1078 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 96, 56, 56], dtype=torch.float32)])
# test_id: 1079 
para_0 = torch.randn([1, 96, 56, 56], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1080 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 96, 56, 56], dtype=torch.float32)])
# test_id: 1081 
para_0 = torch.randn([1, 96, 56, 56], dtype=torch.float32)
para_1 = torch.randn([128, 96, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1082 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 96, 56, 56], dtype=torch.float32)])
# test_id: 1083 
para_0 = torch.randn([1, 128, 56, 56], dtype=torch.float32)
para_1 = torch.randn([128, 128, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1084 
para_0 = torch.randn([1, 160, 56, 56], dtype=torch.float32)
para_1 = torch.randn([160], dtype=torch.float32)
para_2 = torch.randn([160], dtype=torch.float32)
para_3 = torch.randn([160], dtype=torch.float32)
para_4 = torch.randn([160], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1085 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 160, 56, 56], dtype=torch.float32)])
# test_id: 1086 
para_0 = torch.randn([1, 160, 56, 56], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1087 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 160, 56, 56], dtype=torch.float32)])
# test_id: 1088 
para_0 = torch.randn([1, 160, 56, 56], dtype=torch.float32)
para_1 = torch.randn([128, 160, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1089 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 160, 56, 56], dtype=torch.float32)])
# test_id: 1090 
para_0 = torch.randn([1, 192, 56, 56], dtype=torch.float32)
para_1 = torch.randn([192], dtype=torch.float32)
para_2 = torch.randn([192], dtype=torch.float32)
para_3 = torch.randn([192], dtype=torch.float32)
para_4 = torch.randn([192], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1091 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 192, 56, 56], dtype=torch.float32)])
# test_id: 1092 
para_0 = torch.randn([1, 192, 56, 56], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1093 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 192, 56, 56], dtype=torch.float32)])
# test_id: 1094 
para_0 = torch.randn([1, 192, 56, 56], dtype=torch.float32)
para_1 = torch.randn([128, 192, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1095 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 192, 56, 56], dtype=torch.float32)])
# test_id: 1096 
para_0 = torch.randn([1, 224, 56, 56], dtype=torch.float32)
para_1 = torch.randn([224], dtype=torch.float32)
para_2 = torch.randn([224], dtype=torch.float32)
para_3 = torch.randn([224], dtype=torch.float32)
para_4 = torch.randn([224], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1097 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 224, 56, 56], dtype=torch.float32)])
# test_id: 1098 
para_0 = torch.randn([1, 224, 56, 56], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1099 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 224, 56, 56], dtype=torch.float32)])
# test_id: 1100 
para_0 = torch.randn([1, 224, 56, 56], dtype=torch.float32)
para_1 = torch.randn([128, 224, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1101 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 224, 56, 56], dtype=torch.float32)])
# test_id: 1102 
para_0 = torch.randn([1, 256, 56, 56], dtype=torch.float32)
para_1 = torch.randn([256], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
para_3 = torch.randn([256], dtype=torch.float32)
para_4 = torch.randn([256], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1103 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 256, 56, 56], dtype=torch.float32)])
# test_id: 1104 
para_0 = torch.randn([1, 256, 56, 56], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1105 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 256, 56, 56], dtype=torch.float32)])
# test_id: 1106 
para_0 = torch.randn([1, 256, 56, 56], dtype=torch.float32)
para_1 = torch.randn([128, 256, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1107 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 256, 56, 56], dtype=torch.float32)])
# test_id: 1108 
para_0 = torch.randn([1, 128, 56, 56], dtype=torch.float32)
para_1 = 2
para_2 = 2
para_3 = 0
para_4 = False
para_5 = True
para_6 = None
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 1109 
verify_model(torch.nn.AvgPool2d(kernel_size=2,stride=2,).eval(), input_data=[torch.randn([1, 128, 56, 56], dtype=torch.float32)])
# test_id: 1110 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 128, 28, 28], dtype=torch.float32)])
# test_id: 1111 
para_0 = torch.randn([1, 128, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128, 128, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1112 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 128, 28, 28], dtype=torch.float32)])
# test_id: 1113 
para_0 = torch.randn([1, 128, 28, 28], dtype=torch.float32)
para_1 = torch.randn([32, 128, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1114 
para_0 = torch.randn([1, 160, 28, 28], dtype=torch.float32)
para_1 = torch.randn([160], dtype=torch.float32)
para_2 = torch.randn([160], dtype=torch.float32)
para_3 = torch.randn([160], dtype=torch.float32)
para_4 = torch.randn([160], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1115 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 160, 28, 28], dtype=torch.float32)])
# test_id: 1116 
para_0 = torch.randn([1, 160, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1117 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 160, 28, 28], dtype=torch.float32)])
# test_id: 1118 
para_0 = torch.randn([1, 160, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128, 160, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1119 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 160, 28, 28], dtype=torch.float32)])
# test_id: 1120 
para_0 = torch.randn([1, 192, 28, 28], dtype=torch.float32)
para_1 = torch.randn([192], dtype=torch.float32)
para_2 = torch.randn([192], dtype=torch.float32)
para_3 = torch.randn([192], dtype=torch.float32)
para_4 = torch.randn([192], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1121 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 192, 28, 28], dtype=torch.float32)])
# test_id: 1122 
para_0 = torch.randn([1, 192, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1123 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 192, 28, 28], dtype=torch.float32)])
# test_id: 1124 
para_0 = torch.randn([1, 192, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128, 192, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1125 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 192, 28, 28], dtype=torch.float32)])
# test_id: 1126 
para_0 = torch.randn([1, 224, 28, 28], dtype=torch.float32)
para_1 = torch.randn([224], dtype=torch.float32)
para_2 = torch.randn([224], dtype=torch.float32)
para_3 = torch.randn([224], dtype=torch.float32)
para_4 = torch.randn([224], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1127 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 224, 28, 28], dtype=torch.float32)])
# test_id: 1128 
para_0 = torch.randn([1, 224, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1129 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 224, 28, 28], dtype=torch.float32)])
# test_id: 1130 
para_0 = torch.randn([1, 224, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128, 224, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1131 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 224, 28, 28], dtype=torch.float32)])
# test_id: 1132 
para_0 = torch.randn([1, 256, 28, 28], dtype=torch.float32)
para_1 = torch.randn([256], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
para_3 = torch.randn([256], dtype=torch.float32)
para_4 = torch.randn([256], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1133 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 256, 28, 28], dtype=torch.float32)])
# test_id: 1134 
para_0 = torch.randn([1, 256, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1135 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 256, 28, 28], dtype=torch.float32)])
# test_id: 1136 
para_0 = torch.randn([1, 256, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128, 256, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1137 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 256, 28, 28], dtype=torch.float32)])
# test_id: 1138 
para_0 = torch.randn([1, 288, 28, 28], dtype=torch.float32)
para_1 = torch.randn([288], dtype=torch.float32)
para_2 = torch.randn([288], dtype=torch.float32)
para_3 = torch.randn([288], dtype=torch.float32)
para_4 = torch.randn([288], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1139 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 288, 28, 28], dtype=torch.float32)])
# test_id: 1140 
para_0 = torch.randn([1, 288, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1141 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 288, 28, 28], dtype=torch.float32)])
# test_id: 1142 
para_0 = torch.randn([1, 288, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128, 288, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1143 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 288, 28, 28], dtype=torch.float32)])
# test_id: 1144 
para_0 = torch.randn([1, 320, 28, 28], dtype=torch.float32)
para_1 = torch.randn([320], dtype=torch.float32)
para_2 = torch.randn([320], dtype=torch.float32)
para_3 = torch.randn([320], dtype=torch.float32)
para_4 = torch.randn([320], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1145 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 320, 28, 28], dtype=torch.float32)])
# test_id: 1146 
para_0 = torch.randn([1, 320, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1147 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 320, 28, 28], dtype=torch.float32)])
# test_id: 1148 
para_0 = torch.randn([1, 320, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128, 320, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1149 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 320, 28, 28], dtype=torch.float32)])
# test_id: 1150 
para_0 = torch.randn([1, 352, 28, 28], dtype=torch.float32)
para_1 = torch.randn([352], dtype=torch.float32)
para_2 = torch.randn([352], dtype=torch.float32)
para_3 = torch.randn([352], dtype=torch.float32)
para_4 = torch.randn([352], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1151 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 352, 28, 28], dtype=torch.float32)])
# test_id: 1152 
para_0 = torch.randn([1, 352, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1153 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 352, 28, 28], dtype=torch.float32)])
# test_id: 1154 
para_0 = torch.randn([1, 352, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128, 352, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1155 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 352, 28, 28], dtype=torch.float32)])
# test_id: 1156 
para_0 = torch.randn([1, 384, 28, 28], dtype=torch.float32)
para_1 = torch.randn([384], dtype=torch.float32)
para_2 = torch.randn([384], dtype=torch.float32)
para_3 = torch.randn([384], dtype=torch.float32)
para_4 = torch.randn([384], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1157 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 384, 28, 28], dtype=torch.float32)])
# test_id: 1158 
para_0 = torch.randn([1, 384, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1159 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 384, 28, 28], dtype=torch.float32)])
# test_id: 1160 
para_0 = torch.randn([1, 384, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128, 384, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1161 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 384, 28, 28], dtype=torch.float32)])
# test_id: 1162 
para_0 = torch.randn([1, 416, 28, 28], dtype=torch.float32)
para_1 = torch.randn([416], dtype=torch.float32)
para_2 = torch.randn([416], dtype=torch.float32)
para_3 = torch.randn([416], dtype=torch.float32)
para_4 = torch.randn([416], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1163 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 416, 28, 28], dtype=torch.float32)])
# test_id: 1164 
para_0 = torch.randn([1, 416, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1165 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 416, 28, 28], dtype=torch.float32)])
# test_id: 1166 
para_0 = torch.randn([1, 416, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128, 416, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1167 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 416, 28, 28], dtype=torch.float32)])
# test_id: 1168 
para_0 = torch.randn([1, 448, 28, 28], dtype=torch.float32)
para_1 = torch.randn([448], dtype=torch.float32)
para_2 = torch.randn([448], dtype=torch.float32)
para_3 = torch.randn([448], dtype=torch.float32)
para_4 = torch.randn([448], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1169 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 448, 28, 28], dtype=torch.float32)])
# test_id: 1170 
para_0 = torch.randn([1, 448, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1171 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 448, 28, 28], dtype=torch.float32)])
# test_id: 1172 
para_0 = torch.randn([1, 448, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128, 448, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1173 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 448, 28, 28], dtype=torch.float32)])
# test_id: 1174 
para_0 = torch.randn([1, 480, 28, 28], dtype=torch.float32)
para_1 = torch.randn([480], dtype=torch.float32)
para_2 = torch.randn([480], dtype=torch.float32)
para_3 = torch.randn([480], dtype=torch.float32)
para_4 = torch.randn([480], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1175 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 480, 28, 28], dtype=torch.float32)])
# test_id: 1176 
para_0 = torch.randn([1, 480, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1177 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 480, 28, 28], dtype=torch.float32)])
# test_id: 1178 
para_0 = torch.randn([1, 480, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128, 480, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1179 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 480, 28, 28], dtype=torch.float32)])
# test_id: 1180 
para_0 = torch.randn([1, 512, 28, 28], dtype=torch.float32)
para_1 = torch.randn([512], dtype=torch.float32)
para_2 = torch.randn([512], dtype=torch.float32)
para_3 = torch.randn([512], dtype=torch.float32)
para_4 = torch.randn([512], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1181 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 512, 28, 28], dtype=torch.float32)])
# test_id: 1182 
para_0 = torch.randn([1, 512, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1183 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 512, 28, 28], dtype=torch.float32)])
# test_id: 1184 
para_0 = torch.randn([1, 512, 28, 28], dtype=torch.float32)
para_1 = torch.randn([256, 512, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1185 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 512, 28, 28], dtype=torch.float32)])
# test_id: 1186 
para_0 = torch.randn([1, 256, 28, 28], dtype=torch.float32)
para_1 = 2
para_2 = 2
para_3 = 0
para_4 = False
para_5 = True
para_6 = None
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 1187 
verify_model(torch.nn.AvgPool2d(kernel_size=2,stride=2,).eval(), input_data=[torch.randn([1, 256, 28, 28], dtype=torch.float32)])
# test_id: 1188 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 256, 14, 14], dtype=torch.float32)])
# test_id: 1189 
para_0 = torch.randn([1, 256, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 256, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1190 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 256, 14, 14], dtype=torch.float32)])
# test_id: 1191 
para_0 = torch.randn([1, 128, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128], dtype=torch.float32)
para_2 = torch.randn([128], dtype=torch.float32)
para_3 = torch.randn([128], dtype=torch.float32)
para_4 = torch.randn([128], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1192 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 128, 14, 14], dtype=torch.float32)])
# test_id: 1193 
para_0 = torch.randn([1, 128, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1194 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 128, 14, 14], dtype=torch.float32)])
# test_id: 1195 
para_0 = torch.randn([1, 128, 14, 14], dtype=torch.float32)
para_1 = torch.randn([32, 128, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1196 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 128, 14, 14], dtype=torch.float32)])
# test_id: 1197 
para_0 = torch.randn([1, 288, 14, 14], dtype=torch.float32)
para_1 = torch.randn([288], dtype=torch.float32)
para_2 = torch.randn([288], dtype=torch.float32)
para_3 = torch.randn([288], dtype=torch.float32)
para_4 = torch.randn([288], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1198 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 288, 14, 14], dtype=torch.float32)])
# test_id: 1199 
para_0 = torch.randn([1, 288, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1200 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 288, 14, 14], dtype=torch.float32)])
# test_id: 1201 
para_0 = torch.randn([1, 288, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 288, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1202 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 288, 14, 14], dtype=torch.float32)])
# test_id: 1203 
para_0 = torch.randn([1, 320, 14, 14], dtype=torch.float32)
para_1 = torch.randn([320], dtype=torch.float32)
para_2 = torch.randn([320], dtype=torch.float32)
para_3 = torch.randn([320], dtype=torch.float32)
para_4 = torch.randn([320], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1204 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 320, 14, 14], dtype=torch.float32)])
# test_id: 1205 
para_0 = torch.randn([1, 320, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1206 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 320, 14, 14], dtype=torch.float32)])
# test_id: 1207 
para_0 = torch.randn([1, 320, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 320, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1208 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 320, 14, 14], dtype=torch.float32)])
# test_id: 1209 
para_0 = torch.randn([1, 352, 14, 14], dtype=torch.float32)
para_1 = torch.randn([352], dtype=torch.float32)
para_2 = torch.randn([352], dtype=torch.float32)
para_3 = torch.randn([352], dtype=torch.float32)
para_4 = torch.randn([352], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1210 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 352, 14, 14], dtype=torch.float32)])
# test_id: 1211 
para_0 = torch.randn([1, 352, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1212 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 352, 14, 14], dtype=torch.float32)])
# test_id: 1213 
para_0 = torch.randn([1, 352, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 352, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1214 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 352, 14, 14], dtype=torch.float32)])
# test_id: 1215 
para_0 = torch.randn([1, 384, 14, 14], dtype=torch.float32)
para_1 = torch.randn([384], dtype=torch.float32)
para_2 = torch.randn([384], dtype=torch.float32)
para_3 = torch.randn([384], dtype=torch.float32)
para_4 = torch.randn([384], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1216 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 384, 14, 14], dtype=torch.float32)])
# test_id: 1217 
para_0 = torch.randn([1, 384, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1218 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 384, 14, 14], dtype=torch.float32)])
# test_id: 1219 
para_0 = torch.randn([1, 384, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 384, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1220 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 384, 14, 14], dtype=torch.float32)])
# test_id: 1221 
para_0 = torch.randn([1, 416, 14, 14], dtype=torch.float32)
para_1 = torch.randn([416], dtype=torch.float32)
para_2 = torch.randn([416], dtype=torch.float32)
para_3 = torch.randn([416], dtype=torch.float32)
para_4 = torch.randn([416], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1222 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 416, 14, 14], dtype=torch.float32)])
# test_id: 1223 
para_0 = torch.randn([1, 416, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1224 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 416, 14, 14], dtype=torch.float32)])
# test_id: 1225 
para_0 = torch.randn([1, 416, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 416, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1226 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 416, 14, 14], dtype=torch.float32)])
# test_id: 1227 
para_0 = torch.randn([1, 448, 14, 14], dtype=torch.float32)
para_1 = torch.randn([448], dtype=torch.float32)
para_2 = torch.randn([448], dtype=torch.float32)
para_3 = torch.randn([448], dtype=torch.float32)
para_4 = torch.randn([448], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1228 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 448, 14, 14], dtype=torch.float32)])
# test_id: 1229 
para_0 = torch.randn([1, 448, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1230 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 448, 14, 14], dtype=torch.float32)])
# test_id: 1231 
para_0 = torch.randn([1, 448, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 448, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1232 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 448, 14, 14], dtype=torch.float32)])
# test_id: 1233 
para_0 = torch.randn([1, 480, 14, 14], dtype=torch.float32)
para_1 = torch.randn([480], dtype=torch.float32)
para_2 = torch.randn([480], dtype=torch.float32)
para_3 = torch.randn([480], dtype=torch.float32)
para_4 = torch.randn([480], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1234 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 480, 14, 14], dtype=torch.float32)])
# test_id: 1235 
para_0 = torch.randn([1, 480, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1236 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 480, 14, 14], dtype=torch.float32)])
# test_id: 1237 
para_0 = torch.randn([1, 480, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 480, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1238 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 480, 14, 14], dtype=torch.float32)])
# test_id: 1239 
para_0 = torch.randn([1, 512, 14, 14], dtype=torch.float32)
para_1 = torch.randn([512], dtype=torch.float32)
para_2 = torch.randn([512], dtype=torch.float32)
para_3 = torch.randn([512], dtype=torch.float32)
para_4 = torch.randn([512], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1240 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 512, 14, 14], dtype=torch.float32)])
# test_id: 1241 
para_0 = torch.randn([1, 512, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1242 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 512, 14, 14], dtype=torch.float32)])
# test_id: 1243 
para_0 = torch.randn([1, 512, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 512, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1244 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 512, 14, 14], dtype=torch.float32)])
# test_id: 1245 
para_0 = torch.randn([1, 544, 14, 14], dtype=torch.float32)
para_1 = torch.randn([544], dtype=torch.float32)
para_2 = torch.randn([544], dtype=torch.float32)
para_3 = torch.randn([544], dtype=torch.float32)
para_4 = torch.randn([544], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1246 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 544, 14, 14], dtype=torch.float32)])
# test_id: 1247 
para_0 = torch.randn([1, 544, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1248 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 544, 14, 14], dtype=torch.float32)])
# test_id: 1249 
para_0 = torch.randn([1, 544, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 544, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1250 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 544, 14, 14], dtype=torch.float32)])
# test_id: 1251 
para_0 = torch.randn([1, 576, 14, 14], dtype=torch.float32)
para_1 = torch.randn([576], dtype=torch.float32)
para_2 = torch.randn([576], dtype=torch.float32)
para_3 = torch.randn([576], dtype=torch.float32)
para_4 = torch.randn([576], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1252 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 576, 14, 14], dtype=torch.float32)])
# test_id: 1253 
para_0 = torch.randn([1, 576, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1254 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 576, 14, 14], dtype=torch.float32)])
# test_id: 1255 
para_0 = torch.randn([1, 576, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 576, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1256 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 576, 14, 14], dtype=torch.float32)])
# test_id: 1257 
para_0 = torch.randn([1, 608, 14, 14], dtype=torch.float32)
para_1 = torch.randn([608], dtype=torch.float32)
para_2 = torch.randn([608], dtype=torch.float32)
para_3 = torch.randn([608], dtype=torch.float32)
para_4 = torch.randn([608], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1258 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 608, 14, 14], dtype=torch.float32)])
# test_id: 1259 
para_0 = torch.randn([1, 608, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1260 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 608, 14, 14], dtype=torch.float32)])
# test_id: 1261 
para_0 = torch.randn([1, 608, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 608, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1262 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 608, 14, 14], dtype=torch.float32)])
# test_id: 1263 
para_0 = torch.randn([1, 640, 14, 14], dtype=torch.float32)
para_1 = torch.randn([640], dtype=torch.float32)
para_2 = torch.randn([640], dtype=torch.float32)
para_3 = torch.randn([640], dtype=torch.float32)
para_4 = torch.randn([640], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1264 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 640, 14, 14], dtype=torch.float32)])
# test_id: 1265 
para_0 = torch.randn([1, 640, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1266 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 640, 14, 14], dtype=torch.float32)])
# test_id: 1267 
para_0 = torch.randn([1, 640, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 640, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1268 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 640, 14, 14], dtype=torch.float32)])
# test_id: 1269 
para_0 = torch.randn([1, 672, 14, 14], dtype=torch.float32)
para_1 = torch.randn([672], dtype=torch.float32)
para_2 = torch.randn([672], dtype=torch.float32)
para_3 = torch.randn([672], dtype=torch.float32)
para_4 = torch.randn([672], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1270 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 672, 14, 14], dtype=torch.float32)])
# test_id: 1271 
para_0 = torch.randn([1, 672, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1272 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 672, 14, 14], dtype=torch.float32)])
# test_id: 1273 
para_0 = torch.randn([1, 672, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 672, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1274 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 672, 14, 14], dtype=torch.float32)])
# test_id: 1275 
para_0 = torch.randn([1, 704, 14, 14], dtype=torch.float32)
para_1 = torch.randn([704], dtype=torch.float32)
para_2 = torch.randn([704], dtype=torch.float32)
para_3 = torch.randn([704], dtype=torch.float32)
para_4 = torch.randn([704], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1276 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 704, 14, 14], dtype=torch.float32)])
# test_id: 1277 
para_0 = torch.randn([1, 704, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1278 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 704, 14, 14], dtype=torch.float32)])
# test_id: 1279 
para_0 = torch.randn([1, 704, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 704, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1280 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 704, 14, 14], dtype=torch.float32)])
# test_id: 1281 
para_0 = torch.randn([1, 736, 14, 14], dtype=torch.float32)
para_1 = torch.randn([736], dtype=torch.float32)
para_2 = torch.randn([736], dtype=torch.float32)
para_3 = torch.randn([736], dtype=torch.float32)
para_4 = torch.randn([736], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1282 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 736, 14, 14], dtype=torch.float32)])
# test_id: 1283 
para_0 = torch.randn([1, 736, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1284 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 736, 14, 14], dtype=torch.float32)])
# test_id: 1285 
para_0 = torch.randn([1, 736, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 736, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1286 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 736, 14, 14], dtype=torch.float32)])
# test_id: 1287 
para_0 = torch.randn([1, 768, 14, 14], dtype=torch.float32)
para_1 = torch.randn([768], dtype=torch.float32)
para_2 = torch.randn([768], dtype=torch.float32)
para_3 = torch.randn([768], dtype=torch.float32)
para_4 = torch.randn([768], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1288 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 768, 14, 14], dtype=torch.float32)])
# test_id: 1289 
para_0 = torch.randn([1, 768, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1290 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 768, 14, 14], dtype=torch.float32)])
# test_id: 1291 
para_0 = torch.randn([1, 768, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 768, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1292 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 768, 14, 14], dtype=torch.float32)])
# test_id: 1293 
para_0 = torch.randn([1, 800, 14, 14], dtype=torch.float32)
para_1 = torch.randn([800], dtype=torch.float32)
para_2 = torch.randn([800], dtype=torch.float32)
para_3 = torch.randn([800], dtype=torch.float32)
para_4 = torch.randn([800], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1294 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 800, 14, 14], dtype=torch.float32)])
# test_id: 1295 
para_0 = torch.randn([1, 800, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1296 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 800, 14, 14], dtype=torch.float32)])
# test_id: 1297 
para_0 = torch.randn([1, 800, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 800, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1298 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 800, 14, 14], dtype=torch.float32)])
# test_id: 1299 
para_0 = torch.randn([1, 832, 14, 14], dtype=torch.float32)
para_1 = torch.randn([832], dtype=torch.float32)
para_2 = torch.randn([832], dtype=torch.float32)
para_3 = torch.randn([832], dtype=torch.float32)
para_4 = torch.randn([832], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1300 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 832, 14, 14], dtype=torch.float32)])
# test_id: 1301 
para_0 = torch.randn([1, 832, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1302 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 832, 14, 14], dtype=torch.float32)])
# test_id: 1303 
para_0 = torch.randn([1, 832, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 832, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1304 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 832, 14, 14], dtype=torch.float32)])
# test_id: 1305 
para_0 = torch.randn([1, 864, 14, 14], dtype=torch.float32)
para_1 = torch.randn([864], dtype=torch.float32)
para_2 = torch.randn([864], dtype=torch.float32)
para_3 = torch.randn([864], dtype=torch.float32)
para_4 = torch.randn([864], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1306 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 864, 14, 14], dtype=torch.float32)])
# test_id: 1307 
para_0 = torch.randn([1, 864, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1308 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 864, 14, 14], dtype=torch.float32)])
# test_id: 1309 
para_0 = torch.randn([1, 864, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 864, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1310 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 864, 14, 14], dtype=torch.float32)])
# test_id: 1311 
para_0 = torch.randn([1, 896, 14, 14], dtype=torch.float32)
para_1 = torch.randn([896], dtype=torch.float32)
para_2 = torch.randn([896], dtype=torch.float32)
para_3 = torch.randn([896], dtype=torch.float32)
para_4 = torch.randn([896], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1312 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 896, 14, 14], dtype=torch.float32)])
# test_id: 1313 
para_0 = torch.randn([1, 896, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1314 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 896, 14, 14], dtype=torch.float32)])
# test_id: 1315 
para_0 = torch.randn([1, 896, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 896, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1316 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 896, 14, 14], dtype=torch.float32)])
# test_id: 1317 
para_0 = torch.randn([1, 928, 14, 14], dtype=torch.float32)
para_1 = torch.randn([928], dtype=torch.float32)
para_2 = torch.randn([928], dtype=torch.float32)
para_3 = torch.randn([928], dtype=torch.float32)
para_4 = torch.randn([928], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1318 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 928, 14, 14], dtype=torch.float32)])
# test_id: 1319 
para_0 = torch.randn([1, 928, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1320 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 928, 14, 14], dtype=torch.float32)])
# test_id: 1321 
para_0 = torch.randn([1, 928, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 928, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1322 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 928, 14, 14], dtype=torch.float32)])
# test_id: 1323 
para_0 = torch.randn([1, 960, 14, 14], dtype=torch.float32)
para_1 = torch.randn([960], dtype=torch.float32)
para_2 = torch.randn([960], dtype=torch.float32)
para_3 = torch.randn([960], dtype=torch.float32)
para_4 = torch.randn([960], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1324 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 960, 14, 14], dtype=torch.float32)])
# test_id: 1325 
para_0 = torch.randn([1, 960, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1326 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 960, 14, 14], dtype=torch.float32)])
# test_id: 1327 
para_0 = torch.randn([1, 960, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 960, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1328 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 960, 14, 14], dtype=torch.float32)])
# test_id: 1329 
para_0 = torch.randn([1, 992, 14, 14], dtype=torch.float32)
para_1 = torch.randn([992], dtype=torch.float32)
para_2 = torch.randn([992], dtype=torch.float32)
para_3 = torch.randn([992], dtype=torch.float32)
para_4 = torch.randn([992], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1330 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 992, 14, 14], dtype=torch.float32)])
# test_id: 1331 
para_0 = torch.randn([1, 992, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1332 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 992, 14, 14], dtype=torch.float32)])
# test_id: 1333 
para_0 = torch.randn([1, 992, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 992, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1334 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 992, 14, 14], dtype=torch.float32)])
# test_id: 1335 
para_0 = torch.randn([1, 1024, 14, 14], dtype=torch.float32)
para_1 = torch.randn([1024], dtype=torch.float32)
para_2 = torch.randn([1024], dtype=torch.float32)
para_3 = torch.randn([1024], dtype=torch.float32)
para_4 = torch.randn([1024], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1336 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 1024, 14, 14], dtype=torch.float32)])
# test_id: 1337 
para_0 = torch.randn([1, 1024, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1338 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 1024, 14, 14], dtype=torch.float32)])
# test_id: 1339 
para_0 = torch.randn([1, 1024, 14, 14], dtype=torch.float32)
para_1 = torch.randn([512, 1024, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1340 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 1024, 14, 14], dtype=torch.float32)])
# test_id: 1341 
para_0 = torch.randn([1, 512, 14, 14], dtype=torch.float32)
para_1 = 2
para_2 = 2
para_3 = 0
para_4 = False
para_5 = True
para_6 = None
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 1342 
verify_model(torch.nn.AvgPool2d(kernel_size=2,stride=2,).eval(), input_data=[torch.randn([1, 512, 14, 14], dtype=torch.float32)])
# test_id: 1343 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 512, 7, 7], dtype=torch.float32)])
# test_id: 1344 
para_0 = torch.randn([1, 512, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 512, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1345 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 512, 7, 7], dtype=torch.float32)])
# test_id: 1346 
para_0 = torch.randn([1, 128, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128], dtype=torch.float32)
para_2 = torch.randn([128], dtype=torch.float32)
para_3 = torch.randn([128], dtype=torch.float32)
para_4 = torch.randn([128], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1347 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 128, 7, 7], dtype=torch.float32)])
# test_id: 1348 
para_0 = torch.randn([1, 128, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1349 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 128, 7, 7], dtype=torch.float32)])
# test_id: 1350 
para_0 = torch.randn([1, 128, 7, 7], dtype=torch.float32)
para_1 = torch.randn([32, 128, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1351 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 128, 7, 7], dtype=torch.float32)])
# test_id: 1352 
para_0 = torch.randn([1, 544, 7, 7], dtype=torch.float32)
para_1 = torch.randn([544], dtype=torch.float32)
para_2 = torch.randn([544], dtype=torch.float32)
para_3 = torch.randn([544], dtype=torch.float32)
para_4 = torch.randn([544], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1353 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 544, 7, 7], dtype=torch.float32)])
# test_id: 1354 
para_0 = torch.randn([1, 544, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1355 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 544, 7, 7], dtype=torch.float32)])
# test_id: 1356 
para_0 = torch.randn([1, 544, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 544, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1357 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 544, 7, 7], dtype=torch.float32)])
# test_id: 1358 
para_0 = torch.randn([1, 576, 7, 7], dtype=torch.float32)
para_1 = torch.randn([576], dtype=torch.float32)
para_2 = torch.randn([576], dtype=torch.float32)
para_3 = torch.randn([576], dtype=torch.float32)
para_4 = torch.randn([576], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1359 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 576, 7, 7], dtype=torch.float32)])
# test_id: 1360 
para_0 = torch.randn([1, 576, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1361 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 576, 7, 7], dtype=torch.float32)])
# test_id: 1362 
para_0 = torch.randn([1, 576, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 576, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1363 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 576, 7, 7], dtype=torch.float32)])
# test_id: 1364 
para_0 = torch.randn([1, 608, 7, 7], dtype=torch.float32)
para_1 = torch.randn([608], dtype=torch.float32)
para_2 = torch.randn([608], dtype=torch.float32)
para_3 = torch.randn([608], dtype=torch.float32)
para_4 = torch.randn([608], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1365 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 608, 7, 7], dtype=torch.float32)])
# test_id: 1366 
para_0 = torch.randn([1, 608, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1367 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 608, 7, 7], dtype=torch.float32)])
# test_id: 1368 
para_0 = torch.randn([1, 608, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 608, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1369 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 608, 7, 7], dtype=torch.float32)])
# test_id: 1370 
para_0 = torch.randn([1, 640, 7, 7], dtype=torch.float32)
para_1 = torch.randn([640], dtype=torch.float32)
para_2 = torch.randn([640], dtype=torch.float32)
para_3 = torch.randn([640], dtype=torch.float32)
para_4 = torch.randn([640], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1371 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 640, 7, 7], dtype=torch.float32)])
# test_id: 1372 
para_0 = torch.randn([1, 640, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1373 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 640, 7, 7], dtype=torch.float32)])
# test_id: 1374 
para_0 = torch.randn([1, 640, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 640, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1375 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 640, 7, 7], dtype=torch.float32)])
# test_id: 1376 
para_0 = torch.randn([1, 672, 7, 7], dtype=torch.float32)
para_1 = torch.randn([672], dtype=torch.float32)
para_2 = torch.randn([672], dtype=torch.float32)
para_3 = torch.randn([672], dtype=torch.float32)
para_4 = torch.randn([672], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1377 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 672, 7, 7], dtype=torch.float32)])
# test_id: 1378 
para_0 = torch.randn([1, 672, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1379 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 672, 7, 7], dtype=torch.float32)])
# test_id: 1380 
para_0 = torch.randn([1, 672, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 672, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1381 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 672, 7, 7], dtype=torch.float32)])
# test_id: 1382 
para_0 = torch.randn([1, 704, 7, 7], dtype=torch.float32)
para_1 = torch.randn([704], dtype=torch.float32)
para_2 = torch.randn([704], dtype=torch.float32)
para_3 = torch.randn([704], dtype=torch.float32)
para_4 = torch.randn([704], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1383 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 704, 7, 7], dtype=torch.float32)])
# test_id: 1384 
para_0 = torch.randn([1, 704, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1385 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 704, 7, 7], dtype=torch.float32)])
# test_id: 1386 
para_0 = torch.randn([1, 704, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 704, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1387 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 704, 7, 7], dtype=torch.float32)])
# test_id: 1388 
para_0 = torch.randn([1, 736, 7, 7], dtype=torch.float32)
para_1 = torch.randn([736], dtype=torch.float32)
para_2 = torch.randn([736], dtype=torch.float32)
para_3 = torch.randn([736], dtype=torch.float32)
para_4 = torch.randn([736], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1389 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 736, 7, 7], dtype=torch.float32)])
# test_id: 1390 
para_0 = torch.randn([1, 736, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1391 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 736, 7, 7], dtype=torch.float32)])
# test_id: 1392 
para_0 = torch.randn([1, 736, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 736, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1393 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 736, 7, 7], dtype=torch.float32)])
# test_id: 1394 
para_0 = torch.randn([1, 768, 7, 7], dtype=torch.float32)
para_1 = torch.randn([768], dtype=torch.float32)
para_2 = torch.randn([768], dtype=torch.float32)
para_3 = torch.randn([768], dtype=torch.float32)
para_4 = torch.randn([768], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1395 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 768, 7, 7], dtype=torch.float32)])
# test_id: 1396 
para_0 = torch.randn([1, 768, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1397 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 768, 7, 7], dtype=torch.float32)])
# test_id: 1398 
para_0 = torch.randn([1, 768, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 768, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1399 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 768, 7, 7], dtype=torch.float32)])
# test_id: 1400 
para_0 = torch.randn([1, 800, 7, 7], dtype=torch.float32)
para_1 = torch.randn([800], dtype=torch.float32)
para_2 = torch.randn([800], dtype=torch.float32)
para_3 = torch.randn([800], dtype=torch.float32)
para_4 = torch.randn([800], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1401 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 800, 7, 7], dtype=torch.float32)])
# test_id: 1402 
para_0 = torch.randn([1, 800, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1403 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 800, 7, 7], dtype=torch.float32)])
# test_id: 1404 
para_0 = torch.randn([1, 800, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 800, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1405 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 800, 7, 7], dtype=torch.float32)])
# test_id: 1406 
para_0 = torch.randn([1, 832, 7, 7], dtype=torch.float32)
para_1 = torch.randn([832], dtype=torch.float32)
para_2 = torch.randn([832], dtype=torch.float32)
para_3 = torch.randn([832], dtype=torch.float32)
para_4 = torch.randn([832], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1407 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 832, 7, 7], dtype=torch.float32)])
# test_id: 1408 
para_0 = torch.randn([1, 832, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1409 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 832, 7, 7], dtype=torch.float32)])
# test_id: 1410 
para_0 = torch.randn([1, 832, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 832, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1411 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 832, 7, 7], dtype=torch.float32)])
# test_id: 1412 
para_0 = torch.randn([1, 864, 7, 7], dtype=torch.float32)
para_1 = torch.randn([864], dtype=torch.float32)
para_2 = torch.randn([864], dtype=torch.float32)
para_3 = torch.randn([864], dtype=torch.float32)
para_4 = torch.randn([864], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1413 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 864, 7, 7], dtype=torch.float32)])
# test_id: 1414 
para_0 = torch.randn([1, 864, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1415 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 864, 7, 7], dtype=torch.float32)])
# test_id: 1416 
para_0 = torch.randn([1, 864, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 864, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1417 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 864, 7, 7], dtype=torch.float32)])
# test_id: 1418 
para_0 = torch.randn([1, 896, 7, 7], dtype=torch.float32)
para_1 = torch.randn([896], dtype=torch.float32)
para_2 = torch.randn([896], dtype=torch.float32)
para_3 = torch.randn([896], dtype=torch.float32)
para_4 = torch.randn([896], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1419 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 896, 7, 7], dtype=torch.float32)])
# test_id: 1420 
para_0 = torch.randn([1, 896, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1421 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 896, 7, 7], dtype=torch.float32)])
# test_id: 1422 
para_0 = torch.randn([1, 896, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 896, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1423 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 896, 7, 7], dtype=torch.float32)])
# test_id: 1424 
para_0 = torch.randn([1, 928, 7, 7], dtype=torch.float32)
para_1 = torch.randn([928], dtype=torch.float32)
para_2 = torch.randn([928], dtype=torch.float32)
para_3 = torch.randn([928], dtype=torch.float32)
para_4 = torch.randn([928], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1425 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 928, 7, 7], dtype=torch.float32)])
# test_id: 1426 
para_0 = torch.randn([1, 928, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1427 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 928, 7, 7], dtype=torch.float32)])
# test_id: 1428 
para_0 = torch.randn([1, 928, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 928, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1429 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 928, 7, 7], dtype=torch.float32)])
# test_id: 1430 
para_0 = torch.randn([1, 960, 7, 7], dtype=torch.float32)
para_1 = torch.randn([960], dtype=torch.float32)
para_2 = torch.randn([960], dtype=torch.float32)
para_3 = torch.randn([960], dtype=torch.float32)
para_4 = torch.randn([960], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1431 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 960, 7, 7], dtype=torch.float32)])
# test_id: 1432 
para_0 = torch.randn([1, 960, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1433 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 960, 7, 7], dtype=torch.float32)])
# test_id: 1434 
para_0 = torch.randn([1, 960, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 960, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1435 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 960, 7, 7], dtype=torch.float32)])
# test_id: 1436 
para_0 = torch.randn([1, 992, 7, 7], dtype=torch.float32)
para_1 = torch.randn([992], dtype=torch.float32)
para_2 = torch.randn([992], dtype=torch.float32)
para_3 = torch.randn([992], dtype=torch.float32)
para_4 = torch.randn([992], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1437 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 992, 7, 7], dtype=torch.float32)])
# test_id: 1438 
para_0 = torch.randn([1, 992, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1439 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 992, 7, 7], dtype=torch.float32)])
# test_id: 1440 
para_0 = torch.randn([1, 992, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 992, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1441 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 992, 7, 7], dtype=torch.float32)])
# test_id: 1442 
para_0 = torch.randn([1, 1024, 7, 7], dtype=torch.float32)
para_1 = torch.randn([1024], dtype=torch.float32)
para_2 = torch.randn([1024], dtype=torch.float32)
para_3 = torch.randn([1024], dtype=torch.float32)
para_4 = torch.randn([1024], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1443 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([1, 1024, 7, 7], dtype=torch.float32)])
# test_id: 1444 
para_0 = torch.randn([1, 1024, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1445 
para_0 = torch.randn([1, 1024, 7, 7], dtype=torch.float32)
para_1 = (1, 1)
class adaptive_avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool2d(args[0], para_1,)
verify_model(adaptive_avg_pool2d().float().eval(), input_data=para_0)


# test_id: 1446 
para_0 = torch.randn([1, 1024], dtype=torch.float32)
para_1 = torch.randn([1000, 1024], dtype=torch.float32)
para_2 = torch.randn([1000], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 1447 
verify_model(torch.nn.Linear(1024,1000,).eval(), input_data=[torch.randn([1, 1024], dtype=torch.float32)])
# test_id: 1448 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(224), tensor(224)], dtype=torch.float32)])
# test_id: 1449 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 1450 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1451 
para_0 = torch.randn([tensor(1), tensor(64), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(64), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1452 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1453 
para_0 = torch.randn([tensor(1), tensor(128), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(128)], dtype=torch.float32)
para_2 = torch.randn([tensor(128)], dtype=torch.float32)
para_3 = torch.randn([tensor(128)], dtype=torch.float32)
para_4 = torch.randn([tensor(128)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1454 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1455 
para_0 = torch.randn([tensor(1), tensor(128), tensor(56), tensor(56)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1456 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1457 
para_0 = torch.randn([tensor(1), tensor(128), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(128), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1458 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1459 
para_0 = torch.randn([tensor(1), tensor(96), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(96)], dtype=torch.float32)
para_2 = torch.randn([tensor(96)], dtype=torch.float32)
para_3 = torch.randn([tensor(96)], dtype=torch.float32)
para_4 = torch.randn([tensor(96)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1460 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1461 
para_0 = torch.randn([tensor(1), tensor(96), tensor(56), tensor(56)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1462 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1463 
para_0 = torch.randn([tensor(1), tensor(96), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(96), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1464 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1465 
para_0 = torch.randn([tensor(1), tensor(128), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(128), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1466 
para_0 = torch.randn([tensor(1), tensor(160), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(160)], dtype=torch.float32)
para_2 = torch.randn([tensor(160)], dtype=torch.float32)
para_3 = torch.randn([tensor(160)], dtype=torch.float32)
para_4 = torch.randn([tensor(160)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1467 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(160), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1468 
para_0 = torch.randn([tensor(1), tensor(160), tensor(56), tensor(56)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1469 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(160), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1470 
para_0 = torch.randn([tensor(1), tensor(160), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(160), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1471 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(160), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1472 
para_0 = torch.randn([tensor(1), tensor(192), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(192)], dtype=torch.float32)
para_2 = torch.randn([tensor(192)], dtype=torch.float32)
para_3 = torch.randn([tensor(192)], dtype=torch.float32)
para_4 = torch.randn([tensor(192)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1473 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1474 
para_0 = torch.randn([tensor(1), tensor(192), tensor(56), tensor(56)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1475 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1476 
para_0 = torch.randn([tensor(1), tensor(192), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(192), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1477 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1478 
para_0 = torch.randn([tensor(1), tensor(224), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(224)], dtype=torch.float32)
para_2 = torch.randn([tensor(224)], dtype=torch.float32)
para_3 = torch.randn([tensor(224)], dtype=torch.float32)
para_4 = torch.randn([tensor(224)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1479 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(224), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1480 
para_0 = torch.randn([tensor(1), tensor(224), tensor(56), tensor(56)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1481 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(224), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1482 
para_0 = torch.randn([tensor(1), tensor(224), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(224), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1483 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(224), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1484 
para_0 = torch.randn([tensor(1), tensor(256), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(256)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
para_3 = torch.randn([tensor(256)], dtype=torch.float32)
para_4 = torch.randn([tensor(256)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1485 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1486 
para_0 = torch.randn([tensor(1), tensor(256), tensor(56), tensor(56)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1487 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1488 
para_0 = torch.randn([tensor(1), tensor(256), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1489 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1490 
para_0 = torch.randn([tensor(1), tensor(128), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = 2
para_2 = 2
para_3 = 0
para_4 = False
para_5 = True
para_6 = None
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 1491 
verify_model(torch.nn.AvgPool2d(kernel_size=2,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 1492 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1493 
para_0 = torch.randn([tensor(1), tensor(128), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(128), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1494 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1495 
para_0 = torch.randn([tensor(1), tensor(128), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(128), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1496 
para_0 = torch.randn([tensor(1), tensor(160), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(160)], dtype=torch.float32)
para_2 = torch.randn([tensor(160)], dtype=torch.float32)
para_3 = torch.randn([tensor(160)], dtype=torch.float32)
para_4 = torch.randn([tensor(160)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1497 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(160), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1498 
para_0 = torch.randn([tensor(1), tensor(160), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1499 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(160), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1500 
para_0 = torch.randn([tensor(1), tensor(160), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(160), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1501 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(160), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1502 
para_0 = torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(192)], dtype=torch.float32)
para_2 = torch.randn([tensor(192)], dtype=torch.float32)
para_3 = torch.randn([tensor(192)], dtype=torch.float32)
para_4 = torch.randn([tensor(192)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1503 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1504 
para_0 = torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1505 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1506 
para_0 = torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(192), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1507 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1508 
para_0 = torch.randn([tensor(1), tensor(224), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(224)], dtype=torch.float32)
para_2 = torch.randn([tensor(224)], dtype=torch.float32)
para_3 = torch.randn([tensor(224)], dtype=torch.float32)
para_4 = torch.randn([tensor(224)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1509 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(224), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1510 
para_0 = torch.randn([tensor(1), tensor(224), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1511 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(224), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1512 
para_0 = torch.randn([tensor(1), tensor(224), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(224), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1513 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(224), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1514 
para_0 = torch.randn([tensor(1), tensor(256), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(256)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
para_3 = torch.randn([tensor(256)], dtype=torch.float32)
para_4 = torch.randn([tensor(256)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1515 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1516 
para_0 = torch.randn([tensor(1), tensor(256), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1517 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1518 
para_0 = torch.randn([tensor(1), tensor(256), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1519 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1520 
para_0 = torch.randn([tensor(1), tensor(288), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(288)], dtype=torch.float32)
para_2 = torch.randn([tensor(288)], dtype=torch.float32)
para_3 = torch.randn([tensor(288)], dtype=torch.float32)
para_4 = torch.randn([tensor(288)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1521 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(288), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1522 
para_0 = torch.randn([tensor(1), tensor(288), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1523 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(288), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1524 
para_0 = torch.randn([tensor(1), tensor(288), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(288), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1525 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(288), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1526 
para_0 = torch.randn([tensor(1), tensor(320), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(320)], dtype=torch.float32)
para_2 = torch.randn([tensor(320)], dtype=torch.float32)
para_3 = torch.randn([tensor(320)], dtype=torch.float32)
para_4 = torch.randn([tensor(320)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1527 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(320), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1528 
para_0 = torch.randn([tensor(1), tensor(320), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1529 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(320), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1530 
para_0 = torch.randn([tensor(1), tensor(320), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(320), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1531 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(320), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1532 
para_0 = torch.randn([tensor(1), tensor(352), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(352)], dtype=torch.float32)
para_2 = torch.randn([tensor(352)], dtype=torch.float32)
para_3 = torch.randn([tensor(352)], dtype=torch.float32)
para_4 = torch.randn([tensor(352)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1533 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(352), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1534 
para_0 = torch.randn([tensor(1), tensor(352), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1535 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(352), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1536 
para_0 = torch.randn([tensor(1), tensor(352), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(352), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1537 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(352), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1538 
para_0 = torch.randn([tensor(1), tensor(384), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(384)], dtype=torch.float32)
para_2 = torch.randn([tensor(384)], dtype=torch.float32)
para_3 = torch.randn([tensor(384)], dtype=torch.float32)
para_4 = torch.randn([tensor(384)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1539 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(384), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1540 
para_0 = torch.randn([tensor(1), tensor(384), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1541 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(384), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1542 
para_0 = torch.randn([tensor(1), tensor(384), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(384), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1543 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(384), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1544 
para_0 = torch.randn([tensor(1), tensor(416), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(416)], dtype=torch.float32)
para_2 = torch.randn([tensor(416)], dtype=torch.float32)
para_3 = torch.randn([tensor(416)], dtype=torch.float32)
para_4 = torch.randn([tensor(416)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1545 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(416), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1546 
para_0 = torch.randn([tensor(1), tensor(416), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1547 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(416), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1548 
para_0 = torch.randn([tensor(1), tensor(416), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(416), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1549 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(416), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1550 
para_0 = torch.randn([tensor(1), tensor(448), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(448)], dtype=torch.float32)
para_2 = torch.randn([tensor(448)], dtype=torch.float32)
para_3 = torch.randn([tensor(448)], dtype=torch.float32)
para_4 = torch.randn([tensor(448)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1551 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(448), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1552 
para_0 = torch.randn([tensor(1), tensor(448), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1553 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(448), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1554 
para_0 = torch.randn([tensor(1), tensor(448), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(448), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1555 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(448), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1556 
para_0 = torch.randn([tensor(1), tensor(480), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(480)], dtype=torch.float32)
para_2 = torch.randn([tensor(480)], dtype=torch.float32)
para_3 = torch.randn([tensor(480)], dtype=torch.float32)
para_4 = torch.randn([tensor(480)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1557 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(480), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1558 
para_0 = torch.randn([tensor(1), tensor(480), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1559 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(480), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1560 
para_0 = torch.randn([tensor(1), tensor(480), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(480), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1561 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(480), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1562 
para_0 = torch.randn([tensor(1), tensor(512), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(512)], dtype=torch.float32)
para_2 = torch.randn([tensor(512)], dtype=torch.float32)
para_3 = torch.randn([tensor(512)], dtype=torch.float32)
para_4 = torch.randn([tensor(512)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1563 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1564 
para_0 = torch.randn([tensor(1), tensor(512), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1565 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1566 
para_0 = torch.randn([tensor(1), tensor(512), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(512), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1567 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1568 
para_0 = torch.randn([tensor(1), tensor(256), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = 2
para_2 = 2
para_3 = 0
para_4 = False
para_5 = True
para_6 = None
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 1569 
verify_model(torch.nn.AvgPool2d(kernel_size=2,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 1570 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1571 
para_0 = torch.randn([tensor(1), tensor(256), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1572 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1573 
para_0 = torch.randn([tensor(1), tensor(128), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128)], dtype=torch.float32)
para_2 = torch.randn([tensor(128)], dtype=torch.float32)
para_3 = torch.randn([tensor(128)], dtype=torch.float32)
para_4 = torch.randn([tensor(128)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1574 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1575 
para_0 = torch.randn([tensor(1), tensor(128), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1576 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1577 
para_0 = torch.randn([tensor(1), tensor(128), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(128), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1578 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1579 
para_0 = torch.randn([tensor(1), tensor(288), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(288)], dtype=torch.float32)
para_2 = torch.randn([tensor(288)], dtype=torch.float32)
para_3 = torch.randn([tensor(288)], dtype=torch.float32)
para_4 = torch.randn([tensor(288)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1580 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(288), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1581 
para_0 = torch.randn([tensor(1), tensor(288), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1582 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(288), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1583 
para_0 = torch.randn([tensor(1), tensor(288), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(288), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1584 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(288), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1585 
para_0 = torch.randn([tensor(1), tensor(320), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(320)], dtype=torch.float32)
para_2 = torch.randn([tensor(320)], dtype=torch.float32)
para_3 = torch.randn([tensor(320)], dtype=torch.float32)
para_4 = torch.randn([tensor(320)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1586 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(320), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1587 
para_0 = torch.randn([tensor(1), tensor(320), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1588 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(320), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1589 
para_0 = torch.randn([tensor(1), tensor(320), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(320), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1590 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(320), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1591 
para_0 = torch.randn([tensor(1), tensor(352), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(352)], dtype=torch.float32)
para_2 = torch.randn([tensor(352)], dtype=torch.float32)
para_3 = torch.randn([tensor(352)], dtype=torch.float32)
para_4 = torch.randn([tensor(352)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1592 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(352), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1593 
para_0 = torch.randn([tensor(1), tensor(352), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1594 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(352), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1595 
para_0 = torch.randn([tensor(1), tensor(352), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(352), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1596 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(352), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1597 
para_0 = torch.randn([tensor(1), tensor(384), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(384)], dtype=torch.float32)
para_2 = torch.randn([tensor(384)], dtype=torch.float32)
para_3 = torch.randn([tensor(384)], dtype=torch.float32)
para_4 = torch.randn([tensor(384)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1598 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(384), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1599 
para_0 = torch.randn([tensor(1), tensor(384), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1600 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(384), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1601 
para_0 = torch.randn([tensor(1), tensor(384), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(384), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1602 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(384), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1603 
para_0 = torch.randn([tensor(1), tensor(416), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(416)], dtype=torch.float32)
para_2 = torch.randn([tensor(416)], dtype=torch.float32)
para_3 = torch.randn([tensor(416)], dtype=torch.float32)
para_4 = torch.randn([tensor(416)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1604 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(416), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1605 
para_0 = torch.randn([tensor(1), tensor(416), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1606 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(416), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1607 
para_0 = torch.randn([tensor(1), tensor(416), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(416), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1608 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(416), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1609 
para_0 = torch.randn([tensor(1), tensor(448), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(448)], dtype=torch.float32)
para_2 = torch.randn([tensor(448)], dtype=torch.float32)
para_3 = torch.randn([tensor(448)], dtype=torch.float32)
para_4 = torch.randn([tensor(448)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1610 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(448), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1611 
para_0 = torch.randn([tensor(1), tensor(448), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1612 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(448), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1613 
para_0 = torch.randn([tensor(1), tensor(448), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(448), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1614 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(448), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1615 
para_0 = torch.randn([tensor(1), tensor(480), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(480)], dtype=torch.float32)
para_2 = torch.randn([tensor(480)], dtype=torch.float32)
para_3 = torch.randn([tensor(480)], dtype=torch.float32)
para_4 = torch.randn([tensor(480)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1616 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(480), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1617 
para_0 = torch.randn([tensor(1), tensor(480), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1618 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(480), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1619 
para_0 = torch.randn([tensor(1), tensor(480), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(480), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1620 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(480), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1621 
para_0 = torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(512)], dtype=torch.float32)
para_2 = torch.randn([tensor(512)], dtype=torch.float32)
para_3 = torch.randn([tensor(512)], dtype=torch.float32)
para_4 = torch.randn([tensor(512)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1622 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1623 
para_0 = torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1624 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1625 
para_0 = torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(512), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1626 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1627 
para_0 = torch.randn([tensor(1), tensor(544), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(544)], dtype=torch.float32)
para_2 = torch.randn([tensor(544)], dtype=torch.float32)
para_3 = torch.randn([tensor(544)], dtype=torch.float32)
para_4 = torch.randn([tensor(544)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1628 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(544), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1629 
para_0 = torch.randn([tensor(1), tensor(544), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1630 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(544), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1631 
para_0 = torch.randn([tensor(1), tensor(544), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(544), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1632 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(544), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1633 
para_0 = torch.randn([tensor(1), tensor(576), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(576)], dtype=torch.float32)
para_2 = torch.randn([tensor(576)], dtype=torch.float32)
para_3 = torch.randn([tensor(576)], dtype=torch.float32)
para_4 = torch.randn([tensor(576)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1634 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(576), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1635 
para_0 = torch.randn([tensor(1), tensor(576), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1636 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(576), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1637 
para_0 = torch.randn([tensor(1), tensor(576), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(576), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1638 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(576), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1639 
para_0 = torch.randn([tensor(1), tensor(608), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(608)], dtype=torch.float32)
para_2 = torch.randn([tensor(608)], dtype=torch.float32)
para_3 = torch.randn([tensor(608)], dtype=torch.float32)
para_4 = torch.randn([tensor(608)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1640 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(608), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1641 
para_0 = torch.randn([tensor(1), tensor(608), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1642 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(608), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1643 
para_0 = torch.randn([tensor(1), tensor(608), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(608), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1644 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(608), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1645 
para_0 = torch.randn([tensor(1), tensor(640), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(640)], dtype=torch.float32)
para_2 = torch.randn([tensor(640)], dtype=torch.float32)
para_3 = torch.randn([tensor(640)], dtype=torch.float32)
para_4 = torch.randn([tensor(640)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1646 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(640), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1647 
para_0 = torch.randn([tensor(1), tensor(640), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1648 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(640), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1649 
para_0 = torch.randn([tensor(1), tensor(640), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(640), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1650 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(640), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1651 
para_0 = torch.randn([tensor(1), tensor(672), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(672)], dtype=torch.float32)
para_2 = torch.randn([tensor(672)], dtype=torch.float32)
para_3 = torch.randn([tensor(672)], dtype=torch.float32)
para_4 = torch.randn([tensor(672)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1652 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(672), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1653 
para_0 = torch.randn([tensor(1), tensor(672), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1654 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(672), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1655 
para_0 = torch.randn([tensor(1), tensor(672), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(672), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1656 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(672), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1657 
para_0 = torch.randn([tensor(1), tensor(704), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(704)], dtype=torch.float32)
para_2 = torch.randn([tensor(704)], dtype=torch.float32)
para_3 = torch.randn([tensor(704)], dtype=torch.float32)
para_4 = torch.randn([tensor(704)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1658 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(704), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1659 
para_0 = torch.randn([tensor(1), tensor(704), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1660 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(704), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1661 
para_0 = torch.randn([tensor(1), tensor(704), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(704), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1662 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(704), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1663 
para_0 = torch.randn([tensor(1), tensor(736), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(736)], dtype=torch.float32)
para_2 = torch.randn([tensor(736)], dtype=torch.float32)
para_3 = torch.randn([tensor(736)], dtype=torch.float32)
para_4 = torch.randn([tensor(736)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1664 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(736), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1665 
para_0 = torch.randn([tensor(1), tensor(736), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1666 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(736), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1667 
para_0 = torch.randn([tensor(1), tensor(736), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(736), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1668 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(736), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1669 
para_0 = torch.randn([tensor(1), tensor(768), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(768)], dtype=torch.float32)
para_2 = torch.randn([tensor(768)], dtype=torch.float32)
para_3 = torch.randn([tensor(768)], dtype=torch.float32)
para_4 = torch.randn([tensor(768)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1670 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(768), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1671 
para_0 = torch.randn([tensor(1), tensor(768), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1672 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(768), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1673 
para_0 = torch.randn([tensor(1), tensor(768), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(768), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1674 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(768), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1675 
para_0 = torch.randn([tensor(1), tensor(800), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(800)], dtype=torch.float32)
para_2 = torch.randn([tensor(800)], dtype=torch.float32)
para_3 = torch.randn([tensor(800)], dtype=torch.float32)
para_4 = torch.randn([tensor(800)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1676 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(800), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1677 
para_0 = torch.randn([tensor(1), tensor(800), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1678 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(800), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1679 
para_0 = torch.randn([tensor(1), tensor(800), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(800), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1680 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(800), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1681 
para_0 = torch.randn([tensor(1), tensor(832), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(832)], dtype=torch.float32)
para_2 = torch.randn([tensor(832)], dtype=torch.float32)
para_3 = torch.randn([tensor(832)], dtype=torch.float32)
para_4 = torch.randn([tensor(832)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1682 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(832), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1683 
para_0 = torch.randn([tensor(1), tensor(832), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1684 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(832), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1685 
para_0 = torch.randn([tensor(1), tensor(832), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(832), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1686 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(832), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1687 
para_0 = torch.randn([tensor(1), tensor(864), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(864)], dtype=torch.float32)
para_2 = torch.randn([tensor(864)], dtype=torch.float32)
para_3 = torch.randn([tensor(864)], dtype=torch.float32)
para_4 = torch.randn([tensor(864)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1688 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(864), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1689 
para_0 = torch.randn([tensor(1), tensor(864), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1690 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(864), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1691 
para_0 = torch.randn([tensor(1), tensor(864), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(864), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1692 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(864), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1693 
para_0 = torch.randn([tensor(1), tensor(896), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(896)], dtype=torch.float32)
para_2 = torch.randn([tensor(896)], dtype=torch.float32)
para_3 = torch.randn([tensor(896)], dtype=torch.float32)
para_4 = torch.randn([tensor(896)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1694 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(896), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1695 
para_0 = torch.randn([tensor(1), tensor(896), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1696 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(896), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1697 
para_0 = torch.randn([tensor(1), tensor(896), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(896), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1698 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(896), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1699 
para_0 = torch.randn([tensor(1), tensor(928), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(928)], dtype=torch.float32)
para_2 = torch.randn([tensor(928)], dtype=torch.float32)
para_3 = torch.randn([tensor(928)], dtype=torch.float32)
para_4 = torch.randn([tensor(928)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1700 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(928), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1701 
para_0 = torch.randn([tensor(1), tensor(928), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1702 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(928), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1703 
para_0 = torch.randn([tensor(1), tensor(928), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(928), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1704 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(928), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1705 
para_0 = torch.randn([tensor(1), tensor(960), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(960)], dtype=torch.float32)
para_2 = torch.randn([tensor(960)], dtype=torch.float32)
para_3 = torch.randn([tensor(960)], dtype=torch.float32)
para_4 = torch.randn([tensor(960)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1706 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(960), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1707 
para_0 = torch.randn([tensor(1), tensor(960), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1708 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(960), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1709 
para_0 = torch.randn([tensor(1), tensor(960), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(960), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1710 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(960), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1711 
para_0 = torch.randn([tensor(1), tensor(992), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(992)], dtype=torch.float32)
para_2 = torch.randn([tensor(992)], dtype=torch.float32)
para_3 = torch.randn([tensor(992)], dtype=torch.float32)
para_4 = torch.randn([tensor(992)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1712 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(992), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1713 
para_0 = torch.randn([tensor(1), tensor(992), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1714 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(992), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1715 
para_0 = torch.randn([tensor(1), tensor(992), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(992), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1716 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(992), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1717 
para_0 = torch.randn([tensor(1), tensor(1024), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(1024)], dtype=torch.float32)
para_2 = torch.randn([tensor(1024)], dtype=torch.float32)
para_3 = torch.randn([tensor(1024)], dtype=torch.float32)
para_4 = torch.randn([tensor(1024)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1718 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(1024), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1719 
para_0 = torch.randn([tensor(1), tensor(1024), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1720 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(1024), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1721 
para_0 = torch.randn([tensor(1), tensor(1024), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(512), tensor(1024), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1722 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(1024), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1723 
para_0 = torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = 2
para_2 = 2
para_3 = 0
para_4 = False
para_5 = True
para_6 = None
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 1724 
verify_model(torch.nn.AvgPool2d(kernel_size=2,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 1725 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1726 
para_0 = torch.randn([tensor(1), tensor(512), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(512), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1727 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1728 
para_0 = torch.randn([tensor(1), tensor(128), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128)], dtype=torch.float32)
para_2 = torch.randn([tensor(128)], dtype=torch.float32)
para_3 = torch.randn([tensor(128)], dtype=torch.float32)
para_4 = torch.randn([tensor(128)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1729 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1730 
para_0 = torch.randn([tensor(1), tensor(128), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1731 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1732 
para_0 = torch.randn([tensor(1), tensor(128), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(128), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1733 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1734 
para_0 = torch.randn([tensor(1), tensor(544), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(544)], dtype=torch.float32)
para_2 = torch.randn([tensor(544)], dtype=torch.float32)
para_3 = torch.randn([tensor(544)], dtype=torch.float32)
para_4 = torch.randn([tensor(544)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1735 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(544), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1736 
para_0 = torch.randn([tensor(1), tensor(544), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1737 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(544), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1738 
para_0 = torch.randn([tensor(1), tensor(544), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(544), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1739 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(544), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1740 
para_0 = torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(576)], dtype=torch.float32)
para_2 = torch.randn([tensor(576)], dtype=torch.float32)
para_3 = torch.randn([tensor(576)], dtype=torch.float32)
para_4 = torch.randn([tensor(576)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1741 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1742 
para_0 = torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1743 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1744 
para_0 = torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(576), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1745 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1746 
para_0 = torch.randn([tensor(1), tensor(608), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(608)], dtype=torch.float32)
para_2 = torch.randn([tensor(608)], dtype=torch.float32)
para_3 = torch.randn([tensor(608)], dtype=torch.float32)
para_4 = torch.randn([tensor(608)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1747 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(608), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1748 
para_0 = torch.randn([tensor(1), tensor(608), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1749 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(608), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1750 
para_0 = torch.randn([tensor(1), tensor(608), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(608), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1751 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(608), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1752 
para_0 = torch.randn([tensor(1), tensor(640), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(640)], dtype=torch.float32)
para_2 = torch.randn([tensor(640)], dtype=torch.float32)
para_3 = torch.randn([tensor(640)], dtype=torch.float32)
para_4 = torch.randn([tensor(640)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1753 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(640), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1754 
para_0 = torch.randn([tensor(1), tensor(640), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1755 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(640), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1756 
para_0 = torch.randn([tensor(1), tensor(640), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(640), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1757 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(640), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1758 
para_0 = torch.randn([tensor(1), tensor(672), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(672)], dtype=torch.float32)
para_2 = torch.randn([tensor(672)], dtype=torch.float32)
para_3 = torch.randn([tensor(672)], dtype=torch.float32)
para_4 = torch.randn([tensor(672)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1759 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(672), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1760 
para_0 = torch.randn([tensor(1), tensor(672), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1761 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(672), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1762 
para_0 = torch.randn([tensor(1), tensor(672), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(672), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1763 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(672), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1764 
para_0 = torch.randn([tensor(1), tensor(704), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(704)], dtype=torch.float32)
para_2 = torch.randn([tensor(704)], dtype=torch.float32)
para_3 = torch.randn([tensor(704)], dtype=torch.float32)
para_4 = torch.randn([tensor(704)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1765 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(704), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1766 
para_0 = torch.randn([tensor(1), tensor(704), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1767 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(704), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1768 
para_0 = torch.randn([tensor(1), tensor(704), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(704), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1769 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(704), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1770 
para_0 = torch.randn([tensor(1), tensor(736), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(736)], dtype=torch.float32)
para_2 = torch.randn([tensor(736)], dtype=torch.float32)
para_3 = torch.randn([tensor(736)], dtype=torch.float32)
para_4 = torch.randn([tensor(736)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1771 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(736), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1772 
para_0 = torch.randn([tensor(1), tensor(736), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1773 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(736), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1774 
para_0 = torch.randn([tensor(1), tensor(736), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(736), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1775 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(736), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1776 
para_0 = torch.randn([tensor(1), tensor(768), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(768)], dtype=torch.float32)
para_2 = torch.randn([tensor(768)], dtype=torch.float32)
para_3 = torch.randn([tensor(768)], dtype=torch.float32)
para_4 = torch.randn([tensor(768)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1777 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(768), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1778 
para_0 = torch.randn([tensor(1), tensor(768), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1779 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(768), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1780 
para_0 = torch.randn([tensor(1), tensor(768), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(768), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1781 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(768), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1782 
para_0 = torch.randn([tensor(1), tensor(800), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(800)], dtype=torch.float32)
para_2 = torch.randn([tensor(800)], dtype=torch.float32)
para_3 = torch.randn([tensor(800)], dtype=torch.float32)
para_4 = torch.randn([tensor(800)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1783 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(800), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1784 
para_0 = torch.randn([tensor(1), tensor(800), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1785 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(800), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1786 
para_0 = torch.randn([tensor(1), tensor(800), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(800), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1787 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(800), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1788 
para_0 = torch.randn([tensor(1), tensor(832), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(832)], dtype=torch.float32)
para_2 = torch.randn([tensor(832)], dtype=torch.float32)
para_3 = torch.randn([tensor(832)], dtype=torch.float32)
para_4 = torch.randn([tensor(832)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1789 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(832), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1790 
para_0 = torch.randn([tensor(1), tensor(832), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1791 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(832), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1792 
para_0 = torch.randn([tensor(1), tensor(832), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(832), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1793 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(832), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1794 
para_0 = torch.randn([tensor(1), tensor(864), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(864)], dtype=torch.float32)
para_2 = torch.randn([tensor(864)], dtype=torch.float32)
para_3 = torch.randn([tensor(864)], dtype=torch.float32)
para_4 = torch.randn([tensor(864)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1795 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(864), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1796 
para_0 = torch.randn([tensor(1), tensor(864), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1797 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(864), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1798 
para_0 = torch.randn([tensor(1), tensor(864), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(864), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1799 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(864), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1800 
para_0 = torch.randn([tensor(1), tensor(896), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(896)], dtype=torch.float32)
para_2 = torch.randn([tensor(896)], dtype=torch.float32)
para_3 = torch.randn([tensor(896)], dtype=torch.float32)
para_4 = torch.randn([tensor(896)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1801 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(896), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1802 
para_0 = torch.randn([tensor(1), tensor(896), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1803 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(896), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1804 
para_0 = torch.randn([tensor(1), tensor(896), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(896), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1805 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(896), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1806 
para_0 = torch.randn([tensor(1), tensor(928), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(928)], dtype=torch.float32)
para_2 = torch.randn([tensor(928)], dtype=torch.float32)
para_3 = torch.randn([tensor(928)], dtype=torch.float32)
para_4 = torch.randn([tensor(928)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1807 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(928), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1808 
para_0 = torch.randn([tensor(1), tensor(928), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1809 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(928), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1810 
para_0 = torch.randn([tensor(1), tensor(928), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(928), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1811 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(928), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1812 
para_0 = torch.randn([tensor(1), tensor(960), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(960)], dtype=torch.float32)
para_2 = torch.randn([tensor(960)], dtype=torch.float32)
para_3 = torch.randn([tensor(960)], dtype=torch.float32)
para_4 = torch.randn([tensor(960)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1813 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(960), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1814 
para_0 = torch.randn([tensor(1), tensor(960), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1815 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(960), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1816 
para_0 = torch.randn([tensor(1), tensor(960), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(960), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1817 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(960), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1818 
para_0 = torch.randn([tensor(1), tensor(992), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(992)], dtype=torch.float32)
para_2 = torch.randn([tensor(992)], dtype=torch.float32)
para_3 = torch.randn([tensor(992)], dtype=torch.float32)
para_4 = torch.randn([tensor(992)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1819 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(992), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1820 
para_0 = torch.randn([tensor(1), tensor(992), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1821 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(992), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1822 
para_0 = torch.randn([tensor(1), tensor(992), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(992), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1823 
verify_model(torch.nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(992), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1824 
para_0 = torch.randn([tensor(1), tensor(1024), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(1024)], dtype=torch.float32)
para_2 = torch.randn([tensor(1024)], dtype=torch.float32)
para_3 = torch.randn([tensor(1024)], dtype=torch.float32)
para_4 = torch.randn([tensor(1024)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1825 
verify_model(torch.nn.BatchNorm2d(1024,).eval(), input_data=[torch.randn([tensor(1), tensor(1024), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 1826 
para_0 = torch.randn([tensor(1), tensor(1024), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1827 
para_0 = torch.randn([tensor(1), tensor(1024), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = (1, 1)
class adaptive_avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool2d(args[0], para_1,)
verify_model(adaptive_avg_pool2d().float().eval(), input_data=para_0)


# test_id: 1828 
para_0 = torch.randn([tensor(1), tensor(1024)], dtype=torch.float32)
para_1 = torch.randn([tensor(1000), tensor(1024)], dtype=torch.float32)
para_2 = torch.randn([tensor(1000)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 1829 
verify_model(torch.nn.Linear(1024,1000,).eval(), input_data=[torch.randn([tensor(1), tensor(1024)], dtype=torch.float32)])
# test_id: 1830 
para_0 = torch.randn([1, 3, 299, 299], dtype=torch.float32)
para_1 = torch.randn([32, 3, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1831 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 3, 299, 299], dtype=torch.float32)])
# test_id: 1832 
para_0 = torch.randn([1, 32, 149, 149], dtype=torch.float32)
para_1 = torch.randn([32], dtype=torch.float32)
para_2 = torch.randn([32], dtype=torch.float32)
para_3 = torch.randn([32], dtype=torch.float32)
para_4 = torch.randn([32], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1833 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 32, 149, 149], dtype=torch.float32)])
# test_id: 1834 
para_0 = torch.randn([1, 32, 149, 149], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1835 
para_0 = torch.randn([1, 32, 149, 149], dtype=torch.float32)
para_1 = torch.randn([32, 32, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1836 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 32, 149, 149], dtype=torch.float32)])
# test_id: 1837 
para_0 = torch.randn([1, 32, 147, 147], dtype=torch.float32)
para_1 = torch.randn([32], dtype=torch.float32)
para_2 = torch.randn([32], dtype=torch.float32)
para_3 = torch.randn([32], dtype=torch.float32)
para_4 = torch.randn([32], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1838 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 32, 147, 147], dtype=torch.float32)])
# test_id: 1839 
para_0 = torch.randn([1, 32, 147, 147], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1840 
para_0 = torch.randn([1, 32, 147, 147], dtype=torch.float32)
para_1 = torch.randn([64, 32, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1841 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 32, 147, 147], dtype=torch.float32)])
# test_id: 1842 
para_0 = torch.randn([1, 64, 147, 147], dtype=torch.float32)
para_1 = torch.randn([64], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = torch.randn([64], dtype=torch.float32)
para_4 = torch.randn([64], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1843 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 64, 147, 147], dtype=torch.float32)])
# test_id: 1844 
para_0 = torch.randn([1, 64, 147, 147], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1845 
para_0 = torch.randn([1, 64, 147, 147], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 1846 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,).eval(), input_data=[torch.randn([1, 64, 147, 147], dtype=torch.float32)])
# test_id: 1847 
para_0 = torch.randn([1, 64, 73, 73], dtype=torch.float32)
para_1 = torch.randn([80, 64, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1848 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 64, 73, 73], dtype=torch.float32)])
# test_id: 1849 
para_0 = torch.randn([1, 80, 73, 73], dtype=torch.float32)
para_1 = torch.randn([80], dtype=torch.float32)
para_2 = torch.randn([80], dtype=torch.float32)
para_3 = torch.randn([80], dtype=torch.float32)
para_4 = torch.randn([80], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1850 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 80, 73, 73], dtype=torch.float32)])
# test_id: 1851 
para_0 = torch.randn([1, 80, 73, 73], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1852 
para_0 = torch.randn([1, 80, 73, 73], dtype=torch.float32)
para_1 = torch.randn([192, 80, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1853 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 80, 73, 73], dtype=torch.float32)])
# test_id: 1854 
para_0 = torch.randn([1, 192, 71, 71], dtype=torch.float32)
para_1 = torch.randn([192], dtype=torch.float32)
para_2 = torch.randn([192], dtype=torch.float32)
para_3 = torch.randn([192], dtype=torch.float32)
para_4 = torch.randn([192], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1855 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 192, 71, 71], dtype=torch.float32)])
# test_id: 1856 
para_0 = torch.randn([1, 192, 71, 71], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1857 
para_0 = torch.randn([1, 192, 71, 71], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 1858 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,).eval(), input_data=[torch.randn([1, 192, 71, 71], dtype=torch.float32)])
# test_id: 1859 
para_0 = torch.randn([1, 192, 35, 35], dtype=torch.float32)
para_1 = torch.randn([64, 192, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1860 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 192, 35, 35], dtype=torch.float32)])
# test_id: 1861 
para_0 = torch.randn([1, 64, 35, 35], dtype=torch.float32)
para_1 = torch.randn([64], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = torch.randn([64], dtype=torch.float32)
para_4 = torch.randn([64], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1862 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 64, 35, 35], dtype=torch.float32)])
# test_id: 1863 
para_0 = torch.randn([1, 64, 35, 35], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1864 
para_0 = torch.randn([1, 192, 35, 35], dtype=torch.float32)
para_1 = torch.randn([48, 192, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1865 
para_0 = torch.randn([1, 48, 35, 35], dtype=torch.float32)
para_1 = torch.randn([48], dtype=torch.float32)
para_2 = torch.randn([48], dtype=torch.float32)
para_3 = torch.randn([48], dtype=torch.float32)
para_4 = torch.randn([48], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1866 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 48, 35, 35], dtype=torch.float32)])
# test_id: 1867 
para_0 = torch.randn([1, 48, 35, 35], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1868 
para_0 = torch.randn([1, 48, 35, 35], dtype=torch.float32)
para_1 = torch.randn([64, 48, 5, 5], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (2, 2)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1869 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 48, 35, 35], dtype=torch.float32)])
# test_id: 1870 
para_0 = torch.randn([1, 64, 35, 35], dtype=torch.float32)
para_1 = torch.randn([96, 64, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1871 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 64, 35, 35], dtype=torch.float32)])
# test_id: 1872 
para_0 = torch.randn([1, 96, 35, 35], dtype=torch.float32)
para_1 = torch.randn([96], dtype=torch.float32)
para_2 = torch.randn([96], dtype=torch.float32)
para_3 = torch.randn([96], dtype=torch.float32)
para_4 = torch.randn([96], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1873 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 96, 35, 35], dtype=torch.float32)])
# test_id: 1874 
para_0 = torch.randn([1, 96, 35, 35], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1875 
para_0 = torch.randn([1, 96, 35, 35], dtype=torch.float32)
para_1 = torch.randn([96, 96, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1876 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 96, 35, 35], dtype=torch.float32)])
# test_id: 1877 
para_0 = torch.randn([1, 192, 35, 35], dtype=torch.float32)
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], kernel_size=3,stride=1,padding=1,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 1878 
para_0 = torch.randn([1, 192, 35, 35], dtype=torch.float32)
para_1 = torch.randn([32, 192, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1879 
para_0 = torch.randn([1, 32, 35, 35], dtype=torch.float32)
para_1 = torch.randn([32], dtype=torch.float32)
para_2 = torch.randn([32], dtype=torch.float32)
para_3 = torch.randn([32], dtype=torch.float32)
para_4 = torch.randn([32], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1880 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 32, 35, 35], dtype=torch.float32)])
# test_id: 1881 
para_0 = torch.randn([1, 32, 35, 35], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1882 
para_0 = torch.randn([1, 256, 35, 35], dtype=torch.float32)
para_1 = torch.randn([64, 256, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1883 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 256, 35, 35], dtype=torch.float32)])
# test_id: 1884 
para_0 = torch.randn([1, 256, 35, 35], dtype=torch.float32)
para_1 = torch.randn([48, 256, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1885 
para_0 = torch.randn([1, 256, 35, 35], dtype=torch.float32)
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], kernel_size=3,stride=1,padding=1,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 1886 
para_0 = torch.randn([1, 288, 35, 35], dtype=torch.float32)
para_1 = torch.randn([64, 288, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1887 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 288, 35, 35], dtype=torch.float32)])
# test_id: 1888 
para_0 = torch.randn([1, 288, 35, 35], dtype=torch.float32)
para_1 = torch.randn([48, 288, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1889 
para_0 = torch.randn([1, 288, 35, 35], dtype=torch.float32)
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], kernel_size=3,stride=1,padding=1,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 1890 
para_0 = torch.randn([1, 288, 35, 35], dtype=torch.float32)
para_1 = torch.randn([384, 288, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1891 
para_0 = torch.randn([1, 384, 17, 17], dtype=torch.float32)
para_1 = torch.randn([384], dtype=torch.float32)
para_2 = torch.randn([384], dtype=torch.float32)
para_3 = torch.randn([384], dtype=torch.float32)
para_4 = torch.randn([384], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1892 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 384, 17, 17], dtype=torch.float32)])
# test_id: 1893 
para_0 = torch.randn([1, 384, 17, 17], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1894 
para_0 = torch.randn([1, 96, 35, 35], dtype=torch.float32)
para_1 = torch.randn([96, 96, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1895 
para_0 = torch.randn([1, 96, 17, 17], dtype=torch.float32)
para_1 = torch.randn([96], dtype=torch.float32)
para_2 = torch.randn([96], dtype=torch.float32)
para_3 = torch.randn([96], dtype=torch.float32)
para_4 = torch.randn([96], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1896 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 96, 17, 17], dtype=torch.float32)])
# test_id: 1897 
para_0 = torch.randn([1, 96, 17, 17], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1898 
para_0 = torch.randn([1, 288, 35, 35], dtype=torch.float32)
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], kernel_size=3,stride=2,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 1899 
para_0 = torch.randn([1, 768, 17, 17], dtype=torch.float32)
para_1 = torch.randn([192, 768, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1900 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 768, 17, 17], dtype=torch.float32)])
# test_id: 1901 
para_0 = torch.randn([1, 192, 17, 17], dtype=torch.float32)
para_1 = torch.randn([192], dtype=torch.float32)
para_2 = torch.randn([192], dtype=torch.float32)
para_3 = torch.randn([192], dtype=torch.float32)
para_4 = torch.randn([192], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1902 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 192, 17, 17], dtype=torch.float32)])
# test_id: 1903 
para_0 = torch.randn([1, 192, 17, 17], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1904 
para_0 = torch.randn([1, 768, 17, 17], dtype=torch.float32)
para_1 = torch.randn([128, 768, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1905 
para_0 = torch.randn([1, 128, 17, 17], dtype=torch.float32)
para_1 = torch.randn([128], dtype=torch.float32)
para_2 = torch.randn([128], dtype=torch.float32)
para_3 = torch.randn([128], dtype=torch.float32)
para_4 = torch.randn([128], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1906 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 128, 17, 17], dtype=torch.float32)])
# test_id: 1907 
para_0 = torch.randn([1, 128, 17, 17], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1908 
para_0 = torch.randn([1, 128, 17, 17], dtype=torch.float32)
para_1 = torch.randn([128, 128, 1, 7], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 3)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1909 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 128, 17, 17], dtype=torch.float32)])
# test_id: 1910 
para_0 = torch.randn([1, 128, 17, 17], dtype=torch.float32)
para_1 = torch.randn([192, 128, 7, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (3, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1911 
para_0 = torch.randn([1, 128, 17, 17], dtype=torch.float32)
para_1 = torch.randn([128, 128, 7, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (3, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1912 
para_0 = torch.randn([1, 128, 17, 17], dtype=torch.float32)
para_1 = torch.randn([192, 128, 1, 7], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 3)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1913 
para_0 = torch.randn([1, 768, 17, 17], dtype=torch.float32)
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], kernel_size=3,stride=1,padding=1,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 1914 
para_0 = torch.randn([1, 768, 17, 17], dtype=torch.float32)
para_1 = torch.randn([160, 768, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1915 
para_0 = torch.randn([1, 160, 17, 17], dtype=torch.float32)
para_1 = torch.randn([160], dtype=torch.float32)
para_2 = torch.randn([160], dtype=torch.float32)
para_3 = torch.randn([160], dtype=torch.float32)
para_4 = torch.randn([160], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1916 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 160, 17, 17], dtype=torch.float32)])
# test_id: 1917 
para_0 = torch.randn([1, 160, 17, 17], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1918 
para_0 = torch.randn([1, 160, 17, 17], dtype=torch.float32)
para_1 = torch.randn([160, 160, 1, 7], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 3)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1919 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 160, 17, 17], dtype=torch.float32)])
# test_id: 1920 
para_0 = torch.randn([1, 160, 17, 17], dtype=torch.float32)
para_1 = torch.randn([192, 160, 7, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (3, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1921 
para_0 = torch.randn([1, 160, 17, 17], dtype=torch.float32)
para_1 = torch.randn([160, 160, 7, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (3, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1922 
para_0 = torch.randn([1, 160, 17, 17], dtype=torch.float32)
para_1 = torch.randn([192, 160, 1, 7], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 3)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1923 
para_0 = torch.randn([1, 192, 17, 17], dtype=torch.float32)
para_1 = torch.randn([192, 192, 1, 7], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 3)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1924 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 192, 17, 17], dtype=torch.float32)])
# test_id: 1925 
para_0 = torch.randn([1, 192, 17, 17], dtype=torch.float32)
para_1 = torch.randn([192, 192, 7, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (3, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1926 
para_0 = torch.randn([1, 192, 17, 17], dtype=torch.float32)
para_1 = torch.randn([320, 192, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1927 
para_0 = torch.randn([1, 320, 8, 8], dtype=torch.float32)
para_1 = torch.randn([320], dtype=torch.float32)
para_2 = torch.randn([320], dtype=torch.float32)
para_3 = torch.randn([320], dtype=torch.float32)
para_4 = torch.randn([320], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1928 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 320, 8, 8], dtype=torch.float32)])
# test_id: 1929 
para_0 = torch.randn([1, 320, 8, 8], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1930 
para_0 = torch.randn([1, 192, 17, 17], dtype=torch.float32)
para_1 = torch.randn([192, 192, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1931 
para_0 = torch.randn([1, 192, 8, 8], dtype=torch.float32)
para_1 = torch.randn([192], dtype=torch.float32)
para_2 = torch.randn([192], dtype=torch.float32)
para_3 = torch.randn([192], dtype=torch.float32)
para_4 = torch.randn([192], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1932 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 192, 8, 8], dtype=torch.float32)])
# test_id: 1933 
para_0 = torch.randn([1, 192, 8, 8], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1934 
para_0 = torch.randn([1, 768, 17, 17], dtype=torch.float32)
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], kernel_size=3,stride=2,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 1935 
para_0 = torch.randn([1, 1280, 8, 8], dtype=torch.float32)
para_1 = torch.randn([320, 1280, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1936 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 1280, 8, 8], dtype=torch.float32)])
# test_id: 1937 
para_0 = torch.randn([1, 1280, 8, 8], dtype=torch.float32)
para_1 = torch.randn([384, 1280, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1938 
para_0 = torch.randn([1, 384, 8, 8], dtype=torch.float32)
para_1 = torch.randn([384], dtype=torch.float32)
para_2 = torch.randn([384], dtype=torch.float32)
para_3 = torch.randn([384], dtype=torch.float32)
para_4 = torch.randn([384], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1939 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 384, 8, 8], dtype=torch.float32)])
# test_id: 1940 
para_0 = torch.randn([1, 384, 8, 8], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1941 
para_0 = torch.randn([1, 384, 8, 8], dtype=torch.float32)
para_1 = torch.randn([384, 384, 1, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1942 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 384, 8, 8], dtype=torch.float32)])
# test_id: 1943 
para_0 = torch.randn([1, 384, 8, 8], dtype=torch.float32)
para_1 = torch.randn([384, 384, 3, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1944 
para_0 = torch.randn([1, 1280, 8, 8], dtype=torch.float32)
para_1 = torch.randn([448, 1280, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1945 
para_0 = torch.randn([1, 448, 8, 8], dtype=torch.float32)
para_1 = torch.randn([448], dtype=torch.float32)
para_2 = torch.randn([448], dtype=torch.float32)
para_3 = torch.randn([448], dtype=torch.float32)
para_4 = torch.randn([448], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1946 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([1, 448, 8, 8], dtype=torch.float32)])
# test_id: 1947 
para_0 = torch.randn([1, 448, 8, 8], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1948 
para_0 = torch.randn([1, 448, 8, 8], dtype=torch.float32)
para_1 = torch.randn([384, 448, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1949 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 448, 8, 8], dtype=torch.float32)])
# test_id: 1950 
para_0 = torch.randn([1, 1280, 8, 8], dtype=torch.float32)
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], kernel_size=3,stride=1,padding=1,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 1951 
para_0 = torch.randn([1, 1280, 8, 8], dtype=torch.float32)
para_1 = torch.randn([192, 1280, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1952 
para_0 = torch.randn([1, 2048, 8, 8], dtype=torch.float32)
para_1 = torch.randn([320, 2048, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1953 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 2048, 8, 8], dtype=torch.float32)])
# test_id: 1954 
para_0 = torch.randn([1, 2048, 8, 8], dtype=torch.float32)
para_1 = torch.randn([384, 2048, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1955 
para_0 = torch.randn([1, 2048, 8, 8], dtype=torch.float32)
para_1 = torch.randn([448, 2048, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1956 
para_0 = torch.randn([1, 2048, 8, 8], dtype=torch.float32)
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], kernel_size=3,stride=1,padding=1,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 1957 
para_0 = torch.randn([1, 2048, 8, 8], dtype=torch.float32)
para_1 = torch.randn([192, 2048, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1958 
para_0 = torch.randn([1, 2048, 8, 8], dtype=torch.float32)
para_1 = (1, 1)
class adaptive_avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool2d(args[0], para_1,)
verify_model(adaptive_avg_pool2d().float().eval(), input_data=para_0)


# test_id: 1959 
verify_model(torch.nn.AdaptiveAvgPool2d((1, 1),).eval(), input_data=[torch.randn([1, 2048, 8, 8], dtype=torch.float32)])
# test_id: 1960 
para_0 = torch.randn([1, 2048, 1, 1], dtype=torch.float32)
para_1 = 0.5
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 1961 
verify_model(torch.nn.Dropout().eval(), input_data=[torch.randn([1, 2048, 1, 1], dtype=torch.float32)])
# test_id: 1962 
para_0 = torch.randn([1, 2048], dtype=torch.float32)
para_1 = torch.randn([1000, 2048], dtype=torch.float32)
para_2 = torch.randn([1000], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 1963 
verify_model(torch.nn.Linear(2048,1000,).eval(), input_data=[torch.randn([1, 2048], dtype=torch.float32)])
# test_id: 1964 
para_0 = torch.randn([tensor(1), tensor(3), tensor(299), tensor(299)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1965 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(299), tensor(299)], dtype=torch.float32)])
# test_id: 1966 
para_0 = torch.randn([tensor(1), tensor(32), tensor(149), tensor(149)], dtype=torch.float32)
para_1 = torch.randn([tensor(32)], dtype=torch.float32)
para_2 = torch.randn([tensor(32)], dtype=torch.float32)
para_3 = torch.randn([tensor(32)], dtype=torch.float32)
para_4 = torch.randn([tensor(32)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1967 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(149), tensor(149)], dtype=torch.float32)])
# test_id: 1968 
para_0 = torch.randn([tensor(1), tensor(32), tensor(149), tensor(149)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1969 
para_0 = torch.randn([tensor(1), tensor(32), tensor(149), tensor(149)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(32), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1970 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(149), tensor(149)], dtype=torch.float32)])
# test_id: 1971 
para_0 = torch.randn([tensor(1), tensor(32), tensor(147), tensor(147)], dtype=torch.float32)
para_1 = torch.randn([tensor(32)], dtype=torch.float32)
para_2 = torch.randn([tensor(32)], dtype=torch.float32)
para_3 = torch.randn([tensor(32)], dtype=torch.float32)
para_4 = torch.randn([tensor(32)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1972 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(147), tensor(147)], dtype=torch.float32)])
# test_id: 1973 
para_0 = torch.randn([tensor(1), tensor(32), tensor(147), tensor(147)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1974 
para_0 = torch.randn([tensor(1), tensor(32), tensor(147), tensor(147)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(32), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1975 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(147), tensor(147)], dtype=torch.float32)])
# test_id: 1976 
para_0 = torch.randn([tensor(1), tensor(64), tensor(147), tensor(147)], dtype=torch.float32)
para_1 = torch.randn([tensor(64)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = torch.randn([tensor(64)], dtype=torch.float32)
para_4 = torch.randn([tensor(64)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1977 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(147), tensor(147)], dtype=torch.float32)])
# test_id: 1978 
para_0 = torch.randn([tensor(1), tensor(64), tensor(147), tensor(147)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1979 
para_0 = torch.randn([tensor(1), tensor(64), tensor(147), tensor(147)], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 1980 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(147), tensor(147)], dtype=torch.float32)])
# test_id: 1981 
para_0 = torch.randn([tensor(1), tensor(64), tensor(73), tensor(73)], dtype=torch.float32)
para_1 = torch.randn([tensor(80), tensor(64), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1982 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(73), tensor(73)], dtype=torch.float32)])
# test_id: 1983 
para_0 = torch.randn([tensor(1), tensor(80), tensor(73), tensor(73)], dtype=torch.float32)
para_1 = torch.randn([tensor(80)], dtype=torch.float32)
para_2 = torch.randn([tensor(80)], dtype=torch.float32)
para_3 = torch.randn([tensor(80)], dtype=torch.float32)
para_4 = torch.randn([tensor(80)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1984 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(80), tensor(73), tensor(73)], dtype=torch.float32)])
# test_id: 1985 
para_0 = torch.randn([tensor(1), tensor(80), tensor(73), tensor(73)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1986 
para_0 = torch.randn([tensor(1), tensor(80), tensor(73), tensor(73)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(80), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1987 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(80), tensor(73), tensor(73)], dtype=torch.float32)])
# test_id: 1988 
para_0 = torch.randn([tensor(1), tensor(192), tensor(71), tensor(71)], dtype=torch.float32)
para_1 = torch.randn([tensor(192)], dtype=torch.float32)
para_2 = torch.randn([tensor(192)], dtype=torch.float32)
para_3 = torch.randn([tensor(192)], dtype=torch.float32)
para_4 = torch.randn([tensor(192)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1989 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(71), tensor(71)], dtype=torch.float32)])
# test_id: 1990 
para_0 = torch.randn([tensor(1), tensor(192), tensor(71), tensor(71)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1991 
para_0 = torch.randn([tensor(1), tensor(192), tensor(71), tensor(71)], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = False
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 1992 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(71), tensor(71)], dtype=torch.float32)])
# test_id: 1993 
para_0 = torch.randn([tensor(1), tensor(192), tensor(35), tensor(35)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(192), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1994 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(35), tensor(35)], dtype=torch.float32)])
# test_id: 1995 
para_0 = torch.randn([tensor(1), tensor(64), tensor(35), tensor(35)], dtype=torch.float32)
para_1 = torch.randn([tensor(64)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = torch.randn([tensor(64)], dtype=torch.float32)
para_4 = torch.randn([tensor(64)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 1996 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(35), tensor(35)], dtype=torch.float32)])
# test_id: 1997 
para_0 = torch.randn([tensor(1), tensor(64), tensor(35), tensor(35)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 1998 
para_0 = torch.randn([tensor(1), tensor(192), tensor(35), tensor(35)], dtype=torch.float32)
para_1 = torch.randn([tensor(48), tensor(192), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 1999 
para_0 = torch.randn([tensor(1), tensor(48), tensor(35), tensor(35)], dtype=torch.float32)
para_1 = torch.randn([tensor(48)], dtype=torch.float32)
para_2 = torch.randn([tensor(48)], dtype=torch.float32)
para_3 = torch.randn([tensor(48)], dtype=torch.float32)
para_4 = torch.randn([tensor(48)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2000 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(35), tensor(35)], dtype=torch.float32)])
# test_id: 2001 
para_0 = torch.randn([tensor(1), tensor(48), tensor(35), tensor(35)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2002 
para_0 = torch.randn([tensor(1), tensor(48), tensor(35), tensor(35)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(48), tensor(5), tensor(5)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (2, 2)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2003 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(35), tensor(35)], dtype=torch.float32)])
# test_id: 2004 
para_0 = torch.randn([tensor(1), tensor(64), tensor(35), tensor(35)], dtype=torch.float32)
para_1 = torch.randn([tensor(96), tensor(64), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2005 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(35), tensor(35)], dtype=torch.float32)])
# test_id: 2006 
para_0 = torch.randn([tensor(1), tensor(96), tensor(35), tensor(35)], dtype=torch.float32)
para_1 = torch.randn([tensor(96)], dtype=torch.float32)
para_2 = torch.randn([tensor(96)], dtype=torch.float32)
para_3 = torch.randn([tensor(96)], dtype=torch.float32)
para_4 = torch.randn([tensor(96)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2007 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(35), tensor(35)], dtype=torch.float32)])
# test_id: 2008 
para_0 = torch.randn([tensor(1), tensor(96), tensor(35), tensor(35)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2009 
para_0 = torch.randn([tensor(1), tensor(96), tensor(35), tensor(35)], dtype=torch.float32)
para_1 = torch.randn([tensor(96), tensor(96), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2010 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(35), tensor(35)], dtype=torch.float32)])
# test_id: 2011 
para_0 = torch.randn([tensor(1), tensor(192), tensor(35), tensor(35)], dtype=torch.float32)
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], kernel_size=3,stride=1,padding=1,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 2012 
para_0 = torch.randn([tensor(1), tensor(192), tensor(35), tensor(35)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(192), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2013 
para_0 = torch.randn([tensor(1), tensor(32), tensor(35), tensor(35)], dtype=torch.float32)
para_1 = torch.randn([tensor(32)], dtype=torch.float32)
para_2 = torch.randn([tensor(32)], dtype=torch.float32)
para_3 = torch.randn([tensor(32)], dtype=torch.float32)
para_4 = torch.randn([tensor(32)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2014 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(35), tensor(35)], dtype=torch.float32)])
# test_id: 2015 
para_0 = torch.randn([tensor(1), tensor(32), tensor(35), tensor(35)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2016 
para_0 = torch.randn([tensor(1), tensor(256), tensor(35), tensor(35)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2017 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(35), tensor(35)], dtype=torch.float32)])
# test_id: 2018 
para_0 = torch.randn([tensor(1), tensor(256), tensor(35), tensor(35)], dtype=torch.float32)
para_1 = torch.randn([tensor(48), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2019 
para_0 = torch.randn([tensor(1), tensor(256), tensor(35), tensor(35)], dtype=torch.float32)
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], kernel_size=3,stride=1,padding=1,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 2020 
para_0 = torch.randn([tensor(1), tensor(288), tensor(35), tensor(35)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(288), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2021 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(288), tensor(35), tensor(35)], dtype=torch.float32)])
# test_id: 2022 
para_0 = torch.randn([tensor(1), tensor(288), tensor(35), tensor(35)], dtype=torch.float32)
para_1 = torch.randn([tensor(48), tensor(288), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2023 
para_0 = torch.randn([tensor(1), tensor(288), tensor(35), tensor(35)], dtype=torch.float32)
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], kernel_size=3,stride=1,padding=1,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 2024 
para_0 = torch.randn([tensor(1), tensor(288), tensor(35), tensor(35)], dtype=torch.float32)
para_1 = torch.randn([tensor(384), tensor(288), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2025 
para_0 = torch.randn([tensor(1), tensor(384), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(384)], dtype=torch.float32)
para_2 = torch.randn([tensor(384)], dtype=torch.float32)
para_3 = torch.randn([tensor(384)], dtype=torch.float32)
para_4 = torch.randn([tensor(384)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2026 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(384), tensor(17), tensor(17)], dtype=torch.float32)])
# test_id: 2027 
para_0 = torch.randn([tensor(1), tensor(384), tensor(17), tensor(17)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2028 
para_0 = torch.randn([tensor(1), tensor(96), tensor(35), tensor(35)], dtype=torch.float32)
para_1 = torch.randn([tensor(96), tensor(96), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2029 
para_0 = torch.randn([tensor(1), tensor(96), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(96)], dtype=torch.float32)
para_2 = torch.randn([tensor(96)], dtype=torch.float32)
para_3 = torch.randn([tensor(96)], dtype=torch.float32)
para_4 = torch.randn([tensor(96)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2030 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(17), tensor(17)], dtype=torch.float32)])
# test_id: 2031 
para_0 = torch.randn([tensor(1), tensor(96), tensor(17), tensor(17)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2032 
para_0 = torch.randn([tensor(1), tensor(288), tensor(35), tensor(35)], dtype=torch.float32)
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], kernel_size=3,stride=2,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2033 
para_0 = torch.randn([tensor(1), tensor(768), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(768), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2034 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(768), tensor(17), tensor(17)], dtype=torch.float32)])
# test_id: 2035 
para_0 = torch.randn([tensor(1), tensor(192), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(192)], dtype=torch.float32)
para_2 = torch.randn([tensor(192)], dtype=torch.float32)
para_3 = torch.randn([tensor(192)], dtype=torch.float32)
para_4 = torch.randn([tensor(192)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2036 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(17), tensor(17)], dtype=torch.float32)])
# test_id: 2037 
para_0 = torch.randn([tensor(1), tensor(192), tensor(17), tensor(17)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2038 
para_0 = torch.randn([tensor(1), tensor(768), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(768), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2039 
para_0 = torch.randn([tensor(1), tensor(128), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(128)], dtype=torch.float32)
para_2 = torch.randn([tensor(128)], dtype=torch.float32)
para_3 = torch.randn([tensor(128)], dtype=torch.float32)
para_4 = torch.randn([tensor(128)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2040 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(17), tensor(17)], dtype=torch.float32)])
# test_id: 2041 
para_0 = torch.randn([tensor(1), tensor(128), tensor(17), tensor(17)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2042 
para_0 = torch.randn([tensor(1), tensor(128), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(128), tensor(1), tensor(7)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 3)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2043 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(17), tensor(17)], dtype=torch.float32)])
# test_id: 2044 
para_0 = torch.randn([tensor(1), tensor(128), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(128), tensor(7), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (3, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2045 
para_0 = torch.randn([tensor(1), tensor(128), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(128), tensor(7), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (3, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2046 
para_0 = torch.randn([tensor(1), tensor(128), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(128), tensor(1), tensor(7)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 3)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2047 
para_0 = torch.randn([tensor(1), tensor(768), tensor(17), tensor(17)], dtype=torch.float32)
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], kernel_size=3,stride=1,padding=1,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 2048 
para_0 = torch.randn([tensor(1), tensor(768), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(160), tensor(768), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2049 
para_0 = torch.randn([tensor(1), tensor(160), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(160)], dtype=torch.float32)
para_2 = torch.randn([tensor(160)], dtype=torch.float32)
para_3 = torch.randn([tensor(160)], dtype=torch.float32)
para_4 = torch.randn([tensor(160)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2050 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(160), tensor(17), tensor(17)], dtype=torch.float32)])
# test_id: 2051 
para_0 = torch.randn([tensor(1), tensor(160), tensor(17), tensor(17)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2052 
para_0 = torch.randn([tensor(1), tensor(160), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(160), tensor(160), tensor(1), tensor(7)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 3)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2053 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(160), tensor(17), tensor(17)], dtype=torch.float32)])
# test_id: 2054 
para_0 = torch.randn([tensor(1), tensor(160), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(160), tensor(7), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (3, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2055 
para_0 = torch.randn([tensor(1), tensor(160), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(160), tensor(160), tensor(7), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (3, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2056 
para_0 = torch.randn([tensor(1), tensor(160), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(160), tensor(1), tensor(7)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 3)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2057 
para_0 = torch.randn([tensor(1), tensor(192), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(192), tensor(1), tensor(7)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 3)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2058 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(17), tensor(17)], dtype=torch.float32)])
# test_id: 2059 
para_0 = torch.randn([tensor(1), tensor(192), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(192), tensor(7), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (3, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2060 
para_0 = torch.randn([tensor(1), tensor(192), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(320), tensor(192), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2061 
para_0 = torch.randn([tensor(1), tensor(320), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(320)], dtype=torch.float32)
para_2 = torch.randn([tensor(320)], dtype=torch.float32)
para_3 = torch.randn([tensor(320)], dtype=torch.float32)
para_4 = torch.randn([tensor(320)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2062 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(320), tensor(8), tensor(8)], dtype=torch.float32)])
# test_id: 2063 
para_0 = torch.randn([tensor(1), tensor(320), tensor(8), tensor(8)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2064 
para_0 = torch.randn([tensor(1), tensor(192), tensor(17), tensor(17)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(192), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2065 
para_0 = torch.randn([tensor(1), tensor(192), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(192)], dtype=torch.float32)
para_2 = torch.randn([tensor(192)], dtype=torch.float32)
para_3 = torch.randn([tensor(192)], dtype=torch.float32)
para_4 = torch.randn([tensor(192)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2066 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(8), tensor(8)], dtype=torch.float32)])
# test_id: 2067 
para_0 = torch.randn([tensor(1), tensor(192), tensor(8), tensor(8)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2068 
para_0 = torch.randn([tensor(1), tensor(768), tensor(17), tensor(17)], dtype=torch.float32)
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], kernel_size=3,stride=2,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2069 
para_0 = torch.randn([tensor(1), tensor(1280), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(320), tensor(1280), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2070 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(1280), tensor(8), tensor(8)], dtype=torch.float32)])
# test_id: 2071 
para_0 = torch.randn([tensor(1), tensor(1280), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(384), tensor(1280), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2072 
para_0 = torch.randn([tensor(1), tensor(384), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(384)], dtype=torch.float32)
para_2 = torch.randn([tensor(384)], dtype=torch.float32)
para_3 = torch.randn([tensor(384)], dtype=torch.float32)
para_4 = torch.randn([tensor(384)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2073 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(384), tensor(8), tensor(8)], dtype=torch.float32)])
# test_id: 2074 
para_0 = torch.randn([tensor(1), tensor(384), tensor(8), tensor(8)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2075 
para_0 = torch.randn([tensor(1), tensor(384), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(384), tensor(384), tensor(1), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2076 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(384), tensor(8), tensor(8)], dtype=torch.float32)])
# test_id: 2077 
para_0 = torch.randn([tensor(1), tensor(384), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(384), tensor(384), tensor(3), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2078 
para_0 = torch.randn([tensor(1), tensor(1280), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(448), tensor(1280), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2079 
para_0 = torch.randn([tensor(1), tensor(448), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(448)], dtype=torch.float32)
para_2 = torch.randn([tensor(448)], dtype=torch.float32)
para_3 = torch.randn([tensor(448)], dtype=torch.float32)
para_4 = torch.randn([tensor(448)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2080 
verify_model(torch.nn.BatchNorm2d(192,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(448), tensor(8), tensor(8)], dtype=torch.float32)])
# test_id: 2081 
para_0 = torch.randn([tensor(1), tensor(448), tensor(8), tensor(8)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2082 
para_0 = torch.randn([tensor(1), tensor(448), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(384), tensor(448), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2083 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(448), tensor(8), tensor(8)], dtype=torch.float32)])
# test_id: 2084 
para_0 = torch.randn([tensor(1), tensor(1280), tensor(8), tensor(8)], dtype=torch.float32)
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], kernel_size=3,stride=1,padding=1,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 2085 
para_0 = torch.randn([tensor(1), tensor(1280), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(1280), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2086 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(320), tensor(2048), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2087 
verify_model(torch.nn.Conv2d(2048,192,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(2048), tensor(8), tensor(8)], dtype=torch.float32)])
# test_id: 2088 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(384), tensor(2048), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2089 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(448), tensor(2048), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2090 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(8), tensor(8)], dtype=torch.float32)
class avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.avg_pool2d(args[0], kernel_size=3,stride=1,padding=1,)
verify_model(avg_pool2d().float().eval(), input_data=para_0)


# test_id: 2091 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(2048), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2092 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(8), tensor(8)], dtype=torch.float32)
para_1 = (1, 1)
class adaptive_avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool2d(args[0], para_1,)
verify_model(adaptive_avg_pool2d().float().eval(), input_data=para_0)


# test_id: 2093 
verify_model(torch.nn.AdaptiveAvgPool2d((1, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(2048), tensor(8), tensor(8)], dtype=torch.float32)])
# test_id: 2094 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(1), tensor(1)], dtype=torch.float32)
para_1 = 0.5
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 2095 
verify_model(torch.nn.Dropout().eval(), input_data=[torch.randn([tensor(1), tensor(2048), tensor(1), tensor(1)], dtype=torch.float32)])
# test_id: 2096 
para_0 = torch.randn([tensor(1), tensor(2048)], dtype=torch.float32)
para_1 = torch.randn([tensor(1000), tensor(2048)], dtype=torch.float32)
para_2 = torch.randn([tensor(1000)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 2097 
verify_model(torch.nn.Linear(2048,1000,).eval(), input_data=[torch.randn([tensor(1), tensor(2048)], dtype=torch.float32)])
# test_id: 2098 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 3, 224, 224], dtype=torch.float32)])
# test_id: 2099 
para_0 = torch.randn([1, 64, 112, 112], dtype=torch.float32)
para_1 = torch.randn([64], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = torch.randn([64], dtype=torch.float32)
para_4 = torch.randn([64], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2100 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 64, 112, 112], dtype=torch.float32)])
# test_id: 2101 
para_0 = torch.randn([1, 64, 112, 112], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2102 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([1, 64, 112, 112], dtype=torch.float32)])
# test_id: 2103 
para_0 = torch.randn([1, 64, 56, 56], dtype=torch.float32)
para_1 = torch.randn([64, 64, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2104 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 64, 56, 56], dtype=torch.float32)])
# test_id: 2105 
para_0 = torch.randn([1, 64, 56, 56], dtype=torch.float32)
para_1 = torch.randn([64], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = torch.randn([64], dtype=torch.float32)
para_4 = torch.randn([64], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2106 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 64, 56, 56], dtype=torch.float32)])
# test_id: 2107 
para_0 = torch.randn([1, 64, 56, 56], dtype=torch.float32)
para_1 = torch.randn([192, 64, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2108 
para_0 = torch.randn([1, 192, 56, 56], dtype=torch.float32)
para_1 = torch.randn([192], dtype=torch.float32)
para_2 = torch.randn([192], dtype=torch.float32)
para_3 = torch.randn([192], dtype=torch.float32)
para_4 = torch.randn([192], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2109 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 192, 56, 56], dtype=torch.float32)])
# test_id: 2110 
para_0 = torch.randn([1, 192, 56, 56], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2111 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([1, 192, 56, 56], dtype=torch.float32)])
# test_id: 2112 
para_0 = torch.randn([1, 192, 28, 28], dtype=torch.float32)
para_1 = torch.randn([64, 192, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2113 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 192, 28, 28], dtype=torch.float32)])
# test_id: 2114 
para_0 = torch.randn([1, 64, 28, 28], dtype=torch.float32)
para_1 = torch.randn([64], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = torch.randn([64], dtype=torch.float32)
para_4 = torch.randn([64], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2115 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 64, 28, 28], dtype=torch.float32)])
# test_id: 2116 
para_0 = torch.randn([1, 64, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2117 
para_0 = torch.randn([1, 192, 28, 28], dtype=torch.float32)
para_1 = torch.randn([96, 192, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2118 
para_0 = torch.randn([1, 96, 28, 28], dtype=torch.float32)
para_1 = torch.randn([96], dtype=torch.float32)
para_2 = torch.randn([96], dtype=torch.float32)
para_3 = torch.randn([96], dtype=torch.float32)
para_4 = torch.randn([96], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2119 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 96, 28, 28], dtype=torch.float32)])
# test_id: 2120 
para_0 = torch.randn([1, 96, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2121 
para_0 = torch.randn([1, 96, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128, 96, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2122 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 96, 28, 28], dtype=torch.float32)])
# test_id: 2123 
para_0 = torch.randn([1, 128, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128], dtype=torch.float32)
para_2 = torch.randn([128], dtype=torch.float32)
para_3 = torch.randn([128], dtype=torch.float32)
para_4 = torch.randn([128], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2124 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 128, 28, 28], dtype=torch.float32)])
# test_id: 2125 
para_0 = torch.randn([1, 192, 28, 28], dtype=torch.float32)
para_1 = torch.randn([16, 192, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2126 
para_0 = torch.randn([1, 16, 28, 28], dtype=torch.float32)
para_1 = torch.randn([16], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = torch.randn([16], dtype=torch.float32)
para_4 = torch.randn([16], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2127 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 16, 28, 28], dtype=torch.float32)])
# test_id: 2128 
para_0 = torch.randn([1, 16, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2129 
para_0 = torch.randn([1, 16, 28, 28], dtype=torch.float32)
para_1 = torch.randn([32, 16, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2130 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 16, 28, 28], dtype=torch.float32)])
# test_id: 2131 
para_0 = torch.randn([1, 32, 28, 28], dtype=torch.float32)
para_1 = torch.randn([32], dtype=torch.float32)
para_2 = torch.randn([32], dtype=torch.float32)
para_3 = torch.randn([32], dtype=torch.float32)
para_4 = torch.randn([32], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2132 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 32, 28, 28], dtype=torch.float32)])
# test_id: 2133 
para_0 = torch.randn([1, 32, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2134 
para_0 = torch.randn([1, 192, 28, 28], dtype=torch.float32)
para_1 = 3
para_2 = 1
para_3 = 1
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2135 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([1, 192, 28, 28], dtype=torch.float32)])
# test_id: 2136 
para_0 = torch.randn([1, 192, 28, 28], dtype=torch.float32)
para_1 = torch.randn([32, 192, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2137 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 256, 28, 28], dtype=torch.float32)])
# test_id: 2138 
para_0 = torch.randn([1, 128, 28, 28], dtype=torch.float32)
para_1 = torch.randn([192, 128, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2139 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 128, 28, 28], dtype=torch.float32)])
# test_id: 2140 
para_0 = torch.randn([1, 192, 28, 28], dtype=torch.float32)
para_1 = torch.randn([192], dtype=torch.float32)
para_2 = torch.randn([192], dtype=torch.float32)
para_3 = torch.randn([192], dtype=torch.float32)
para_4 = torch.randn([192], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2141 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 192, 28, 28], dtype=torch.float32)])
# test_id: 2142 
para_0 = torch.randn([1, 256, 28, 28], dtype=torch.float32)
para_1 = torch.randn([32, 256, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2143 
para_0 = torch.randn([1, 32, 28, 28], dtype=torch.float32)
para_1 = torch.randn([96, 32, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2144 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 32, 28, 28], dtype=torch.float32)])
# test_id: 2145 
para_0 = torch.randn([1, 256, 28, 28], dtype=torch.float32)
para_1 = 3
para_2 = 1
para_3 = 1
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2146 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([1, 256, 28, 28], dtype=torch.float32)])
# test_id: 2147 
para_0 = torch.randn([1, 256, 28, 28], dtype=torch.float32)
para_1 = torch.randn([64, 256, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2148 
para_0 = torch.randn([1, 480, 28, 28], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2149 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([1, 480, 28, 28], dtype=torch.float32)])
# test_id: 2150 
para_0 = torch.randn([1, 480, 14, 14], dtype=torch.float32)
para_1 = torch.randn([192, 480, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2151 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 480, 14, 14], dtype=torch.float32)])
# test_id: 2152 
para_0 = torch.randn([1, 192, 14, 14], dtype=torch.float32)
para_1 = torch.randn([192], dtype=torch.float32)
para_2 = torch.randn([192], dtype=torch.float32)
para_3 = torch.randn([192], dtype=torch.float32)
para_4 = torch.randn([192], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2153 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 192, 14, 14], dtype=torch.float32)])
# test_id: 2154 
para_0 = torch.randn([1, 192, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2155 
para_0 = torch.randn([1, 480, 14, 14], dtype=torch.float32)
para_1 = torch.randn([96, 480, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2156 
para_0 = torch.randn([1, 96, 14, 14], dtype=torch.float32)
para_1 = torch.randn([96], dtype=torch.float32)
para_2 = torch.randn([96], dtype=torch.float32)
para_3 = torch.randn([96], dtype=torch.float32)
para_4 = torch.randn([96], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2157 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 96, 14, 14], dtype=torch.float32)])
# test_id: 2158 
para_0 = torch.randn([1, 96, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2159 
para_0 = torch.randn([1, 96, 14, 14], dtype=torch.float32)
para_1 = torch.randn([208, 96, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2160 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 96, 14, 14], dtype=torch.float32)])
# test_id: 2161 
para_0 = torch.randn([1, 208, 14, 14], dtype=torch.float32)
para_1 = torch.randn([208], dtype=torch.float32)
para_2 = torch.randn([208], dtype=torch.float32)
para_3 = torch.randn([208], dtype=torch.float32)
para_4 = torch.randn([208], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2162 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 208, 14, 14], dtype=torch.float32)])
# test_id: 2163 
para_0 = torch.randn([1, 208, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2164 
para_0 = torch.randn([1, 480, 14, 14], dtype=torch.float32)
para_1 = torch.randn([16, 480, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2165 
para_0 = torch.randn([1, 16, 14, 14], dtype=torch.float32)
para_1 = torch.randn([16], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = torch.randn([16], dtype=torch.float32)
para_4 = torch.randn([16], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2166 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 16, 14, 14], dtype=torch.float32)])
# test_id: 2167 
para_0 = torch.randn([1, 16, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2168 
para_0 = torch.randn([1, 16, 14, 14], dtype=torch.float32)
para_1 = torch.randn([48, 16, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2169 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 16, 14, 14], dtype=torch.float32)])
# test_id: 2170 
para_0 = torch.randn([1, 48, 14, 14], dtype=torch.float32)
para_1 = torch.randn([48], dtype=torch.float32)
para_2 = torch.randn([48], dtype=torch.float32)
para_3 = torch.randn([48], dtype=torch.float32)
para_4 = torch.randn([48], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2171 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 48, 14, 14], dtype=torch.float32)])
# test_id: 2172 
para_0 = torch.randn([1, 48, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2173 
para_0 = torch.randn([1, 480, 14, 14], dtype=torch.float32)
para_1 = 3
para_2 = 1
para_3 = 1
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2174 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([1, 480, 14, 14], dtype=torch.float32)])
# test_id: 2175 
para_0 = torch.randn([1, 480, 14, 14], dtype=torch.float32)
para_1 = torch.randn([64, 480, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2176 
para_0 = torch.randn([1, 64, 14, 14], dtype=torch.float32)
para_1 = torch.randn([64], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = torch.randn([64], dtype=torch.float32)
para_4 = torch.randn([64], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2177 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 64, 14, 14], dtype=torch.float32)])
# test_id: 2178 
para_0 = torch.randn([1, 64, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2179 
para_0 = torch.randn([1, 512, 14, 14], dtype=torch.float32)
para_1 = torch.randn([160, 512, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2180 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 512, 14, 14], dtype=torch.float32)])
# test_id: 2181 
para_0 = torch.randn([1, 160, 14, 14], dtype=torch.float32)
para_1 = torch.randn([160], dtype=torch.float32)
para_2 = torch.randn([160], dtype=torch.float32)
para_3 = torch.randn([160], dtype=torch.float32)
para_4 = torch.randn([160], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2182 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 160, 14, 14], dtype=torch.float32)])
# test_id: 2183 
para_0 = torch.randn([1, 160, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2184 
para_0 = torch.randn([1, 512, 14, 14], dtype=torch.float32)
para_1 = torch.randn([112, 512, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2185 
para_0 = torch.randn([1, 112, 14, 14], dtype=torch.float32)
para_1 = torch.randn([112], dtype=torch.float32)
para_2 = torch.randn([112], dtype=torch.float32)
para_3 = torch.randn([112], dtype=torch.float32)
para_4 = torch.randn([112], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2186 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 112, 14, 14], dtype=torch.float32)])
# test_id: 2187 
para_0 = torch.randn([1, 112, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2188 
para_0 = torch.randn([1, 112, 14, 14], dtype=torch.float32)
para_1 = torch.randn([224, 112, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2189 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 112, 14, 14], dtype=torch.float32)])
# test_id: 2190 
para_0 = torch.randn([1, 224, 14, 14], dtype=torch.float32)
para_1 = torch.randn([224], dtype=torch.float32)
para_2 = torch.randn([224], dtype=torch.float32)
para_3 = torch.randn([224], dtype=torch.float32)
para_4 = torch.randn([224], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2191 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 224, 14, 14], dtype=torch.float32)])
# test_id: 2192 
para_0 = torch.randn([1, 224, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2193 
para_0 = torch.randn([1, 512, 14, 14], dtype=torch.float32)
para_1 = torch.randn([24, 512, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2194 
para_0 = torch.randn([1, 24, 14, 14], dtype=torch.float32)
para_1 = torch.randn([24], dtype=torch.float32)
para_2 = torch.randn([24], dtype=torch.float32)
para_3 = torch.randn([24], dtype=torch.float32)
para_4 = torch.randn([24], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2195 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 24, 14, 14], dtype=torch.float32)])
# test_id: 2196 
para_0 = torch.randn([1, 24, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2197 
para_0 = torch.randn([1, 24, 14, 14], dtype=torch.float32)
para_1 = torch.randn([64, 24, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2198 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 24, 14, 14], dtype=torch.float32)])
# test_id: 2199 
para_0 = torch.randn([1, 512, 14, 14], dtype=torch.float32)
para_1 = 3
para_2 = 1
para_3 = 1
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2200 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([1, 512, 14, 14], dtype=torch.float32)])
# test_id: 2201 
para_0 = torch.randn([1, 512, 14, 14], dtype=torch.float32)
para_1 = torch.randn([64, 512, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2202 
para_0 = torch.randn([1, 128, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128], dtype=torch.float32)
para_2 = torch.randn([128], dtype=torch.float32)
para_3 = torch.randn([128], dtype=torch.float32)
para_4 = torch.randn([128], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2203 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 128, 14, 14], dtype=torch.float32)])
# test_id: 2204 
para_0 = torch.randn([1, 128, 14, 14], dtype=torch.float32)
para_1 = torch.randn([256, 128, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2205 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 128, 14, 14], dtype=torch.float32)])
# test_id: 2206 
para_0 = torch.randn([1, 256, 14, 14], dtype=torch.float32)
para_1 = torch.randn([256], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
para_3 = torch.randn([256], dtype=torch.float32)
para_4 = torch.randn([256], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2207 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 256, 14, 14], dtype=torch.float32)])
# test_id: 2208 
para_0 = torch.randn([1, 512, 14, 14], dtype=torch.float32)
para_1 = torch.randn([144, 512, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2209 
para_0 = torch.randn([1, 144, 14, 14], dtype=torch.float32)
para_1 = torch.randn([144], dtype=torch.float32)
para_2 = torch.randn([144], dtype=torch.float32)
para_3 = torch.randn([144], dtype=torch.float32)
para_4 = torch.randn([144], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2210 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 144, 14, 14], dtype=torch.float32)])
# test_id: 2211 
para_0 = torch.randn([1, 144, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2212 
para_0 = torch.randn([1, 144, 14, 14], dtype=torch.float32)
para_1 = torch.randn([288, 144, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2213 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 144, 14, 14], dtype=torch.float32)])
# test_id: 2214 
para_0 = torch.randn([1, 288, 14, 14], dtype=torch.float32)
para_1 = torch.randn([288], dtype=torch.float32)
para_2 = torch.randn([288], dtype=torch.float32)
para_3 = torch.randn([288], dtype=torch.float32)
para_4 = torch.randn([288], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2215 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 288, 14, 14], dtype=torch.float32)])
# test_id: 2216 
para_0 = torch.randn([1, 512, 14, 14], dtype=torch.float32)
para_1 = torch.randn([32, 512, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2217 
para_0 = torch.randn([1, 32, 14, 14], dtype=torch.float32)
para_1 = torch.randn([32], dtype=torch.float32)
para_2 = torch.randn([32], dtype=torch.float32)
para_3 = torch.randn([32], dtype=torch.float32)
para_4 = torch.randn([32], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2218 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 32, 14, 14], dtype=torch.float32)])
# test_id: 2219 
para_0 = torch.randn([1, 32, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2220 
para_0 = torch.randn([1, 32, 14, 14], dtype=torch.float32)
para_1 = torch.randn([64, 32, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2221 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 32, 14, 14], dtype=torch.float32)])
# test_id: 2222 
para_0 = torch.randn([1, 528, 14, 14], dtype=torch.float32)
para_1 = torch.randn([256, 528, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2223 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 528, 14, 14], dtype=torch.float32)])
# test_id: 2224 
para_0 = torch.randn([1, 528, 14, 14], dtype=torch.float32)
para_1 = torch.randn([160, 528, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2225 
para_0 = torch.randn([1, 160, 14, 14], dtype=torch.float32)
para_1 = torch.randn([320, 160, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2226 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 160, 14, 14], dtype=torch.float32)])
# test_id: 2227 
para_0 = torch.randn([1, 320, 14, 14], dtype=torch.float32)
para_1 = torch.randn([320], dtype=torch.float32)
para_2 = torch.randn([320], dtype=torch.float32)
para_3 = torch.randn([320], dtype=torch.float32)
para_4 = torch.randn([320], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2228 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 320, 14, 14], dtype=torch.float32)])
# test_id: 2229 
para_0 = torch.randn([1, 528, 14, 14], dtype=torch.float32)
para_1 = torch.randn([32, 528, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2230 
para_0 = torch.randn([1, 32, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 32, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2231 
para_0 = torch.randn([1, 528, 14, 14], dtype=torch.float32)
para_1 = 3
para_2 = 1
para_3 = 1
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2232 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([1, 528, 14, 14], dtype=torch.float32)])
# test_id: 2233 
para_0 = torch.randn([1, 528, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 528, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2234 
para_0 = torch.randn([1, 832, 14, 14], dtype=torch.float32)
para_1 = 2
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2235 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([1, 832, 14, 14], dtype=torch.float32)])
# test_id: 2236 
para_0 = torch.randn([1, 832, 7, 7], dtype=torch.float32)
para_1 = torch.randn([256, 832, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2237 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 832, 7, 7], dtype=torch.float32)])
# test_id: 2238 
para_0 = torch.randn([1, 256, 7, 7], dtype=torch.float32)
para_1 = torch.randn([256], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
para_3 = torch.randn([256], dtype=torch.float32)
para_4 = torch.randn([256], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2239 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 256, 7, 7], dtype=torch.float32)])
# test_id: 2240 
para_0 = torch.randn([1, 256, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2241 
para_0 = torch.randn([1, 832, 7, 7], dtype=torch.float32)
para_1 = torch.randn([160, 832, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2242 
para_0 = torch.randn([1, 160, 7, 7], dtype=torch.float32)
para_1 = torch.randn([160], dtype=torch.float32)
para_2 = torch.randn([160], dtype=torch.float32)
para_3 = torch.randn([160], dtype=torch.float32)
para_4 = torch.randn([160], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2243 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 160, 7, 7], dtype=torch.float32)])
# test_id: 2244 
para_0 = torch.randn([1, 160, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2245 
para_0 = torch.randn([1, 160, 7, 7], dtype=torch.float32)
para_1 = torch.randn([320, 160, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2246 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 160, 7, 7], dtype=torch.float32)])
# test_id: 2247 
para_0 = torch.randn([1, 320, 7, 7], dtype=torch.float32)
para_1 = torch.randn([320], dtype=torch.float32)
para_2 = torch.randn([320], dtype=torch.float32)
para_3 = torch.randn([320], dtype=torch.float32)
para_4 = torch.randn([320], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2248 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 320, 7, 7], dtype=torch.float32)])
# test_id: 2249 
para_0 = torch.randn([1, 320, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2250 
para_0 = torch.randn([1, 832, 7, 7], dtype=torch.float32)
para_1 = torch.randn([32, 832, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2251 
para_0 = torch.randn([1, 32, 7, 7], dtype=torch.float32)
para_1 = torch.randn([32], dtype=torch.float32)
para_2 = torch.randn([32], dtype=torch.float32)
para_3 = torch.randn([32], dtype=torch.float32)
para_4 = torch.randn([32], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2252 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 32, 7, 7], dtype=torch.float32)])
# test_id: 2253 
para_0 = torch.randn([1, 32, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2254 
para_0 = torch.randn([1, 32, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 32, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2255 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 32, 7, 7], dtype=torch.float32)])
# test_id: 2256 
para_0 = torch.randn([1, 128, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128], dtype=torch.float32)
para_2 = torch.randn([128], dtype=torch.float32)
para_3 = torch.randn([128], dtype=torch.float32)
para_4 = torch.randn([128], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2257 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 128, 7, 7], dtype=torch.float32)])
# test_id: 2258 
para_0 = torch.randn([1, 832, 7, 7], dtype=torch.float32)
para_1 = 3
para_2 = 1
para_3 = 1
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2259 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([1, 832, 7, 7], dtype=torch.float32)])
# test_id: 2260 
para_0 = torch.randn([1, 832, 7, 7], dtype=torch.float32)
para_1 = torch.randn([384, 832, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2261 
para_0 = torch.randn([1, 384, 7, 7], dtype=torch.float32)
para_1 = torch.randn([384], dtype=torch.float32)
para_2 = torch.randn([384], dtype=torch.float32)
para_3 = torch.randn([384], dtype=torch.float32)
para_4 = torch.randn([384], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2262 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 384, 7, 7], dtype=torch.float32)])
# test_id: 2263 
para_0 = torch.randn([1, 384, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2264 
para_0 = torch.randn([1, 832, 7, 7], dtype=torch.float32)
para_1 = torch.randn([192, 832, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2265 
para_0 = torch.randn([1, 192, 7, 7], dtype=torch.float32)
para_1 = torch.randn([192], dtype=torch.float32)
para_2 = torch.randn([192], dtype=torch.float32)
para_3 = torch.randn([192], dtype=torch.float32)
para_4 = torch.randn([192], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2266 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 192, 7, 7], dtype=torch.float32)])
# test_id: 2267 
para_0 = torch.randn([1, 192, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2268 
para_0 = torch.randn([1, 192, 7, 7], dtype=torch.float32)
para_1 = torch.randn([384, 192, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2269 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 192, 7, 7], dtype=torch.float32)])
# test_id: 2270 
para_0 = torch.randn([1, 832, 7, 7], dtype=torch.float32)
para_1 = torch.randn([48, 832, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2271 
para_0 = torch.randn([1, 48, 7, 7], dtype=torch.float32)
para_1 = torch.randn([48], dtype=torch.float32)
para_2 = torch.randn([48], dtype=torch.float32)
para_3 = torch.randn([48], dtype=torch.float32)
para_4 = torch.randn([48], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2272 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([1, 48, 7, 7], dtype=torch.float32)])
# test_id: 2273 
para_0 = torch.randn([1, 48, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2274 
para_0 = torch.randn([1, 48, 7, 7], dtype=torch.float32)
para_1 = torch.randn([128, 48, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2275 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([1, 48, 7, 7], dtype=torch.float32)])
# test_id: 2276 
verify_model(torch.nn.AdaptiveAvgPool2d((1, 1),).eval(), input_data=[torch.randn([1, 1024, 7, 7], dtype=torch.float32)])
# test_id: 2277 
para_0 = torch.randn([1, 1024], dtype=torch.float32)
para_1 = 0.2
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 2278 
verify_model(torch.nn.Dropout(0.2,).eval(), input_data=[torch.randn([1, 1024], dtype=torch.float32)])
# test_id: 2279 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(224), tensor(224)], dtype=torch.float32)])
# test_id: 2280 
para_0 = torch.randn([tensor(1), tensor(64), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = torch.randn([tensor(64)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = torch.randn([tensor(64)], dtype=torch.float32)
para_4 = torch.randn([tensor(64)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2281 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2282 
para_0 = torch.randn([tensor(1), tensor(64), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2283 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2284 
para_0 = torch.randn([tensor(1), tensor(64), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(64), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2285 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2286 
para_0 = torch.randn([tensor(1), tensor(64), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(64)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = torch.randn([tensor(64)], dtype=torch.float32)
para_4 = torch.randn([tensor(64)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2287 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2288 
para_0 = torch.randn([tensor(1), tensor(64), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(64), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2289 
para_0 = torch.randn([tensor(1), tensor(192), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(192)], dtype=torch.float32)
para_2 = torch.randn([tensor(192)], dtype=torch.float32)
para_3 = torch.randn([tensor(192)], dtype=torch.float32)
para_4 = torch.randn([tensor(192)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2290 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2291 
para_0 = torch.randn([tensor(1), tensor(192), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2292 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2293 
para_0 = torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(192), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2294 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2295 
para_0 = torch.randn([tensor(1), tensor(64), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(64)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = torch.randn([tensor(64)], dtype=torch.float32)
para_4 = torch.randn([tensor(64)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2296 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2297 
para_0 = torch.randn([tensor(1), tensor(64), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2298 
para_0 = torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(96), tensor(192), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2299 
para_0 = torch.randn([tensor(1), tensor(96), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(96)], dtype=torch.float32)
para_2 = torch.randn([tensor(96)], dtype=torch.float32)
para_3 = torch.randn([tensor(96)], dtype=torch.float32)
para_4 = torch.randn([tensor(96)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2300 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2301 
para_0 = torch.randn([tensor(1), tensor(96), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2302 
para_0 = torch.randn([tensor(1), tensor(96), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(96), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2303 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2304 
para_0 = torch.randn([tensor(1), tensor(128), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128)], dtype=torch.float32)
para_2 = torch.randn([tensor(128)], dtype=torch.float32)
para_3 = torch.randn([tensor(128)], dtype=torch.float32)
para_4 = torch.randn([tensor(128)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2305 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2306 
para_0 = torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(192), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2307 
para_0 = torch.randn([tensor(1), tensor(16), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(16)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = torch.randn([tensor(16)], dtype=torch.float32)
para_4 = torch.randn([tensor(16)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2308 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2309 
para_0 = torch.randn([tensor(1), tensor(16), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2310 
para_0 = torch.randn([tensor(1), tensor(16), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(16), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2311 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2312 
para_0 = torch.randn([tensor(1), tensor(32), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(32)], dtype=torch.float32)
para_2 = torch.randn([tensor(32)], dtype=torch.float32)
para_3 = torch.randn([tensor(32)], dtype=torch.float32)
para_4 = torch.randn([tensor(32)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2313 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2314 
para_0 = torch.randn([tensor(1), tensor(32), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2315 
para_0 = torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = 3
para_2 = 1
para_3 = 1
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2316 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2317 
para_0 = torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(192), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2318 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2319 
para_0 = torch.randn([tensor(1), tensor(128), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(128), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2320 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2321 
para_0 = torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(192)], dtype=torch.float32)
para_2 = torch.randn([tensor(192)], dtype=torch.float32)
para_3 = torch.randn([tensor(192)], dtype=torch.float32)
para_4 = torch.randn([tensor(192)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2322 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2323 
para_0 = torch.randn([tensor(1), tensor(256), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2324 
para_0 = torch.randn([tensor(1), tensor(32), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(96), tensor(32), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2325 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2326 
para_0 = torch.randn([tensor(1), tensor(256), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = 3
para_2 = 1
para_3 = 1
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2327 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2328 
para_0 = torch.randn([tensor(1), tensor(256), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2329 
para_0 = torch.randn([tensor(1), tensor(480), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2330 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([tensor(1), tensor(480), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2331 
para_0 = torch.randn([tensor(1), tensor(480), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(480), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2332 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(480), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2333 
para_0 = torch.randn([tensor(1), tensor(192), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(192)], dtype=torch.float32)
para_2 = torch.randn([tensor(192)], dtype=torch.float32)
para_3 = torch.randn([tensor(192)], dtype=torch.float32)
para_4 = torch.randn([tensor(192)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2334 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2335 
para_0 = torch.randn([tensor(1), tensor(192), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2336 
para_0 = torch.randn([tensor(1), tensor(480), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(96), tensor(480), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2337 
para_0 = torch.randn([tensor(1), tensor(96), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(96)], dtype=torch.float32)
para_2 = torch.randn([tensor(96)], dtype=torch.float32)
para_3 = torch.randn([tensor(96)], dtype=torch.float32)
para_4 = torch.randn([tensor(96)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2338 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2339 
para_0 = torch.randn([tensor(1), tensor(96), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2340 
para_0 = torch.randn([tensor(1), tensor(96), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(208), tensor(96), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2341 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2342 
para_0 = torch.randn([tensor(1), tensor(208), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(208)], dtype=torch.float32)
para_2 = torch.randn([tensor(208)], dtype=torch.float32)
para_3 = torch.randn([tensor(208)], dtype=torch.float32)
para_4 = torch.randn([tensor(208)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2343 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(208), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2344 
para_0 = torch.randn([tensor(1), tensor(208), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2345 
para_0 = torch.randn([tensor(1), tensor(480), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(480), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2346 
para_0 = torch.randn([tensor(1), tensor(16), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(16)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = torch.randn([tensor(16)], dtype=torch.float32)
para_4 = torch.randn([tensor(16)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2347 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2348 
para_0 = torch.randn([tensor(1), tensor(16), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2349 
para_0 = torch.randn([tensor(1), tensor(16), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(48), tensor(16), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2350 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2351 
para_0 = torch.randn([tensor(1), tensor(48), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(48)], dtype=torch.float32)
para_2 = torch.randn([tensor(48)], dtype=torch.float32)
para_3 = torch.randn([tensor(48)], dtype=torch.float32)
para_4 = torch.randn([tensor(48)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2352 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2353 
para_0 = torch.randn([tensor(1), tensor(48), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2354 
para_0 = torch.randn([tensor(1), tensor(480), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = 3
para_2 = 1
para_3 = 1
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2355 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([tensor(1), tensor(480), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2356 
para_0 = torch.randn([tensor(1), tensor(480), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(480), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2357 
para_0 = torch.randn([tensor(1), tensor(64), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(64)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = torch.randn([tensor(64)], dtype=torch.float32)
para_4 = torch.randn([tensor(64)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2358 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2359 
para_0 = torch.randn([tensor(1), tensor(64), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2360 
para_0 = torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(160), tensor(512), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2361 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2362 
para_0 = torch.randn([tensor(1), tensor(160), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(160)], dtype=torch.float32)
para_2 = torch.randn([tensor(160)], dtype=torch.float32)
para_3 = torch.randn([tensor(160)], dtype=torch.float32)
para_4 = torch.randn([tensor(160)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2363 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(160), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2364 
para_0 = torch.randn([tensor(1), tensor(160), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2365 
para_0 = torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(112), tensor(512), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2366 
para_0 = torch.randn([tensor(1), tensor(112), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(112)], dtype=torch.float32)
para_2 = torch.randn([tensor(112)], dtype=torch.float32)
para_3 = torch.randn([tensor(112)], dtype=torch.float32)
para_4 = torch.randn([tensor(112)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2367 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(112), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2368 
para_0 = torch.randn([tensor(1), tensor(112), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2369 
para_0 = torch.randn([tensor(1), tensor(112), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(224), tensor(112), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2370 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(112), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2371 
para_0 = torch.randn([tensor(1), tensor(224), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(224)], dtype=torch.float32)
para_2 = torch.randn([tensor(224)], dtype=torch.float32)
para_3 = torch.randn([tensor(224)], dtype=torch.float32)
para_4 = torch.randn([tensor(224)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2372 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(224), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2373 
para_0 = torch.randn([tensor(1), tensor(224), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2374 
para_0 = torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(24), tensor(512), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2375 
para_0 = torch.randn([tensor(1), tensor(24), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(24)], dtype=torch.float32)
para_2 = torch.randn([tensor(24)], dtype=torch.float32)
para_3 = torch.randn([tensor(24)], dtype=torch.float32)
para_4 = torch.randn([tensor(24)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2376 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(24), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2377 
para_0 = torch.randn([tensor(1), tensor(24), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2378 
para_0 = torch.randn([tensor(1), tensor(24), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(24), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2379 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(24), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2380 
para_0 = torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = 3
para_2 = 1
para_3 = 1
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2381 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2382 
para_0 = torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(512), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2383 
para_0 = torch.randn([tensor(1), tensor(128), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128)], dtype=torch.float32)
para_2 = torch.randn([tensor(128)], dtype=torch.float32)
para_3 = torch.randn([tensor(128)], dtype=torch.float32)
para_4 = torch.randn([tensor(128)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2384 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2385 
para_0 = torch.randn([tensor(1), tensor(128), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(128), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2386 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2387 
para_0 = torch.randn([tensor(1), tensor(256), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(256)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
para_3 = torch.randn([tensor(256)], dtype=torch.float32)
para_4 = torch.randn([tensor(256)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2388 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2389 
para_0 = torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(144), tensor(512), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2390 
para_0 = torch.randn([tensor(1), tensor(144), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(144)], dtype=torch.float32)
para_2 = torch.randn([tensor(144)], dtype=torch.float32)
para_3 = torch.randn([tensor(144)], dtype=torch.float32)
para_4 = torch.randn([tensor(144)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2391 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2392 
para_0 = torch.randn([tensor(1), tensor(144), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2393 
para_0 = torch.randn([tensor(1), tensor(144), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(288), tensor(144), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2394 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2395 
para_0 = torch.randn([tensor(1), tensor(288), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(288)], dtype=torch.float32)
para_2 = torch.randn([tensor(288)], dtype=torch.float32)
para_3 = torch.randn([tensor(288)], dtype=torch.float32)
para_4 = torch.randn([tensor(288)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2396 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(288), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2397 
para_0 = torch.randn([tensor(1), tensor(512), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(512), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2398 
para_0 = torch.randn([tensor(1), tensor(32), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(32)], dtype=torch.float32)
para_2 = torch.randn([tensor(32)], dtype=torch.float32)
para_3 = torch.randn([tensor(32)], dtype=torch.float32)
para_4 = torch.randn([tensor(32)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2399 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2400 
para_0 = torch.randn([tensor(1), tensor(32), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2401 
para_0 = torch.randn([tensor(1), tensor(32), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(32), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2402 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2403 
para_0 = torch.randn([tensor(1), tensor(528), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(528), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2404 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(528), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2405 
para_0 = torch.randn([tensor(1), tensor(528), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(160), tensor(528), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2406 
para_0 = torch.randn([tensor(1), tensor(160), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(320), tensor(160), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2407 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(160), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2408 
para_0 = torch.randn([tensor(1), tensor(320), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(320)], dtype=torch.float32)
para_2 = torch.randn([tensor(320)], dtype=torch.float32)
para_3 = torch.randn([tensor(320)], dtype=torch.float32)
para_4 = torch.randn([tensor(320)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2409 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(320), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2410 
para_0 = torch.randn([tensor(1), tensor(528), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(528), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2411 
para_0 = torch.randn([tensor(1), tensor(32), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(32), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2412 
para_0 = torch.randn([tensor(1), tensor(528), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = 3
para_2 = 1
para_3 = 1
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2413 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([tensor(1), tensor(528), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2414 
para_0 = torch.randn([tensor(1), tensor(528), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(528), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2415 
para_0 = torch.randn([tensor(1), tensor(832), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = 2
para_2 = 2
para_3 = 0
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2416 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([tensor(1), tensor(832), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2417 
para_0 = torch.randn([tensor(1), tensor(832), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(832), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2418 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(832), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2419 
para_0 = torch.randn([tensor(1), tensor(256), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(256)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
para_3 = torch.randn([tensor(256)], dtype=torch.float32)
para_4 = torch.randn([tensor(256)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2420 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2421 
para_0 = torch.randn([tensor(1), tensor(256), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2422 
para_0 = torch.randn([tensor(1), tensor(832), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(160), tensor(832), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2423 
para_0 = torch.randn([tensor(1), tensor(160), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(160)], dtype=torch.float32)
para_2 = torch.randn([tensor(160)], dtype=torch.float32)
para_3 = torch.randn([tensor(160)], dtype=torch.float32)
para_4 = torch.randn([tensor(160)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2424 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(160), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2425 
para_0 = torch.randn([tensor(1), tensor(160), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2426 
para_0 = torch.randn([tensor(1), tensor(160), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(320), tensor(160), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2427 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(160), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2428 
para_0 = torch.randn([tensor(1), tensor(320), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(320)], dtype=torch.float32)
para_2 = torch.randn([tensor(320)], dtype=torch.float32)
para_3 = torch.randn([tensor(320)], dtype=torch.float32)
para_4 = torch.randn([tensor(320)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2429 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(320), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2430 
para_0 = torch.randn([tensor(1), tensor(320), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2431 
para_0 = torch.randn([tensor(1), tensor(832), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(832), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2432 
para_0 = torch.randn([tensor(1), tensor(32), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(32)], dtype=torch.float32)
para_2 = torch.randn([tensor(32)], dtype=torch.float32)
para_3 = torch.randn([tensor(32)], dtype=torch.float32)
para_4 = torch.randn([tensor(32)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2433 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2434 
para_0 = torch.randn([tensor(1), tensor(32), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2435 
para_0 = torch.randn([tensor(1), tensor(32), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(32), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2436 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2437 
para_0 = torch.randn([tensor(1), tensor(128), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128)], dtype=torch.float32)
para_2 = torch.randn([tensor(128)], dtype=torch.float32)
para_3 = torch.randn([tensor(128)], dtype=torch.float32)
para_4 = torch.randn([tensor(128)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2438 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2439 
para_0 = torch.randn([tensor(1), tensor(832), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = 3
para_2 = 1
para_3 = 1
para_4 = 1
para_5 = True
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2440 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=1,padding=1,ceil_mode=True,).eval(), input_data=[torch.randn([tensor(1), tensor(832), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2441 
para_0 = torch.randn([tensor(1), tensor(832), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(384), tensor(832), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2442 
para_0 = torch.randn([tensor(1), tensor(384), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(384)], dtype=torch.float32)
para_2 = torch.randn([tensor(384)], dtype=torch.float32)
para_3 = torch.randn([tensor(384)], dtype=torch.float32)
para_4 = torch.randn([tensor(384)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2443 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(384), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2444 
para_0 = torch.randn([tensor(1), tensor(384), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2445 
para_0 = torch.randn([tensor(1), tensor(832), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(832), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2446 
para_0 = torch.randn([tensor(1), tensor(192), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(192)], dtype=torch.float32)
para_2 = torch.randn([tensor(192)], dtype=torch.float32)
para_3 = torch.randn([tensor(192)], dtype=torch.float32)
para_4 = torch.randn([tensor(192)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2447 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2448 
para_0 = torch.randn([tensor(1), tensor(192), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2449 
para_0 = torch.randn([tensor(1), tensor(192), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(384), tensor(192), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2450 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2451 
para_0 = torch.randn([tensor(1), tensor(832), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(48), tensor(832), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2452 
para_0 = torch.randn([tensor(1), tensor(48), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(48)], dtype=torch.float32)
para_2 = torch.randn([tensor(48)], dtype=torch.float32)
para_3 = torch.randn([tensor(48)], dtype=torch.float32)
para_4 = torch.randn([tensor(48)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 0.001
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2453 
verify_model(torch.nn.BatchNorm2d(128,eps=0.001,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2454 
para_0 = torch.randn([tensor(1), tensor(48), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2455 
para_0 = torch.randn([tensor(1), tensor(48), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(48), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2456 
verify_model(torch.nn.Conv2d(528,128,bias=False,kernel_size=1,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2457 
verify_model(torch.nn.AdaptiveAvgPool2d((1, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(1024), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2458 
para_0 = torch.randn([tensor(1), tensor(1024)], dtype=torch.float32)
para_1 = 0.2
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 2459 
verify_model(torch.nn.Dropout(0.2,).eval(), input_data=[torch.randn([tensor(1), tensor(1024)], dtype=torch.float32)])
# test_id: 2460 
para_0 = torch.randn([1, 3, 224, 224], dtype=torch.float32)
para_1 = torch.randn([16, 3, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2461 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 3, 224, 224], dtype=torch.float32)])
# test_id: 2462 
para_0 = torch.randn([1, 16, 112, 112], dtype=torch.float32)
para_1 = torch.randn([16], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = torch.randn([16], dtype=torch.float32)
para_4 = torch.randn([16], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2463 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 16, 112, 112], dtype=torch.float32)])
# test_id: 2464 
para_0 = torch.randn([1, 16, 112, 112], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2465 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 16, 112, 112], dtype=torch.float32)])
# test_id: 2466 
para_0 = torch.randn([1, 16, 112, 112], dtype=torch.float32)
para_1 = torch.randn([16, 1, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 16
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2467 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 16, 112, 112], dtype=torch.float32)])
# test_id: 2468 
para_0 = torch.randn([1, 16, 112, 112], dtype=torch.float32)
para_1 = torch.randn([8, 16, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2469 
para_0 = torch.randn([1, 8, 112, 112], dtype=torch.float32)
para_1 = torch.randn([8], dtype=torch.float32)
para_2 = torch.randn([8], dtype=torch.float32)
para_3 = torch.randn([8], dtype=torch.float32)
para_4 = torch.randn([8], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2470 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 8, 112, 112], dtype=torch.float32)])
# test_id: 2471 
para_0 = torch.randn([1, 8, 112, 112], dtype=torch.float32)
para_1 = torch.randn([24, 8, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2472 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 8, 112, 112], dtype=torch.float32)])
# test_id: 2473 
para_0 = torch.randn([1, 24, 112, 112], dtype=torch.float32)
para_1 = torch.randn([24], dtype=torch.float32)
para_2 = torch.randn([24], dtype=torch.float32)
para_3 = torch.randn([24], dtype=torch.float32)
para_4 = torch.randn([24], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2474 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 24, 112, 112], dtype=torch.float32)])
# test_id: 2475 
para_0 = torch.randn([1, 24, 112, 112], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2476 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 24, 112, 112], dtype=torch.float32)])
# test_id: 2477 
para_0 = torch.randn([1, 24, 112, 112], dtype=torch.float32)
para_1 = torch.randn([24, 1, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 24
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2478 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 24, 112, 112], dtype=torch.float32)])
# test_id: 2479 
para_0 = torch.randn([1, 24, 56, 56], dtype=torch.float32)
para_1 = torch.randn([24], dtype=torch.float32)
para_2 = torch.randn([24], dtype=torch.float32)
para_3 = torch.randn([24], dtype=torch.float32)
para_4 = torch.randn([24], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2480 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 24, 56, 56], dtype=torch.float32)])
# test_id: 2481 
para_0 = torch.randn([1, 24, 56, 56], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2482 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 24, 56, 56], dtype=torch.float32)])
# test_id: 2483 
para_0 = torch.randn([1, 24, 56, 56], dtype=torch.float32)
para_1 = torch.randn([16, 24, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2484 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 24, 56, 56], dtype=torch.float32)])
# test_id: 2485 
para_0 = torch.randn([1, 16, 56, 56], dtype=torch.float32)
para_1 = torch.randn([16], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = torch.randn([16], dtype=torch.float32)
para_4 = torch.randn([16], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2486 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 16, 56, 56], dtype=torch.float32)])
# test_id: 2487 
para_0 = torch.randn([1, 16, 56, 56], dtype=torch.float32)
para_1 = torch.randn([48, 16, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2488 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 16, 56, 56], dtype=torch.float32)])
# test_id: 2489 
para_0 = torch.randn([1, 48, 56, 56], dtype=torch.float32)
para_1 = torch.randn([48], dtype=torch.float32)
para_2 = torch.randn([48], dtype=torch.float32)
para_3 = torch.randn([48], dtype=torch.float32)
para_4 = torch.randn([48], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2490 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 48, 56, 56], dtype=torch.float32)])
# test_id: 2491 
para_0 = torch.randn([1, 48, 56, 56], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2492 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 48, 56, 56], dtype=torch.float32)])
# test_id: 2493 
para_0 = torch.randn([1, 48, 56, 56], dtype=torch.float32)
para_1 = torch.randn([48, 1, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 48
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2494 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 48, 56, 56], dtype=torch.float32)])
# test_id: 2495 
para_0 = torch.randn([1, 48, 56, 56], dtype=torch.float32)
para_1 = torch.randn([16, 48, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2496 
para_0 = torch.randn([1, 48, 56, 56], dtype=torch.float32)
para_1 = torch.randn([48, 1, 5, 5], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (2, 2)
para_5 = (1, 1)
para_6 = 48
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2497 
para_0 = torch.randn([1, 48, 28, 28], dtype=torch.float32)
para_1 = torch.randn([48], dtype=torch.float32)
para_2 = torch.randn([48], dtype=torch.float32)
para_3 = torch.randn([48], dtype=torch.float32)
para_4 = torch.randn([48], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2498 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 48, 28, 28], dtype=torch.float32)])
# test_id: 2499 
para_0 = torch.randn([1, 48, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2500 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 48, 28, 28], dtype=torch.float32)])
# test_id: 2501 
para_0 = torch.randn([1, 48, 28, 28], dtype=torch.float32)
para_1 = torch.randn([24, 48, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2502 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 48, 28, 28], dtype=torch.float32)])
# test_id: 2503 
para_0 = torch.randn([1, 24, 28, 28], dtype=torch.float32)
para_1 = torch.randn([24], dtype=torch.float32)
para_2 = torch.randn([24], dtype=torch.float32)
para_3 = torch.randn([24], dtype=torch.float32)
para_4 = torch.randn([24], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2504 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 24, 28, 28], dtype=torch.float32)])
# test_id: 2505 
para_0 = torch.randn([1, 24, 28, 28], dtype=torch.float32)
para_1 = torch.randn([72, 24, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2506 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 24, 28, 28], dtype=torch.float32)])
# test_id: 2507 
para_0 = torch.randn([1, 72, 28, 28], dtype=torch.float32)
para_1 = torch.randn([72], dtype=torch.float32)
para_2 = torch.randn([72], dtype=torch.float32)
para_3 = torch.randn([72], dtype=torch.float32)
para_4 = torch.randn([72], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2508 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 72, 28, 28], dtype=torch.float32)])
# test_id: 2509 
para_0 = torch.randn([1, 72, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2510 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 72, 28, 28], dtype=torch.float32)])
# test_id: 2511 
para_0 = torch.randn([1, 72, 28, 28], dtype=torch.float32)
para_1 = torch.randn([72, 1, 5, 5], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (2, 2)
para_5 = (1, 1)
para_6 = 72
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2512 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 72, 28, 28], dtype=torch.float32)])
# test_id: 2513 
para_0 = torch.randn([1, 72, 28, 28], dtype=torch.float32)
para_1 = torch.randn([24, 72, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2514 
para_0 = torch.randn([1, 24, 28, 28], dtype=torch.float32)
para_1 = torch.randn([144, 24, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2515 
para_0 = torch.randn([1, 144, 28, 28], dtype=torch.float32)
para_1 = torch.randn([144], dtype=torch.float32)
para_2 = torch.randn([144], dtype=torch.float32)
para_3 = torch.randn([144], dtype=torch.float32)
para_4 = torch.randn([144], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2516 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 144, 28, 28], dtype=torch.float32)])
# test_id: 2517 
para_0 = torch.randn([1, 144, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2518 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 144, 28, 28], dtype=torch.float32)])
# test_id: 2519 
para_0 = torch.randn([1, 144, 28, 28], dtype=torch.float32)
para_1 = torch.randn([144, 1, 5, 5], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (2, 2)
para_5 = (1, 1)
para_6 = 144
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2520 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 144, 28, 28], dtype=torch.float32)])
# test_id: 2521 
para_0 = torch.randn([1, 144, 14, 14], dtype=torch.float32)
para_1 = torch.randn([144], dtype=torch.float32)
para_2 = torch.randn([144], dtype=torch.float32)
para_3 = torch.randn([144], dtype=torch.float32)
para_4 = torch.randn([144], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2522 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 144, 14, 14], dtype=torch.float32)])
# test_id: 2523 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 144, 14, 14], dtype=torch.float32)])
# test_id: 2524 
para_0 = torch.randn([1, 144, 14, 14], dtype=torch.float32)
para_1 = torch.randn([40, 144, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2525 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 144, 14, 14], dtype=torch.float32)])
# test_id: 2526 
para_0 = torch.randn([1, 40, 14, 14], dtype=torch.float32)
para_1 = torch.randn([40], dtype=torch.float32)
para_2 = torch.randn([40], dtype=torch.float32)
para_3 = torch.randn([40], dtype=torch.float32)
para_4 = torch.randn([40], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2527 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 40, 14, 14], dtype=torch.float32)])
# test_id: 2528 
para_0 = torch.randn([1, 40, 14, 14], dtype=torch.float32)
para_1 = torch.randn([240, 40, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2529 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 40, 14, 14], dtype=torch.float32)])
# test_id: 2530 
para_0 = torch.randn([1, 240, 14, 14], dtype=torch.float32)
para_1 = torch.randn([240], dtype=torch.float32)
para_2 = torch.randn([240], dtype=torch.float32)
para_3 = torch.randn([240], dtype=torch.float32)
para_4 = torch.randn([240], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2531 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 240, 14, 14], dtype=torch.float32)])
# test_id: 2532 
para_0 = torch.randn([1, 240, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2533 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 240, 14, 14], dtype=torch.float32)])
# test_id: 2534 
para_0 = torch.randn([1, 240, 14, 14], dtype=torch.float32)
para_1 = torch.randn([240, 1, 5, 5], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (2, 2)
para_5 = (1, 1)
para_6 = 240
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2535 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 240, 14, 14], dtype=torch.float32)])
# test_id: 2536 
para_0 = torch.randn([1, 240, 14, 14], dtype=torch.float32)
para_1 = torch.randn([40, 240, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2537 
para_0 = torch.randn([1, 240, 14, 14], dtype=torch.float32)
para_1 = torch.randn([240, 1, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 240
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2538 
para_0 = torch.randn([1, 240, 14, 14], dtype=torch.float32)
para_1 = torch.randn([48, 240, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2539 
para_0 = torch.randn([1, 48, 14, 14], dtype=torch.float32)
para_1 = torch.randn([48], dtype=torch.float32)
para_2 = torch.randn([48], dtype=torch.float32)
para_3 = torch.randn([48], dtype=torch.float32)
para_4 = torch.randn([48], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2540 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 48, 14, 14], dtype=torch.float32)])
# test_id: 2541 
para_0 = torch.randn([1, 48, 14, 14], dtype=torch.float32)
para_1 = torch.randn([288, 48, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2542 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 48, 14, 14], dtype=torch.float32)])
# test_id: 2543 
para_0 = torch.randn([1, 288, 14, 14], dtype=torch.float32)
para_1 = torch.randn([288], dtype=torch.float32)
para_2 = torch.randn([288], dtype=torch.float32)
para_3 = torch.randn([288], dtype=torch.float32)
para_4 = torch.randn([288], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2544 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 288, 14, 14], dtype=torch.float32)])
# test_id: 2545 
para_0 = torch.randn([1, 288, 14, 14], dtype=torch.float32)
para_1 = torch.randn([288, 1, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 288
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2546 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 288, 14, 14], dtype=torch.float32)])
# test_id: 2547 
para_0 = torch.randn([1, 288, 14, 14], dtype=torch.float32)
para_1 = torch.randn([48, 288, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2548 
para_0 = torch.randn([1, 288, 14, 14], dtype=torch.float32)
para_1 = torch.randn([288, 1, 5, 5], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (2, 2)
para_5 = (1, 1)
para_6 = 288
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2549 
para_0 = torch.randn([1, 288, 7, 7], dtype=torch.float32)
para_1 = torch.randn([288], dtype=torch.float32)
para_2 = torch.randn([288], dtype=torch.float32)
para_3 = torch.randn([288], dtype=torch.float32)
para_4 = torch.randn([288], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2550 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 288, 7, 7], dtype=torch.float32)])
# test_id: 2551 
para_0 = torch.randn([1, 288, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2552 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 288, 7, 7], dtype=torch.float32)])
# test_id: 2553 
para_0 = torch.randn([1, 288, 7, 7], dtype=torch.float32)
para_1 = torch.randn([96, 288, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2554 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 288, 7, 7], dtype=torch.float32)])
# test_id: 2555 
para_0 = torch.randn([1, 96, 7, 7], dtype=torch.float32)
para_1 = torch.randn([96], dtype=torch.float32)
para_2 = torch.randn([96], dtype=torch.float32)
para_3 = torch.randn([96], dtype=torch.float32)
para_4 = torch.randn([96], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2556 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 96, 7, 7], dtype=torch.float32)])
# test_id: 2557 
para_0 = torch.randn([1, 96, 7, 7], dtype=torch.float32)
para_1 = torch.randn([576, 96, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2558 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 96, 7, 7], dtype=torch.float32)])
# test_id: 2559 
para_0 = torch.randn([1, 576, 7, 7], dtype=torch.float32)
para_1 = torch.randn([576], dtype=torch.float32)
para_2 = torch.randn([576], dtype=torch.float32)
para_3 = torch.randn([576], dtype=torch.float32)
para_4 = torch.randn([576], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2560 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 576, 7, 7], dtype=torch.float32)])
# test_id: 2561 
para_0 = torch.randn([1, 576, 7, 7], dtype=torch.float32)
para_1 = torch.randn([576, 1, 5, 5], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (2, 2)
para_5 = (1, 1)
para_6 = 576
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2562 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 576, 7, 7], dtype=torch.float32)])
# test_id: 2563 
para_0 = torch.randn([1, 576, 7, 7], dtype=torch.float32)
para_1 = torch.randn([96, 576, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2564 
para_0 = torch.randn([1, 576, 7, 7], dtype=torch.float32)
para_1 = torch.randn([576, 1, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 576
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2565 
para_0 = torch.randn([1, 576, 7, 7], dtype=torch.float32)
para_1 = torch.randn([160, 576, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2566 
para_0 = torch.randn([1, 160, 7, 7], dtype=torch.float32)
para_1 = torch.randn([160], dtype=torch.float32)
para_2 = torch.randn([160], dtype=torch.float32)
para_3 = torch.randn([160], dtype=torch.float32)
para_4 = torch.randn([160], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2567 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 160, 7, 7], dtype=torch.float32)])
# test_id: 2568 
para_0 = torch.randn([1, 160, 7, 7], dtype=torch.float32)
para_1 = torch.randn([1280, 160, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2569 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([1, 160, 7, 7], dtype=torch.float32)])
# test_id: 2570 
para_0 = torch.randn([1, 1280, 7, 7], dtype=torch.float32)
para_1 = torch.randn([1280], dtype=torch.float32)
para_2 = torch.randn([1280], dtype=torch.float32)
para_3 = torch.randn([1280], dtype=torch.float32)
para_4 = torch.randn([1280], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2571 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([1, 1280, 7, 7], dtype=torch.float32)])
# test_id: 2572 
para_0 = torch.randn([1, 1280, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2573 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 1280, 7, 7], dtype=torch.float32)])
# test_id: 2574 
para_0 = torch.randn([1, 1280], dtype=torch.float32)
para_1 = 0.2
para_2 = False
para_3 = True
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 2575 
verify_model(torch.nn.Dropout(p=0.2,inplace=True,).eval(), input_data=[torch.randn([1, 1280], dtype=torch.float32)])
# test_id: 2576 
para_0 = torch.randn([1, 1280], dtype=torch.float32)
para_1 = torch.randn([1000, 1280], dtype=torch.float32)
para_2 = torch.randn([1000], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 2577 
verify_model(torch.nn.Linear(1280,1000,).eval(), input_data=[torch.randn([1, 1280], dtype=torch.float32)])
# test_id: 2578 
para_0 = torch.randn([tensor(1), tensor(3), tensor(224), tensor(224)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2579 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(224), tensor(224)], dtype=torch.float32)])
# test_id: 2580 
para_0 = torch.randn([tensor(1), tensor(16), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = torch.randn([tensor(16)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = torch.randn([tensor(16)], dtype=torch.float32)
para_4 = torch.randn([tensor(16)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2581 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2582 
para_0 = torch.randn([tensor(1), tensor(16), tensor(112), tensor(112)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2583 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2584 
para_0 = torch.randn([tensor(1), tensor(16), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 16
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2585 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2586 
para_0 = torch.randn([tensor(1), tensor(16), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = torch.randn([tensor(8), tensor(16), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2587 
para_0 = torch.randn([tensor(1), tensor(8), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = torch.randn([tensor(8)], dtype=torch.float32)
para_2 = torch.randn([tensor(8)], dtype=torch.float32)
para_3 = torch.randn([tensor(8)], dtype=torch.float32)
para_4 = torch.randn([tensor(8)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2588 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(8), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2589 
para_0 = torch.randn([tensor(1), tensor(8), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = torch.randn([tensor(24), tensor(8), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2590 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(8), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2591 
para_0 = torch.randn([tensor(1), tensor(24), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = torch.randn([tensor(24)], dtype=torch.float32)
para_2 = torch.randn([tensor(24)], dtype=torch.float32)
para_3 = torch.randn([tensor(24)], dtype=torch.float32)
para_4 = torch.randn([tensor(24)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2592 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(24), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2593 
para_0 = torch.randn([tensor(1), tensor(24), tensor(112), tensor(112)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2594 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(24), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2595 
para_0 = torch.randn([tensor(1), tensor(24), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = torch.randn([tensor(24), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 24
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2596 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(24), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2597 
para_0 = torch.randn([tensor(1), tensor(24), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(24)], dtype=torch.float32)
para_2 = torch.randn([tensor(24)], dtype=torch.float32)
para_3 = torch.randn([tensor(24)], dtype=torch.float32)
para_4 = torch.randn([tensor(24)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2598 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(24), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2599 
para_0 = torch.randn([tensor(1), tensor(24), tensor(56), tensor(56)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2600 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(24), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2601 
para_0 = torch.randn([tensor(1), tensor(24), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(24), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2602 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(24), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2603 
para_0 = torch.randn([tensor(1), tensor(16), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(16)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = torch.randn([tensor(16)], dtype=torch.float32)
para_4 = torch.randn([tensor(16)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2604 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2605 
para_0 = torch.randn([tensor(1), tensor(16), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(48), tensor(16), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2606 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2607 
para_0 = torch.randn([tensor(1), tensor(48), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(48)], dtype=torch.float32)
para_2 = torch.randn([tensor(48)], dtype=torch.float32)
para_3 = torch.randn([tensor(48)], dtype=torch.float32)
para_4 = torch.randn([tensor(48)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2608 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2609 
para_0 = torch.randn([tensor(1), tensor(48), tensor(56), tensor(56)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2610 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2611 
para_0 = torch.randn([tensor(1), tensor(48), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(48), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 48
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2612 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2613 
para_0 = torch.randn([tensor(1), tensor(48), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(48), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2614 
para_0 = torch.randn([tensor(1), tensor(48), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(48), tensor(1), tensor(5), tensor(5)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (2, 2)
para_5 = (1, 1)
para_6 = 48
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2615 
para_0 = torch.randn([tensor(1), tensor(48), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(48)], dtype=torch.float32)
para_2 = torch.randn([tensor(48)], dtype=torch.float32)
para_3 = torch.randn([tensor(48)], dtype=torch.float32)
para_4 = torch.randn([tensor(48)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2616 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2617 
para_0 = torch.randn([tensor(1), tensor(48), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2618 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2619 
para_0 = torch.randn([tensor(1), tensor(48), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(24), tensor(48), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2620 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2621 
para_0 = torch.randn([tensor(1), tensor(24), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(24)], dtype=torch.float32)
para_2 = torch.randn([tensor(24)], dtype=torch.float32)
para_3 = torch.randn([tensor(24)], dtype=torch.float32)
para_4 = torch.randn([tensor(24)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2622 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(24), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2623 
para_0 = torch.randn([tensor(1), tensor(24), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(72), tensor(24), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2624 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(24), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2625 
para_0 = torch.randn([tensor(1), tensor(72), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(72)], dtype=torch.float32)
para_2 = torch.randn([tensor(72)], dtype=torch.float32)
para_3 = torch.randn([tensor(72)], dtype=torch.float32)
para_4 = torch.randn([tensor(72)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2626 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(72), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2627 
para_0 = torch.randn([tensor(1), tensor(72), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2628 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(72), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2629 
para_0 = torch.randn([tensor(1), tensor(72), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(72), tensor(1), tensor(5), tensor(5)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (2, 2)
para_5 = (1, 1)
para_6 = 72
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2630 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(72), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2631 
para_0 = torch.randn([tensor(1), tensor(72), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(24), tensor(72), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2632 
para_0 = torch.randn([tensor(1), tensor(24), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(144), tensor(24), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2633 
para_0 = torch.randn([tensor(1), tensor(144), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(144)], dtype=torch.float32)
para_2 = torch.randn([tensor(144)], dtype=torch.float32)
para_3 = torch.randn([tensor(144)], dtype=torch.float32)
para_4 = torch.randn([tensor(144)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2634 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2635 
para_0 = torch.randn([tensor(1), tensor(144), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2636 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2637 
para_0 = torch.randn([tensor(1), tensor(144), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(144), tensor(1), tensor(5), tensor(5)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (2, 2)
para_5 = (1, 1)
para_6 = 144
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2638 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2639 
para_0 = torch.randn([tensor(1), tensor(144), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(144)], dtype=torch.float32)
para_2 = torch.randn([tensor(144)], dtype=torch.float32)
para_3 = torch.randn([tensor(144)], dtype=torch.float32)
para_4 = torch.randn([tensor(144)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2640 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2641 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2642 
para_0 = torch.randn([tensor(1), tensor(144), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(40), tensor(144), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2643 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2644 
para_0 = torch.randn([tensor(1), tensor(40), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(40)], dtype=torch.float32)
para_2 = torch.randn([tensor(40)], dtype=torch.float32)
para_3 = torch.randn([tensor(40)], dtype=torch.float32)
para_4 = torch.randn([tensor(40)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2645 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(40), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2646 
para_0 = torch.randn([tensor(1), tensor(40), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(240), tensor(40), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2647 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(40), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2648 
para_0 = torch.randn([tensor(1), tensor(240), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(240)], dtype=torch.float32)
para_2 = torch.randn([tensor(240)], dtype=torch.float32)
para_3 = torch.randn([tensor(240)], dtype=torch.float32)
para_4 = torch.randn([tensor(240)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2649 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(240), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2650 
para_0 = torch.randn([tensor(1), tensor(240), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2651 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(240), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2652 
para_0 = torch.randn([tensor(1), tensor(240), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(240), tensor(1), tensor(5), tensor(5)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (2, 2)
para_5 = (1, 1)
para_6 = 240
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2653 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(240), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2654 
para_0 = torch.randn([tensor(1), tensor(240), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(40), tensor(240), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2655 
para_0 = torch.randn([tensor(1), tensor(240), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(240), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 240
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2656 
para_0 = torch.randn([tensor(1), tensor(240), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(48), tensor(240), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2657 
para_0 = torch.randn([tensor(1), tensor(48), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(48)], dtype=torch.float32)
para_2 = torch.randn([tensor(48)], dtype=torch.float32)
para_3 = torch.randn([tensor(48)], dtype=torch.float32)
para_4 = torch.randn([tensor(48)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2658 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2659 
para_0 = torch.randn([tensor(1), tensor(48), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(288), tensor(48), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2660 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(48), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2661 
para_0 = torch.randn([tensor(1), tensor(288), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(288)], dtype=torch.float32)
para_2 = torch.randn([tensor(288)], dtype=torch.float32)
para_3 = torch.randn([tensor(288)], dtype=torch.float32)
para_4 = torch.randn([tensor(288)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2662 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(288), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2663 
para_0 = torch.randn([tensor(1), tensor(288), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(288), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 288
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2664 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(288), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2665 
para_0 = torch.randn([tensor(1), tensor(288), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(48), tensor(288), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2666 
para_0 = torch.randn([tensor(1), tensor(288), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(288), tensor(1), tensor(5), tensor(5)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (2, 2)
para_5 = (1, 1)
para_6 = 288
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2667 
para_0 = torch.randn([tensor(1), tensor(288), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(288)], dtype=torch.float32)
para_2 = torch.randn([tensor(288)], dtype=torch.float32)
para_3 = torch.randn([tensor(288)], dtype=torch.float32)
para_4 = torch.randn([tensor(288)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2668 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(288), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2669 
para_0 = torch.randn([tensor(1), tensor(288), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2670 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(288), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2671 
para_0 = torch.randn([tensor(1), tensor(288), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(96), tensor(288), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2672 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(288), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2673 
para_0 = torch.randn([tensor(1), tensor(96), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(96)], dtype=torch.float32)
para_2 = torch.randn([tensor(96)], dtype=torch.float32)
para_3 = torch.randn([tensor(96)], dtype=torch.float32)
para_4 = torch.randn([tensor(96)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2674 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2675 
para_0 = torch.randn([tensor(1), tensor(96), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(576), tensor(96), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2676 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2677 
para_0 = torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(576)], dtype=torch.float32)
para_2 = torch.randn([tensor(576)], dtype=torch.float32)
para_3 = torch.randn([tensor(576)], dtype=torch.float32)
para_4 = torch.randn([tensor(576)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2678 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2679 
para_0 = torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(576), tensor(1), tensor(5), tensor(5)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (2, 2)
para_5 = (1, 1)
para_6 = 576
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2680 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2681 
para_0 = torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(96), tensor(576), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2682 
para_0 = torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(576), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 576
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2683 
para_0 = torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(160), tensor(576), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2684 
para_0 = torch.randn([tensor(1), tensor(160), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(160)], dtype=torch.float32)
para_2 = torch.randn([tensor(160)], dtype=torch.float32)
para_3 = torch.randn([tensor(160)], dtype=torch.float32)
para_4 = torch.randn([tensor(160)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2685 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(160), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2686 
para_0 = torch.randn([tensor(1), tensor(160), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(1280), tensor(160), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2687 
verify_model(torch.nn.Conv2d(160,1280,1,padding=0,stride=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(160), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2688 
para_0 = torch.randn([tensor(1), tensor(1280), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(1280)], dtype=torch.float32)
para_2 = torch.randn([tensor(1280)], dtype=torch.float32)
para_3 = torch.randn([tensor(1280)], dtype=torch.float32)
para_4 = torch.randn([tensor(1280)], dtype=torch.float32)
para_5 = False
para_6 = 0.00029999999999996696
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2689 
verify_model(torch.nn.BatchNorm2d(1280,momentum=0.00029999999999996696,).eval(), input_data=[torch.randn([tensor(1), tensor(1280), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2690 
para_0 = torch.randn([tensor(1), tensor(1280), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2691 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(1280), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2692 
para_0 = torch.randn([tensor(1), tensor(1280)], dtype=torch.float32)
para_1 = 0.2
para_2 = False
para_3 = True
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 2693 
verify_model(torch.nn.Dropout(p=0.2,inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(1280)], dtype=torch.float32)])
# test_id: 2694 
para_0 = torch.randn([tensor(1), tensor(1280)], dtype=torch.float32)
para_1 = torch.randn([tensor(1000), tensor(1280)], dtype=torch.float32)
para_2 = torch.randn([tensor(1000)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 2695 
verify_model(torch.nn.Linear(1280,1000,).eval(), input_data=[torch.randn([tensor(1), tensor(1280)], dtype=torch.float32)])
# test_id: 2696 
para_0 = torch.randn([1, 3, 224, 224], dtype=torch.float32)
para_1 = torch.randn([32, 3, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2697 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 3, 224, 224], dtype=torch.float32)])
# test_id: 2698 
para_0 = torch.randn([1, 32, 112, 112], dtype=torch.float32)
para_1 = torch.randn([32], dtype=torch.float32)
para_2 = torch.randn([32], dtype=torch.float32)
para_3 = torch.randn([32], dtype=torch.float32)
para_4 = torch.randn([32], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2699 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 32, 112, 112], dtype=torch.float32)])
# test_id: 2700 
para_0 = torch.randn([1, 32, 112, 112], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2701 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([1, 32, 112, 112], dtype=torch.float32)])
# test_id: 2702 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([1, 32, 112, 112], dtype=torch.float32)])
# test_id: 2703 
para_0 = torch.randn([1, 32, 112, 112], dtype=torch.float32)
para_1 = torch.randn([32, 1, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 32
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2704 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 32, 112, 112], dtype=torch.float32)])
# test_id: 2705 
para_0 = torch.randn([1, 32, 112, 112], dtype=torch.float32)
para_1 = torch.randn([16, 32, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2706 
para_0 = torch.randn([1, 16, 112, 112], dtype=torch.float32)
para_1 = torch.randn([16], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = torch.randn([16], dtype=torch.float32)
para_4 = torch.randn([16], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2707 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 16, 112, 112], dtype=torch.float32)])
# test_id: 2708 
para_0 = torch.randn([1, 16, 112, 112], dtype=torch.float32)
para_1 = torch.randn([96, 16, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2709 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 16, 112, 112], dtype=torch.float32)])
# test_id: 2710 
para_0 = torch.randn([1, 96, 112, 112], dtype=torch.float32)
para_1 = torch.randn([96], dtype=torch.float32)
para_2 = torch.randn([96], dtype=torch.float32)
para_3 = torch.randn([96], dtype=torch.float32)
para_4 = torch.randn([96], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2711 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 96, 112, 112], dtype=torch.float32)])
# test_id: 2712 
para_0 = torch.randn([1, 96, 112, 112], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2713 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([1, 96, 112, 112], dtype=torch.float32)])
# test_id: 2714 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([1, 96, 112, 112], dtype=torch.float32)])
# test_id: 2715 
para_0 = torch.randn([1, 96, 112, 112], dtype=torch.float32)
para_1 = torch.randn([96, 1, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 96
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2716 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 96, 112, 112], dtype=torch.float32)])
# test_id: 2717 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 96, 56, 56], dtype=torch.float32)])
# test_id: 2718 
para_0 = torch.randn([1, 96, 56, 56], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2719 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([1, 96, 56, 56], dtype=torch.float32)])
# test_id: 2720 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([1, 96, 56, 56], dtype=torch.float32)])
# test_id: 2721 
para_0 = torch.randn([1, 96, 56, 56], dtype=torch.float32)
para_1 = torch.randn([24, 96, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2722 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 96, 56, 56], dtype=torch.float32)])
# test_id: 2723 
para_0 = torch.randn([1, 24, 56, 56], dtype=torch.float32)
para_1 = torch.randn([24], dtype=torch.float32)
para_2 = torch.randn([24], dtype=torch.float32)
para_3 = torch.randn([24], dtype=torch.float32)
para_4 = torch.randn([24], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2724 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 24, 56, 56], dtype=torch.float32)])
# test_id: 2725 
para_0 = torch.randn([1, 24, 56, 56], dtype=torch.float32)
para_1 = torch.randn([144, 24, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2726 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 24, 56, 56], dtype=torch.float32)])
# test_id: 2727 
para_0 = torch.randn([1, 144, 56, 56], dtype=torch.float32)
para_1 = torch.randn([144], dtype=torch.float32)
para_2 = torch.randn([144], dtype=torch.float32)
para_3 = torch.randn([144], dtype=torch.float32)
para_4 = torch.randn([144], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2728 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 144, 56, 56], dtype=torch.float32)])
# test_id: 2729 
para_0 = torch.randn([1, 144, 56, 56], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2730 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([1, 144, 56, 56], dtype=torch.float32)])
# test_id: 2731 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([1, 144, 56, 56], dtype=torch.float32)])
# test_id: 2732 
para_0 = torch.randn([1, 144, 56, 56], dtype=torch.float32)
para_1 = torch.randn([144, 1, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 144
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2733 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 144, 56, 56], dtype=torch.float32)])
# test_id: 2734 
para_0 = torch.randn([1, 144, 56, 56], dtype=torch.float32)
para_1 = torch.randn([24, 144, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2735 
para_0 = torch.randn([1, 144, 56, 56], dtype=torch.float32)
para_1 = torch.randn([144, 1, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 144
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2736 
para_0 = torch.randn([1, 144, 28, 28], dtype=torch.float32)
para_1 = torch.randn([144], dtype=torch.float32)
para_2 = torch.randn([144], dtype=torch.float32)
para_3 = torch.randn([144], dtype=torch.float32)
para_4 = torch.randn([144], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2737 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 144, 28, 28], dtype=torch.float32)])
# test_id: 2738 
para_0 = torch.randn([1, 144, 28, 28], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2739 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([1, 144, 28, 28], dtype=torch.float32)])
# test_id: 2740 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([1, 144, 28, 28], dtype=torch.float32)])
# test_id: 2741 
para_0 = torch.randn([1, 144, 28, 28], dtype=torch.float32)
para_1 = torch.randn([32, 144, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2742 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 144, 28, 28], dtype=torch.float32)])
# test_id: 2743 
para_0 = torch.randn([1, 32, 28, 28], dtype=torch.float32)
para_1 = torch.randn([32], dtype=torch.float32)
para_2 = torch.randn([32], dtype=torch.float32)
para_3 = torch.randn([32], dtype=torch.float32)
para_4 = torch.randn([32], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2744 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 32, 28, 28], dtype=torch.float32)])
# test_id: 2745 
para_0 = torch.randn([1, 32, 28, 28], dtype=torch.float32)
para_1 = torch.randn([192, 32, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2746 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 32, 28, 28], dtype=torch.float32)])
# test_id: 2747 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 192, 28, 28], dtype=torch.float32)])
# test_id: 2748 
para_0 = torch.randn([1, 192, 28, 28], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2749 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([1, 192, 28, 28], dtype=torch.float32)])
# test_id: 2750 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([1, 192, 28, 28], dtype=torch.float32)])
# test_id: 2751 
para_0 = torch.randn([1, 192, 28, 28], dtype=torch.float32)
para_1 = torch.randn([192, 1, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 192
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2752 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 192, 28, 28], dtype=torch.float32)])
# test_id: 2753 
para_0 = torch.randn([1, 192, 28, 28], dtype=torch.float32)
para_1 = torch.randn([192, 1, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 192
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2754 
para_0 = torch.randn([1, 192, 14, 14], dtype=torch.float32)
para_1 = torch.randn([192], dtype=torch.float32)
para_2 = torch.randn([192], dtype=torch.float32)
para_3 = torch.randn([192], dtype=torch.float32)
para_4 = torch.randn([192], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2755 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 192, 14, 14], dtype=torch.float32)])
# test_id: 2756 
para_0 = torch.randn([1, 192, 14, 14], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2757 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([1, 192, 14, 14], dtype=torch.float32)])
# test_id: 2758 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([1, 192, 14, 14], dtype=torch.float32)])
# test_id: 2759 
para_0 = torch.randn([1, 192, 14, 14], dtype=torch.float32)
para_1 = torch.randn([64, 192, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2760 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 192, 14, 14], dtype=torch.float32)])
# test_id: 2761 
para_0 = torch.randn([1, 64, 14, 14], dtype=torch.float32)
para_1 = torch.randn([64], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = torch.randn([64], dtype=torch.float32)
para_4 = torch.randn([64], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2762 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 64, 14, 14], dtype=torch.float32)])
# test_id: 2763 
para_0 = torch.randn([1, 64, 14, 14], dtype=torch.float32)
para_1 = torch.randn([384, 64, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2764 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 64, 14, 14], dtype=torch.float32)])
# test_id: 2765 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 384, 14, 14], dtype=torch.float32)])
# test_id: 2766 
para_0 = torch.randn([1, 384, 14, 14], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2767 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([1, 384, 14, 14], dtype=torch.float32)])
# test_id: 2768 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([1, 384, 14, 14], dtype=torch.float32)])
# test_id: 2769 
para_0 = torch.randn([1, 384, 14, 14], dtype=torch.float32)
para_1 = torch.randn([384, 1, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 384
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2770 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 384, 14, 14], dtype=torch.float32)])
# test_id: 2771 
para_0 = torch.randn([1, 384, 14, 14], dtype=torch.float32)
para_1 = torch.randn([64, 384, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2772 
para_0 = torch.randn([1, 384, 14, 14], dtype=torch.float32)
para_1 = torch.randn([96, 384, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2773 
para_0 = torch.randn([1, 96, 14, 14], dtype=torch.float32)
para_1 = torch.randn([96], dtype=torch.float32)
para_2 = torch.randn([96], dtype=torch.float32)
para_3 = torch.randn([96], dtype=torch.float32)
para_4 = torch.randn([96], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2774 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 96, 14, 14], dtype=torch.float32)])
# test_id: 2775 
para_0 = torch.randn([1, 96, 14, 14], dtype=torch.float32)
para_1 = torch.randn([576, 96, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2776 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 96, 14, 14], dtype=torch.float32)])
# test_id: 2777 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 576, 14, 14], dtype=torch.float32)])
# test_id: 2778 
para_0 = torch.randn([1, 576, 14, 14], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2779 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([1, 576, 14, 14], dtype=torch.float32)])
# test_id: 2780 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([1, 576, 14, 14], dtype=torch.float32)])
# test_id: 2781 
para_0 = torch.randn([1, 576, 14, 14], dtype=torch.float32)
para_1 = torch.randn([576, 1, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 576
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2782 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 576, 14, 14], dtype=torch.float32)])
# test_id: 2783 
para_0 = torch.randn([1, 576, 14, 14], dtype=torch.float32)
para_1 = torch.randn([96, 576, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2784 
para_0 = torch.randn([1, 576, 14, 14], dtype=torch.float32)
para_1 = torch.randn([576, 1, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 576
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2785 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 576, 7, 7], dtype=torch.float32)])
# test_id: 2786 
para_0 = torch.randn([1, 576, 7, 7], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2787 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([1, 576, 7, 7], dtype=torch.float32)])
# test_id: 2788 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([1, 576, 7, 7], dtype=torch.float32)])
# test_id: 2789 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 576, 7, 7], dtype=torch.float32)])
# test_id: 2790 
para_0 = torch.randn([1, 160, 7, 7], dtype=torch.float32)
para_1 = torch.randn([160], dtype=torch.float32)
para_2 = torch.randn([160], dtype=torch.float32)
para_3 = torch.randn([160], dtype=torch.float32)
para_4 = torch.randn([160], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2791 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 160, 7, 7], dtype=torch.float32)])
# test_id: 2792 
para_0 = torch.randn([1, 160, 7, 7], dtype=torch.float32)
para_1 = torch.randn([960, 160, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2793 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 160, 7, 7], dtype=torch.float32)])
# test_id: 2794 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 960, 7, 7], dtype=torch.float32)])
# test_id: 2795 
para_0 = torch.randn([1, 960, 7, 7], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2796 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([1, 960, 7, 7], dtype=torch.float32)])
# test_id: 2797 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([1, 960, 7, 7], dtype=torch.float32)])
# test_id: 2798 
para_0 = torch.randn([1, 960, 7, 7], dtype=torch.float32)
para_1 = torch.randn([960, 1, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 960
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2799 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 960, 7, 7], dtype=torch.float32)])
# test_id: 2800 
para_0 = torch.randn([1, 960, 7, 7], dtype=torch.float32)
para_1 = torch.randn([160, 960, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2801 
para_0 = torch.randn([1, 960, 7, 7], dtype=torch.float32)
para_1 = torch.randn([320, 960, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2802 
para_0 = torch.randn([1, 320, 7, 7], dtype=torch.float32)
para_1 = torch.randn([320], dtype=torch.float32)
para_2 = torch.randn([320], dtype=torch.float32)
para_3 = torch.randn([320], dtype=torch.float32)
para_4 = torch.randn([320], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2803 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 320, 7, 7], dtype=torch.float32)])
# test_id: 2804 
para_0 = torch.randn([1, 320, 7, 7], dtype=torch.float32)
para_1 = torch.randn([1280, 320, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2805 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([1, 320, 7, 7], dtype=torch.float32)])
# test_id: 2806 
para_0 = torch.randn([1, 1280, 7, 7], dtype=torch.float32)
para_1 = torch.randn([1280], dtype=torch.float32)
para_2 = torch.randn([1280], dtype=torch.float32)
para_3 = torch.randn([1280], dtype=torch.float32)
para_4 = torch.randn([1280], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2807 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([1, 1280, 7, 7], dtype=torch.float32)])
# test_id: 2808 
para_0 = torch.randn([1, 1280, 7, 7], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2809 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([1, 1280, 7, 7], dtype=torch.float32)])
# test_id: 2810 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([1, 1280, 7, 7], dtype=torch.float32)])
# test_id: 2811 
para_0 = torch.randn([1, 1280, 7, 7], dtype=torch.float32)
para_1 = 1
class adaptive_avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool2d(args[0], para_1,)
verify_model(adaptive_avg_pool2d().float().eval(), input_data=para_0)


# test_id: 2812 
para_0 = torch.randn([1, 1280], dtype=torch.float32)
para_1 = 0.2
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 2813 
verify_model(torch.nn.Dropout(0.2,).eval(), input_data=[torch.randn([1, 1280], dtype=torch.float32)])
# test_id: 2814 
para_0 = torch.randn([tensor(1), tensor(3), tensor(224), tensor(224)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2815 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(224), tensor(224)], dtype=torch.float32)])
# test_id: 2816 
para_0 = torch.randn([tensor(1), tensor(32), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = torch.randn([tensor(32)], dtype=torch.float32)
para_2 = torch.randn([tensor(32)], dtype=torch.float32)
para_3 = torch.randn([tensor(32)], dtype=torch.float32)
para_4 = torch.randn([tensor(32)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2817 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2818 
para_0 = torch.randn([tensor(1), tensor(32), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2819 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2820 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2821 
para_0 = torch.randn([tensor(1), tensor(32), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 32
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2822 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2823 
para_0 = torch.randn([tensor(1), tensor(32), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = torch.randn([tensor(16), tensor(32), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2824 
para_0 = torch.randn([tensor(1), tensor(16), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = torch.randn([tensor(16)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = torch.randn([tensor(16)], dtype=torch.float32)
para_4 = torch.randn([tensor(16)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2825 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2826 
para_0 = torch.randn([tensor(1), tensor(16), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = torch.randn([tensor(96), tensor(16), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2827 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(16), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2828 
para_0 = torch.randn([tensor(1), tensor(96), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = torch.randn([tensor(96)], dtype=torch.float32)
para_2 = torch.randn([tensor(96)], dtype=torch.float32)
para_3 = torch.randn([tensor(96)], dtype=torch.float32)
para_4 = torch.randn([tensor(96)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2829 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2830 
para_0 = torch.randn([tensor(1), tensor(96), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2831 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2832 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2833 
para_0 = torch.randn([tensor(1), tensor(96), tensor(112), tensor(112)], dtype=torch.float32)
para_1 = torch.randn([tensor(96), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 96
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2834 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(112), tensor(112)], dtype=torch.float32)])
# test_id: 2835 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2836 
para_0 = torch.randn([tensor(1), tensor(96), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2837 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2838 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2839 
para_0 = torch.randn([tensor(1), tensor(96), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(24), tensor(96), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2840 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2841 
para_0 = torch.randn([tensor(1), tensor(24), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(24)], dtype=torch.float32)
para_2 = torch.randn([tensor(24)], dtype=torch.float32)
para_3 = torch.randn([tensor(24)], dtype=torch.float32)
para_4 = torch.randn([tensor(24)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2842 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(24), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2843 
para_0 = torch.randn([tensor(1), tensor(24), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(144), tensor(24), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2844 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(24), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2845 
para_0 = torch.randn([tensor(1), tensor(144), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(144)], dtype=torch.float32)
para_2 = torch.randn([tensor(144)], dtype=torch.float32)
para_3 = torch.randn([tensor(144)], dtype=torch.float32)
para_4 = torch.randn([tensor(144)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2846 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2847 
para_0 = torch.randn([tensor(1), tensor(144), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2848 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2849 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2850 
para_0 = torch.randn([tensor(1), tensor(144), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(144), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 144
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2851 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 2852 
para_0 = torch.randn([tensor(1), tensor(144), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(24), tensor(144), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2853 
para_0 = torch.randn([tensor(1), tensor(144), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(144), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 144
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2854 
para_0 = torch.randn([tensor(1), tensor(144), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(144)], dtype=torch.float32)
para_2 = torch.randn([tensor(144)], dtype=torch.float32)
para_3 = torch.randn([tensor(144)], dtype=torch.float32)
para_4 = torch.randn([tensor(144)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2855 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2856 
para_0 = torch.randn([tensor(1), tensor(144), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2857 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2858 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2859 
para_0 = torch.randn([tensor(1), tensor(144), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(32), tensor(144), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2860 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(144), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2861 
para_0 = torch.randn([tensor(1), tensor(32), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(32)], dtype=torch.float32)
para_2 = torch.randn([tensor(32)], dtype=torch.float32)
para_3 = torch.randn([tensor(32)], dtype=torch.float32)
para_4 = torch.randn([tensor(32)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2862 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2863 
para_0 = torch.randn([tensor(1), tensor(32), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(32), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2864 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2865 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2866 
para_0 = torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2867 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2868 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2869 
para_0 = torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 192
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2870 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 2871 
para_0 = torch.randn([tensor(1), tensor(192), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(192), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 192
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2872 
para_0 = torch.randn([tensor(1), tensor(192), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(192)], dtype=torch.float32)
para_2 = torch.randn([tensor(192)], dtype=torch.float32)
para_3 = torch.randn([tensor(192)], dtype=torch.float32)
para_4 = torch.randn([tensor(192)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2873 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2874 
para_0 = torch.randn([tensor(1), tensor(192), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2875 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2876 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2877 
para_0 = torch.randn([tensor(1), tensor(192), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(192), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2878 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(192), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2879 
para_0 = torch.randn([tensor(1), tensor(64), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(64)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = torch.randn([tensor(64)], dtype=torch.float32)
para_4 = torch.randn([tensor(64)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2880 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2881 
para_0 = torch.randn([tensor(1), tensor(64), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(384), tensor(64), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2882 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2883 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(384), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2884 
para_0 = torch.randn([tensor(1), tensor(384), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2885 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([tensor(1), tensor(384), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2886 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(384), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2887 
para_0 = torch.randn([tensor(1), tensor(384), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(384), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 384
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2888 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(384), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2889 
para_0 = torch.randn([tensor(1), tensor(384), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(384), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2890 
para_0 = torch.randn([tensor(1), tensor(384), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(96), tensor(384), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2891 
para_0 = torch.randn([tensor(1), tensor(96), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(96)], dtype=torch.float32)
para_2 = torch.randn([tensor(96)], dtype=torch.float32)
para_3 = torch.randn([tensor(96)], dtype=torch.float32)
para_4 = torch.randn([tensor(96)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2892 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2893 
para_0 = torch.randn([tensor(1), tensor(96), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(576), tensor(96), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2894 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(96), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2895 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(576), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2896 
para_0 = torch.randn([tensor(1), tensor(576), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2897 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([tensor(1), tensor(576), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2898 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(576), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2899 
para_0 = torch.randn([tensor(1), tensor(576), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(576), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 576
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2900 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(576), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 2901 
para_0 = torch.randn([tensor(1), tensor(576), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(96), tensor(576), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2902 
para_0 = torch.randn([tensor(1), tensor(576), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(576), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 576
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2903 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2904 
para_0 = torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2905 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2906 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2907 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(576), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2908 
para_0 = torch.randn([tensor(1), tensor(160), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(160)], dtype=torch.float32)
para_2 = torch.randn([tensor(160)], dtype=torch.float32)
para_3 = torch.randn([tensor(160)], dtype=torch.float32)
para_4 = torch.randn([tensor(160)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2909 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(160), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2910 
para_0 = torch.randn([tensor(1), tensor(160), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(960), tensor(160), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2911 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(160), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2912 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(960), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2913 
para_0 = torch.randn([tensor(1), tensor(960), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2914 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([tensor(1), tensor(960), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2915 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(960), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2916 
para_0 = torch.randn([tensor(1), tensor(960), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(960), tensor(1), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 960
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2917 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(960), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2918 
para_0 = torch.randn([tensor(1), tensor(960), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(160), tensor(960), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2919 
para_0 = torch.randn([tensor(1), tensor(960), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(320), tensor(960), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2920 
para_0 = torch.randn([tensor(1), tensor(320), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(320)], dtype=torch.float32)
para_2 = torch.randn([tensor(320)], dtype=torch.float32)
para_3 = torch.randn([tensor(320)], dtype=torch.float32)
para_4 = torch.randn([tensor(320)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2921 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(320), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2922 
para_0 = torch.randn([tensor(1), tensor(320), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(1280), tensor(320), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2923 
verify_model(torch.nn.Conv2d(320,1280,1,1,0,groups=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(320), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2924 
para_0 = torch.randn([tensor(1), tensor(1280), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(1280)], dtype=torch.float32)
para_2 = torch.randn([tensor(1280)], dtype=torch.float32)
para_3 = torch.randn([tensor(1280)], dtype=torch.float32)
para_4 = torch.randn([tensor(1280)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2925 
verify_model(torch.nn.BatchNorm2d(1280,).eval(), input_data=[torch.randn([tensor(1), tensor(1280), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2926 
para_0 = torch.randn([tensor(1), tensor(1280), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = 0.0
para_2 = 6.0
para_3 = True
class hardtanh(Module):
    def forward(self, *args):
        return torch.nn.functional.hardtanh(args[0], para_1,para_2,para_3,)
verify_model(hardtanh().float().eval(), input_data=para_0)


# test_id: 2927 
verify_model(torch.nn.Hardtanh(0.0,6.0,True,).eval(), input_data=[torch.randn([tensor(1), tensor(1280), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2928 
verify_model(torch.nn.ReLU6(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(1280), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 2929 
para_0 = torch.randn([tensor(1), tensor(1280), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = 1
class adaptive_avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool2d(args[0], para_1,)
verify_model(adaptive_avg_pool2d().float().eval(), input_data=para_0)


# test_id: 2930 
para_0 = torch.randn([tensor(1), tensor(1280)], dtype=torch.float32)
para_1 = 0.2
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 2931 
verify_model(torch.nn.Dropout(0.2,).eval(), input_data=[torch.randn([tensor(1), tensor(1280)], dtype=torch.float32)])
# test_id: 2932 
para_0 = torch.randn([1, 3, 300, 300], dtype=torch.float32)
para_1 = torch.randn([64, 3, 7, 7], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (3, 3)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2933 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([1, 3, 300, 300], dtype=torch.float32)])
# test_id: 2934 
para_0 = torch.randn([1, 64, 150, 150], dtype=torch.float32)
para_1 = torch.randn([64], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = torch.randn([64], dtype=torch.float32)
para_4 = torch.randn([64], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2935 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([1, 64, 150, 150], dtype=torch.float32)])
# test_id: 2936 
para_0 = torch.randn([1, 64, 150, 150], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2937 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([1, 64, 150, 150], dtype=torch.float32)])
# test_id: 2938 
para_0 = torch.randn([1, 64, 150, 150], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 1
para_4 = 1
para_5 = False
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 2939 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,padding=1,).eval(), input_data=[torch.randn([1, 64, 150, 150], dtype=torch.float32)])
# test_id: 2940 
para_0 = torch.randn([1, 64, 75, 75], dtype=torch.float32)
para_1 = torch.randn([64, 64, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2941 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([1, 64, 75, 75], dtype=torch.float32)])
# test_id: 2942 
para_0 = torch.randn([1, 64, 75, 75], dtype=torch.float32)
para_1 = torch.randn([64], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = torch.randn([64], dtype=torch.float32)
para_4 = torch.randn([64], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2943 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([1, 64, 75, 75], dtype=torch.float32)])
# test_id: 2944 
para_0 = torch.randn([1, 64, 75, 75], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2945 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([1, 64, 75, 75], dtype=torch.float32)])
# test_id: 2946 
para_0 = torch.randn([1, 64, 75, 75], dtype=torch.float32)
para_1 = torch.randn([64, 64, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2947 
para_0 = torch.randn([1, 64, 75, 75], dtype=torch.float32)
para_1 = torch.randn([256, 64, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2948 
para_0 = torch.randn([1, 256, 75, 75], dtype=torch.float32)
para_1 = torch.randn([256], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
para_3 = torch.randn([256], dtype=torch.float32)
para_4 = torch.randn([256], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2949 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([1, 256, 75, 75], dtype=torch.float32)])
# test_id: 2950 
para_0 = torch.randn([1, 256, 75, 75], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2951 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([1, 256, 75, 75], dtype=torch.float32)])
# test_id: 2952 
para_0 = torch.randn([1, 256, 75, 75], dtype=torch.float32)
para_1 = torch.randn([64, 256, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2953 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([1, 256, 75, 75], dtype=torch.float32)])
# test_id: 2954 
para_0 = torch.randn([1, 256, 75, 75], dtype=torch.float32)
para_1 = torch.randn([128, 256, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2955 
para_0 = torch.randn([1, 128, 75, 75], dtype=torch.float32)
para_1 = torch.randn([128], dtype=torch.float32)
para_2 = torch.randn([128], dtype=torch.float32)
para_3 = torch.randn([128], dtype=torch.float32)
para_4 = torch.randn([128], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2956 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([1, 128, 75, 75], dtype=torch.float32)])
# test_id: 2957 
para_0 = torch.randn([1, 128, 75, 75], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2958 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([1, 128, 75, 75], dtype=torch.float32)])
# test_id: 2959 
para_0 = torch.randn([1, 128, 75, 75], dtype=torch.float32)
para_1 = torch.randn([128, 128, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2960 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([1, 128, 75, 75], dtype=torch.float32)])
# test_id: 2961 
para_0 = torch.randn([1, 128, 38, 38], dtype=torch.float32)
para_1 = torch.randn([128], dtype=torch.float32)
para_2 = torch.randn([128], dtype=torch.float32)
para_3 = torch.randn([128], dtype=torch.float32)
para_4 = torch.randn([128], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2962 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([1, 128, 38, 38], dtype=torch.float32)])
# test_id: 2963 
para_0 = torch.randn([1, 128, 38, 38], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2964 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([1, 128, 38, 38], dtype=torch.float32)])
# test_id: 2965 
para_0 = torch.randn([1, 128, 38, 38], dtype=torch.float32)
para_1 = torch.randn([512, 128, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2966 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([1, 128, 38, 38], dtype=torch.float32)])
# test_id: 2967 
para_0 = torch.randn([1, 512, 38, 38], dtype=torch.float32)
para_1 = torch.randn([512], dtype=torch.float32)
para_2 = torch.randn([512], dtype=torch.float32)
para_3 = torch.randn([512], dtype=torch.float32)
para_4 = torch.randn([512], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2968 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([1, 512, 38, 38], dtype=torch.float32)])
# test_id: 2969 
para_0 = torch.randn([1, 256, 75, 75], dtype=torch.float32)
para_1 = torch.randn([512, 256, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2970 
para_0 = torch.randn([1, 512, 38, 38], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2971 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([1, 512, 38, 38], dtype=torch.float32)])
# test_id: 2972 
para_0 = torch.randn([1, 512, 38, 38], dtype=torch.float32)
para_1 = torch.randn([128, 512, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2973 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([1, 512, 38, 38], dtype=torch.float32)])
# test_id: 2974 
para_0 = torch.randn([1, 128, 38, 38], dtype=torch.float32)
para_1 = torch.randn([128, 128, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2975 
para_0 = torch.randn([1, 512, 38, 38], dtype=torch.float32)
para_1 = torch.randn([256, 512, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2976 
para_0 = torch.randn([1, 256, 38, 38], dtype=torch.float32)
para_1 = torch.randn([256], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
para_3 = torch.randn([256], dtype=torch.float32)
para_4 = torch.randn([256], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2977 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([1, 256, 38, 38], dtype=torch.float32)])
# test_id: 2978 
para_0 = torch.randn([1, 256, 38, 38], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2979 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([1, 256, 38, 38], dtype=torch.float32)])
# test_id: 2980 
para_0 = torch.randn([1, 256, 38, 38], dtype=torch.float32)
para_1 = torch.randn([256, 256, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2981 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([1, 256, 38, 38], dtype=torch.float32)])
# test_id: 2982 
para_0 = torch.randn([1, 256, 38, 38], dtype=torch.float32)
para_1 = torch.randn([1024, 256, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2983 
para_0 = torch.randn([1, 1024, 38, 38], dtype=torch.float32)
para_1 = torch.randn([1024], dtype=torch.float32)
para_2 = torch.randn([1024], dtype=torch.float32)
para_3 = torch.randn([1024], dtype=torch.float32)
para_4 = torch.randn([1024], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2984 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([1, 1024, 38, 38], dtype=torch.float32)])
# test_id: 2985 
para_0 = torch.randn([1, 512, 38, 38], dtype=torch.float32)
para_1 = torch.randn([1024, 512, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2986 
para_0 = torch.randn([1, 1024, 38, 38], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2987 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([1, 1024, 38, 38], dtype=torch.float32)])
# test_id: 2988 
para_0 = torch.randn([1, 1024, 38, 38], dtype=torch.float32)
para_1 = torch.randn([256, 1024, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2989 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([1, 1024, 38, 38], dtype=torch.float32)])
# test_id: 2990 
para_0 = torch.randn([1, 256, 38, 38], dtype=torch.float32)
para_1 = torch.randn([256, 256, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (2, 2)
para_5 = (2, 2)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2991 
para_0 = torch.randn([1, 1024, 38, 38], dtype=torch.float32)
para_1 = torch.randn([512, 1024, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2992 
para_0 = torch.randn([1, 512, 38, 38], dtype=torch.float32)
para_1 = torch.randn([512, 512, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (2, 2)
para_5 = (2, 2)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2993 
para_0 = torch.randn([1, 512, 38, 38], dtype=torch.float32)
para_1 = torch.randn([2048, 512, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2994 
para_0 = torch.randn([1, 2048, 38, 38], dtype=torch.float32)
para_1 = torch.randn([2048], dtype=torch.float32)
para_2 = torch.randn([2048], dtype=torch.float32)
para_3 = torch.randn([2048], dtype=torch.float32)
para_4 = torch.randn([2048], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 2995 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([1, 2048, 38, 38], dtype=torch.float32)])
# test_id: 2996 
para_0 = torch.randn([1, 1024, 38, 38], dtype=torch.float32)
para_1 = torch.randn([2048, 1024, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 2997 
para_0 = torch.randn([1, 2048, 38, 38], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 2998 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([1, 2048, 38, 38], dtype=torch.float32)])
# test_id: 2999 
para_0 = torch.randn([1, 2048, 38, 38], dtype=torch.float32)
para_1 = torch.randn([512, 2048, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3000 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([1, 2048, 38, 38], dtype=torch.float32)])
# test_id: 3001 
para_0 = torch.randn([1, 512, 38, 38], dtype=torch.float32)
para_1 = torch.randn([512, 512, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (4, 4)
para_5 = (4, 4)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3002 
para_0 = torch.randn([1, 2048, 38, 38], dtype=torch.float32)
para_1 = torch.randn([512, 2048, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3003 
para_0 = torch.randn([1, 512, 38, 38], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=False,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3004 
para_0 = torch.randn([1, 512, 38, 38], dtype=torch.float32)
para_1 = 0.1
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3005 
verify_model(torch.nn.Dropout(0.5,).eval(), input_data=[torch.randn([1, 512, 38, 38], dtype=torch.float32)])
# test_id: 3006 
para_0 = torch.randn([1, 512, 38, 38], dtype=torch.float32)
para_1 = torch.randn([21, 512, 1, 1], dtype=torch.float32)
para_2 = torch.randn([21], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3007 
para_0 = torch.randn([1, 21, 38, 38], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=torch.Size([300, 300]),mode='bilinear',align_corners=False,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 3008 
para_0 = torch.randn([1, 1024, 38, 38], dtype=torch.float32)
para_1 = torch.randn([256, 1024, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3009 
para_0 = torch.randn([1, 256, 38, 38], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=False,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3010 
para_0 = torch.randn([1, 256, 38, 38], dtype=torch.float32)
para_1 = 0.1
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3011 
verify_model(torch.nn.Dropout(0.5,).eval(), input_data=[torch.randn([1, 256, 38, 38], dtype=torch.float32)])
# test_id: 3012 
para_0 = torch.randn([1, 256, 38, 38], dtype=torch.float32)
para_1 = torch.randn([21, 256, 1, 1], dtype=torch.float32)
para_2 = torch.randn([21], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3013 
para_0 = torch.randn([tensor(1), tensor(3), tensor(300), tensor(300)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(3), tensor(7), tensor(7)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (3, 3)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3014 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(300), tensor(300)], dtype=torch.float32)])
# test_id: 3015 
para_0 = torch.randn([tensor(1), tensor(64), tensor(150), tensor(150)], dtype=torch.float32)
para_1 = torch.randn([tensor(64)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = torch.randn([tensor(64)], dtype=torch.float32)
para_4 = torch.randn([tensor(64)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3016 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(150), tensor(150)], dtype=torch.float32)])
# test_id: 3017 
para_0 = torch.randn([tensor(1), tensor(64), tensor(150), tensor(150)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3018 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(150), tensor(150)], dtype=torch.float32)])
# test_id: 3019 
para_0 = torch.randn([tensor(1), tensor(64), tensor(150), tensor(150)], dtype=torch.float32)
para_1 = 3
para_2 = 2
para_3 = 1
para_4 = 1
para_5 = False
para_6 = False
class max_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.max_pool2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(max_pool2d().float().eval(), input_data=para_0)


# test_id: 3020 
verify_model(torch.nn.MaxPool2d(kernel_size=3,stride=2,padding=1,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(150), tensor(150)], dtype=torch.float32)])
# test_id: 3021 
para_0 = torch.randn([tensor(1), tensor(64), tensor(75), tensor(75)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(64), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3022 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(75), tensor(75)], dtype=torch.float32)])
# test_id: 3023 
para_0 = torch.randn([tensor(1), tensor(64), tensor(75), tensor(75)], dtype=torch.float32)
para_1 = torch.randn([tensor(64)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = torch.randn([tensor(64)], dtype=torch.float32)
para_4 = torch.randn([tensor(64)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3024 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(75), tensor(75)], dtype=torch.float32)])
# test_id: 3025 
para_0 = torch.randn([tensor(1), tensor(64), tensor(75), tensor(75)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3026 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(75), tensor(75)], dtype=torch.float32)])
# test_id: 3027 
para_0 = torch.randn([tensor(1), tensor(64), tensor(75), tensor(75)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(64), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3028 
para_0 = torch.randn([tensor(1), tensor(64), tensor(75), tensor(75)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(64), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3029 
para_0 = torch.randn([tensor(1), tensor(256), tensor(75), tensor(75)], dtype=torch.float32)
para_1 = torch.randn([tensor(256)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
para_3 = torch.randn([tensor(256)], dtype=torch.float32)
para_4 = torch.randn([tensor(256)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3030 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(75), tensor(75)], dtype=torch.float32)])
# test_id: 3031 
para_0 = torch.randn([tensor(1), tensor(256), tensor(75), tensor(75)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3032 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(75), tensor(75)], dtype=torch.float32)])
# test_id: 3033 
para_0 = torch.randn([tensor(1), tensor(256), tensor(75), tensor(75)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3034 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(75), tensor(75)], dtype=torch.float32)])
# test_id: 3035 
para_0 = torch.randn([tensor(1), tensor(256), tensor(75), tensor(75)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3036 
para_0 = torch.randn([tensor(1), tensor(128), tensor(75), tensor(75)], dtype=torch.float32)
para_1 = torch.randn([tensor(128)], dtype=torch.float32)
para_2 = torch.randn([tensor(128)], dtype=torch.float32)
para_3 = torch.randn([tensor(128)], dtype=torch.float32)
para_4 = torch.randn([tensor(128)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3037 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(75), tensor(75)], dtype=torch.float32)])
# test_id: 3038 
para_0 = torch.randn([tensor(1), tensor(128), tensor(75), tensor(75)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3039 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(75), tensor(75)], dtype=torch.float32)])
# test_id: 3040 
para_0 = torch.randn([tensor(1), tensor(128), tensor(75), tensor(75)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(128), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3041 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(75), tensor(75)], dtype=torch.float32)])
# test_id: 3042 
para_0 = torch.randn([tensor(1), tensor(128), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(128)], dtype=torch.float32)
para_2 = torch.randn([tensor(128)], dtype=torch.float32)
para_3 = torch.randn([tensor(128)], dtype=torch.float32)
para_4 = torch.randn([tensor(128)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3043 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3044 
para_0 = torch.randn([tensor(1), tensor(128), tensor(38), tensor(38)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3045 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3046 
para_0 = torch.randn([tensor(1), tensor(128), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(512), tensor(128), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3047 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3048 
para_0 = torch.randn([tensor(1), tensor(512), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(512)], dtype=torch.float32)
para_2 = torch.randn([tensor(512)], dtype=torch.float32)
para_3 = torch.randn([tensor(512)], dtype=torch.float32)
para_4 = torch.randn([tensor(512)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3049 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3050 
para_0 = torch.randn([tensor(1), tensor(256), tensor(75), tensor(75)], dtype=torch.float32)
para_1 = torch.randn([tensor(512), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3051 
para_0 = torch.randn([tensor(1), tensor(512), tensor(38), tensor(38)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3052 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3053 
para_0 = torch.randn([tensor(1), tensor(512), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(512), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3054 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3055 
para_0 = torch.randn([tensor(1), tensor(128), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(128), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3056 
para_0 = torch.randn([tensor(1), tensor(512), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(512), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3057 
para_0 = torch.randn([tensor(1), tensor(256), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(256)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
para_3 = torch.randn([tensor(256)], dtype=torch.float32)
para_4 = torch.randn([tensor(256)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3058 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3059 
para_0 = torch.randn([tensor(1), tensor(256), tensor(38), tensor(38)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3060 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3061 
para_0 = torch.randn([tensor(1), tensor(256), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(256), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3062 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3063 
para_0 = torch.randn([tensor(1), tensor(256), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(1024), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3064 
para_0 = torch.randn([tensor(1), tensor(1024), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(1024)], dtype=torch.float32)
para_2 = torch.randn([tensor(1024)], dtype=torch.float32)
para_3 = torch.randn([tensor(1024)], dtype=torch.float32)
para_4 = torch.randn([tensor(1024)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3065 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([tensor(1), tensor(1024), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3066 
para_0 = torch.randn([tensor(1), tensor(512), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(1024), tensor(512), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3067 
para_0 = torch.randn([tensor(1), tensor(1024), tensor(38), tensor(38)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3068 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([tensor(1), tensor(1024), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3069 
para_0 = torch.randn([tensor(1), tensor(1024), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(1024), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3070 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([tensor(1), tensor(1024), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3071 
para_0 = torch.randn([tensor(1), tensor(256), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(256), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (2, 2)
para_5 = (2, 2)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3072 
para_0 = torch.randn([tensor(1), tensor(1024), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(512), tensor(1024), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3073 
para_0 = torch.randn([tensor(1), tensor(512), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(512), tensor(512), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (2, 2)
para_5 = (2, 2)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3074 
para_0 = torch.randn([tensor(1), tensor(512), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(2048), tensor(512), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3075 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(2048)], dtype=torch.float32)
para_2 = torch.randn([tensor(2048)], dtype=torch.float32)
para_3 = torch.randn([tensor(2048)], dtype=torch.float32)
para_4 = torch.randn([tensor(2048)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3076 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([tensor(1), tensor(2048), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3077 
para_0 = torch.randn([tensor(1), tensor(1024), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(2048), tensor(1024), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3078 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(38), tensor(38)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3079 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([tensor(1), tensor(2048), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3080 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(512), tensor(2048), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3081 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([tensor(1), tensor(2048), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3082 
para_0 = torch.randn([tensor(1), tensor(512), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(512), tensor(512), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (4, 4)
para_5 = (4, 4)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3083 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(512), tensor(2048), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3084 
para_0 = torch.randn([tensor(1), tensor(512), tensor(38), tensor(38)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=False,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3085 
para_0 = torch.randn([tensor(1), tensor(512), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = 0.1
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3086 
verify_model(torch.nn.Dropout(0.5,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3087 
para_0 = torch.randn([tensor(1), tensor(512), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(21), tensor(512), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(21)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3088 
para_0 = torch.randn([tensor(1), tensor(21), tensor(38), tensor(38)], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=[{'shape': [], 'dtype': 'torch.int64'}, {'shape': [], 'dtype': 'torch.int64'}],mode='bilinear',align_corners=False,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 3089 
para_0 = torch.randn([tensor(1), tensor(1024), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(1024), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (1, 1)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3090 
para_0 = torch.randn([tensor(1), tensor(256), tensor(38), tensor(38)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=False,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3091 
para_0 = torch.randn([tensor(1), tensor(256), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = 0.1
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3092 
verify_model(torch.nn.Dropout(0.5,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3093 
para_0 = torch.randn([tensor(1), tensor(256), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(21), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(21)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3094 
para_0 = torch.randn([1, 2048, 38, 38], dtype=torch.float32)
para_1 = torch.randn([256, 2048, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3095 
para_0 = torch.randn([1, 2048, 38, 38], dtype=torch.float32)
para_1 = torch.randn([256, 2048, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (12, 12)
para_5 = (12, 12)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3096 
para_0 = torch.randn([1, 2048, 38, 38], dtype=torch.float32)
para_1 = torch.randn([256, 2048, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (24, 24)
para_5 = (24, 24)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3097 
para_0 = torch.randn([1, 2048, 38, 38], dtype=torch.float32)
para_1 = torch.randn([256, 2048, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (36, 36)
para_5 = (36, 36)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3098 
para_0 = torch.randn([1, 2048, 38, 38], dtype=torch.float32)
para_1 = 1
class adaptive_avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool2d(args[0], para_1,)
verify_model(adaptive_avg_pool2d().float().eval(), input_data=para_0)


# test_id: 3099 
verify_model(torch.nn.AdaptiveAvgPool2d(1,).eval(), input_data=[torch.randn([1, 2048, 38, 38], dtype=torch.float32)])
# test_id: 3100 
para_0 = torch.randn([1, 2048, 1, 1], dtype=torch.float32)
para_1 = torch.randn([256, 2048, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3101 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([1, 2048, 1, 1], dtype=torch.float32)])
# test_id: 3102 
para_0 = torch.randn([1, 256, 1, 1], dtype=torch.float32)
para_1 = torch.randn([256], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
para_3 = torch.randn([256], dtype=torch.float32)
para_4 = torch.randn([256], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3103 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([1, 256, 1, 1], dtype=torch.float32)])
# test_id: 3104 
para_0 = torch.randn([1, 256, 1, 1], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=False,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3105 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([1, 256, 1, 1], dtype=torch.float32)])
# test_id: 3106 
para_0 = torch.randn([1, 256, 1, 1], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=torch.Size([38, 38]),mode='bilinear',align_corners=False,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 3107 
para_0 = torch.randn([1, 1280, 38, 38], dtype=torch.float32)
para_1 = torch.randn([256, 1280, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3108 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([1, 1280, 38, 38], dtype=torch.float32)])
# test_id: 3109 
para_0 = torch.randn([1, 256, 38, 38], dtype=torch.float32)
para_1 = 0.5
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3110 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(2048), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3111 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(2048), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (12, 12)
para_5 = (12, 12)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3112 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(2048), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (24, 24)
para_5 = (24, 24)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3113 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(2048), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (36, 36)
para_5 = (36, 36)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3114 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = 1
class adaptive_avg_pool2d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool2d(args[0], para_1,)
verify_model(adaptive_avg_pool2d().float().eval(), input_data=para_0)


# test_id: 3115 
verify_model(torch.nn.AdaptiveAvgPool2d(1,).eval(), input_data=[torch.randn([tensor(1), tensor(2048), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3116 
para_0 = torch.randn([tensor(1), tensor(2048), tensor(1), tensor(1)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(2048), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3117 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([tensor(1), tensor(2048), tensor(1), tensor(1)], dtype=torch.float32)])
# test_id: 3118 
para_0 = torch.randn([tensor(1), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
para_1 = torch.randn([tensor(256)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
para_3 = torch.randn([tensor(256)], dtype=torch.float32)
para_4 = torch.randn([tensor(256)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3119 
verify_model(torch.nn.BatchNorm2d(256,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)])
# test_id: 3120 
para_0 = torch.randn([tensor(1), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=False,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3121 
verify_model(torch.nn.ReLU().eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)])
# test_id: 3122 
para_0 = torch.randn([tensor(1), tensor(256), tensor(1), tensor(1)], dtype=torch.float32)
class interpolate(Module):
    def forward(self, *args):
        return torch.nn.functional.interpolate(args[0], size=[{'shape': [], 'dtype': 'torch.int64'}, {'shape': [], 'dtype': 'torch.int64'}],mode='bilinear',align_corners=False,)
verify_model(interpolate().float().eval(), input_data=para_0)


# test_id: 3123 
para_0 = torch.randn([tensor(1), tensor(1280), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(1280), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3124 
verify_model(torch.nn.Conv2d(256,21,1,).eval(), input_data=[torch.randn([tensor(1), tensor(1280), tensor(38), tensor(38)], dtype=torch.float32)])
# test_id: 3125 
para_0 = torch.randn([tensor(1), tensor(256), tensor(38), tensor(38)], dtype=torch.float32)
para_1 = 0.5
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3126 
para_0 = torch.randn([1, 3, 4, 56, 56], dtype=torch.float32)
para_1 = torch.randn([64, 3, 3, 7, 7], dtype=torch.float32)
para_2 = None
para_3 = (1, 2, 2)
para_4 = (1, 3, 3)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3127 
verify_model(torch.nn.Conv3d(in_channels=512,out_channels=512,kernel_size=(3, 3, 3),stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 3, 4, 56, 56], dtype=torch.float32)])
# test_id: 3128 
para_0 = torch.randn([1, 64, 4, 28, 28], dtype=torch.float32)
para_1 = torch.randn([64], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = torch.randn([64], dtype=torch.float32)
para_4 = torch.randn([64], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3129 
verify_model(torch.nn.BatchNorm3d(512,).eval(), input_data=[torch.randn([1, 64, 4, 28, 28], dtype=torch.float32)])
# test_id: 3130 
para_0 = torch.randn([1, 64, 4, 28, 28], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3131 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 64, 4, 28, 28], dtype=torch.float32)])
# test_id: 3132 
para_0 = torch.randn([1, 64, 4, 28, 28], dtype=torch.float32)
para_1 = torch.randn([64, 64, 3, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1, 1)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3133 
verify_model(torch.nn.Conv3d(in_channels=512,out_channels=512,kernel_size=(3, 3, 3),stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 64, 4, 28, 28], dtype=torch.float32)])
# test_id: 3134 
para_0 = torch.randn([1, 64, 4, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128, 64, 3, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2, 2)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3135 
para_0 = torch.randn([1, 128, 2, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128], dtype=torch.float32)
para_2 = torch.randn([128], dtype=torch.float32)
para_3 = torch.randn([128], dtype=torch.float32)
para_4 = torch.randn([128], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3136 
verify_model(torch.nn.BatchNorm3d(512,).eval(), input_data=[torch.randn([1, 128, 2, 14, 14], dtype=torch.float32)])
# test_id: 3137 
para_0 = torch.randn([1, 128, 2, 14, 14], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3138 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 128, 2, 14, 14], dtype=torch.float32)])
# test_id: 3139 
para_0 = torch.randn([1, 128, 2, 14, 14], dtype=torch.float32)
para_1 = torch.randn([128, 128, 3, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1, 1)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3140 
verify_model(torch.nn.Conv3d(in_channels=512,out_channels=512,kernel_size=(3, 3, 3),stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 128, 2, 14, 14], dtype=torch.float32)])
# test_id: 3141 
para_0 = torch.randn([1, 64, 4, 28, 28], dtype=torch.float32)
para_1 = torch.randn([128, 64, 1, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3142 
para_0 = torch.randn([1, 128, 2, 14, 14], dtype=torch.float32)
para_1 = torch.randn([256, 128, 3, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2, 2)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3143 
para_0 = torch.randn([1, 256, 1, 7, 7], dtype=torch.float32)
para_1 = torch.randn([256], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
para_3 = torch.randn([256], dtype=torch.float32)
para_4 = torch.randn([256], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3144 
verify_model(torch.nn.BatchNorm3d(512,).eval(), input_data=[torch.randn([1, 256, 1, 7, 7], dtype=torch.float32)])
# test_id: 3145 
para_0 = torch.randn([1, 256, 1, 7, 7], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3146 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 256, 1, 7, 7], dtype=torch.float32)])
# test_id: 3147 
para_0 = torch.randn([1, 256, 1, 7, 7], dtype=torch.float32)
para_1 = torch.randn([256, 256, 3, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1, 1)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3148 
verify_model(torch.nn.Conv3d(in_channels=512,out_channels=512,kernel_size=(3, 3, 3),stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 256, 1, 7, 7], dtype=torch.float32)])
# test_id: 3149 
para_0 = torch.randn([1, 128, 2, 14, 14], dtype=torch.float32)
para_1 = torch.randn([256, 128, 1, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3150 
para_0 = torch.randn([1, 256, 1, 7, 7], dtype=torch.float32)
para_1 = torch.randn([512, 256, 3, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (2, 2, 2)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3151 
para_0 = torch.randn([1, 512, 1, 4, 4], dtype=torch.float32)
para_1 = torch.randn([512], dtype=torch.float32)
para_2 = torch.randn([512], dtype=torch.float32)
para_3 = torch.randn([512], dtype=torch.float32)
para_4 = torch.randn([512], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3152 
verify_model(torch.nn.BatchNorm3d(512,).eval(), input_data=[torch.randn([1, 512, 1, 4, 4], dtype=torch.float32)])
# test_id: 3153 
para_0 = torch.randn([1, 512, 1, 4, 4], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3154 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([1, 512, 1, 4, 4], dtype=torch.float32)])
# test_id: 3155 
para_0 = torch.randn([1, 512, 1, 4, 4], dtype=torch.float32)
para_1 = torch.randn([512, 512, 3, 3, 3], dtype=torch.float32)
para_2 = None
para_3 = (1, 1, 1)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3156 
verify_model(torch.nn.Conv3d(in_channels=512,out_channels=512,kernel_size=(3, 3, 3),stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([1, 512, 1, 4, 4], dtype=torch.float32)])
# test_id: 3157 
para_0 = torch.randn([1, 256, 1, 7, 7], dtype=torch.float32)
para_1 = torch.randn([512, 256, 1, 1, 1], dtype=torch.float32)
para_2 = None
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3158 
para_0 = torch.randn([1, 512, 1, 4, 4], dtype=torch.float32)
para_1 = (1, 1, 1)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 3159 
verify_model(torch.nn.AdaptiveAvgPool3d((1, 1, 1),).eval(), input_data=[torch.randn([1, 512, 1, 4, 4], dtype=torch.float32)])
# test_id: 3160 
para_0 = torch.randn([1, 512], dtype=torch.float32)
para_1 = torch.randn([400, 512], dtype=torch.float32)
para_2 = torch.randn([400], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3161 
verify_model(torch.nn.Linear(512,400,).eval(), input_data=[torch.randn([1, 512], dtype=torch.float32)])
# test_id: 3162 
para_0 = torch.randn([tensor(1), tensor(3), tensor(4), tensor(56), tensor(56)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(3), tensor(3), tensor(7), tensor(7)], dtype=torch.float32)
para_2 = None
para_3 = (1, 2, 2)
para_4 = (1, 3, 3)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3163 
verify_model(torch.nn.Conv3d(in_channels=512,out_channels=512,kernel_size=(3, 3, 3),stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(4), tensor(56), tensor(56)], dtype=torch.float32)])
# test_id: 3164 
para_0 = torch.randn([tensor(1), tensor(64), tensor(4), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(64)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = torch.randn([tensor(64)], dtype=torch.float32)
para_4 = torch.randn([tensor(64)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3165 
verify_model(torch.nn.BatchNorm3d(512,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(4), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 3166 
para_0 = torch.randn([tensor(1), tensor(64), tensor(4), tensor(28), tensor(28)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3167 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(4), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 3168 
para_0 = torch.randn([tensor(1), tensor(64), tensor(4), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(64), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1, 1)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3169 
verify_model(torch.nn.Conv3d(in_channels=512,out_channels=512,kernel_size=(3, 3, 3),stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(64), tensor(4), tensor(28), tensor(28)], dtype=torch.float32)])
# test_id: 3170 
para_0 = torch.randn([tensor(1), tensor(64), tensor(4), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(64), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2, 2)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3171 
para_0 = torch.randn([tensor(1), tensor(128), tensor(2), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128)], dtype=torch.float32)
para_2 = torch.randn([tensor(128)], dtype=torch.float32)
para_3 = torch.randn([tensor(128)], dtype=torch.float32)
para_4 = torch.randn([tensor(128)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3172 
verify_model(torch.nn.BatchNorm3d(512,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(2), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 3173 
para_0 = torch.randn([tensor(1), tensor(128), tensor(2), tensor(14), tensor(14)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3174 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(2), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 3175 
para_0 = torch.randn([tensor(1), tensor(128), tensor(2), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(128), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1, 1)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3176 
verify_model(torch.nn.Conv3d(in_channels=512,out_channels=512,kernel_size=(3, 3, 3),stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(128), tensor(2), tensor(14), tensor(14)], dtype=torch.float32)])
# test_id: 3177 
para_0 = torch.randn([tensor(1), tensor(64), tensor(4), tensor(28), tensor(28)], dtype=torch.float32)
para_1 = torch.randn([tensor(128), tensor(64), tensor(1), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3178 
para_0 = torch.randn([tensor(1), tensor(128), tensor(2), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(128), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2, 2)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3179 
para_0 = torch.randn([tensor(1), tensor(256), tensor(1), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(256)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
para_3 = torch.randn([tensor(256)], dtype=torch.float32)
para_4 = torch.randn([tensor(256)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3180 
verify_model(torch.nn.BatchNorm3d(512,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(1), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 3181 
para_0 = torch.randn([tensor(1), tensor(256), tensor(1), tensor(7), tensor(7)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3182 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(1), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 3183 
para_0 = torch.randn([tensor(1), tensor(256), tensor(1), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(256), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1, 1)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3184 
verify_model(torch.nn.Conv3d(in_channels=512,out_channels=512,kernel_size=(3, 3, 3),stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(256), tensor(1), tensor(7), tensor(7)], dtype=torch.float32)])
# test_id: 3185 
para_0 = torch.randn([tensor(1), tensor(128), tensor(2), tensor(14), tensor(14)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(128), tensor(1), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3186 
para_0 = torch.randn([tensor(1), tensor(256), tensor(1), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(512), tensor(256), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2, 2)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3187 
para_0 = torch.randn([tensor(1), tensor(512), tensor(1), tensor(4), tensor(4)], dtype=torch.float32)
para_1 = torch.randn([tensor(512)], dtype=torch.float32)
para_2 = torch.randn([tensor(512)], dtype=torch.float32)
para_3 = torch.randn([tensor(512)], dtype=torch.float32)
para_4 = torch.randn([tensor(512)], dtype=torch.float32)
para_5 = False
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3188 
verify_model(torch.nn.BatchNorm3d(512,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(1), tensor(4), tensor(4)], dtype=torch.float32)])
# test_id: 3189 
para_0 = torch.randn([tensor(1), tensor(512), tensor(1), tensor(4), tensor(4)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], inplace=True,)
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3190 
verify_model(torch.nn.ReLU(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(1), tensor(4), tensor(4)], dtype=torch.float32)])
# test_id: 3191 
para_0 = torch.randn([tensor(1), tensor(512), tensor(1), tensor(4), tensor(4)], dtype=torch.float32)
para_1 = torch.randn([tensor(512), tensor(512), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = (1, 1, 1)
para_4 = (1, 1, 1)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3192 
verify_model(torch.nn.Conv3d(in_channels=512,out_channels=512,kernel_size=(3, 3, 3),stride=1,padding=1,bias=False,).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(1), tensor(4), tensor(4)], dtype=torch.float32)])
# test_id: 3193 
para_0 = torch.randn([tensor(1), tensor(256), tensor(1), tensor(7), tensor(7)], dtype=torch.float32)
para_1 = torch.randn([tensor(512), tensor(256), tensor(1), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = None
para_3 = (2, 2, 2)
para_4 = (0, 0, 0)
para_5 = (1, 1, 1)
para_6 = 1
class conv3d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv3d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv3d().float().eval(), input_data=para_0)


# test_id: 3194 
para_0 = torch.randn([tensor(1), tensor(512), tensor(1), tensor(4), tensor(4)], dtype=torch.float32)
para_1 = (1, 1, 1)
class adaptive_avg_pool3d(Module):
    def forward(self, *args):
        return torch.nn.functional.adaptive_avg_pool3d(args[0], para_1,)
verify_model(adaptive_avg_pool3d().float().eval(), input_data=para_0)


# test_id: 3195 
verify_model(torch.nn.AdaptiveAvgPool3d((1, 1, 1),).eval(), input_data=[torch.randn([tensor(1), tensor(512), tensor(1), tensor(4), tensor(4)], dtype=torch.float32)])
# test_id: 3196 
para_0 = torch.randn([tensor(1), tensor(512)], dtype=torch.float32)
para_1 = torch.randn([tensor(400), tensor(512)], dtype=torch.float32)
para_2 = torch.randn([tensor(400)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3197 
verify_model(torch.nn.Linear(512,400,).eval(), input_data=[torch.randn([tensor(1), tensor(512)], dtype=torch.float32)])
# test_id: 3198 
para_0 = torch.randn([tensor(10), tensor(4)], dtype=torch.float32)
para_1 = torch.randn([tensor(4), tensor(4)], dtype=torch.float32)
para_2 = torch.randn([tensor(4)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3199 
verify_model(torch.nn.Linear(4,4,).eval(), input_data=[torch.randn([tensor(10), tensor(4)], dtype=torch.float32)])
# test_id: 3200 
para_0 = torch.randn([10, 4], dtype=torch.float32)
para_1 = torch.randn([4, 4], dtype=torch.float32)
para_2 = torch.randn([4], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3201 
verify_model(torch.nn.Linear(4,4,).eval(), input_data=[torch.randn([10, 4], dtype=torch.float32)])
# test_id: 3202 
para_0 = torch.randint(1, 100, [2, 4], dtype=torch.int64)
para_1 = torch.randn([10, 3], dtype=torch.float32)
para_2 = None
para_3 = None
para_4 = 2.0
para_5 = False
para_6 = False
class embedding(Module):
    def forward(self, *args):
        return torch.nn.functional.embedding(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(embedding().float().eval(), input_data=para_0)


# test_id: 3203 
verify_model(torch.nn.Embedding(10,3,).eval(), input_data=[torch.randint(1, 100, [2, 4], dtype=torch.int64)])
# test_id: 3204 
para_0 = torch.randint(1, 100, [tensor(2), tensor(4)], dtype=torch.int64)
para_1 = torch.randn([tensor(10), tensor(3)], dtype=torch.float32)
para_2 = None
para_3 = None
para_4 = 2.0
para_5 = False
para_6 = False
class embedding(Module):
    def forward(self, *args):
        return torch.nn.functional.embedding(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(embedding().float().eval(), input_data=para_0)


# test_id: 3205 
verify_model(torch.nn.Embedding(10,3,).eval(), input_data=[torch.randint(1, 100, [tensor(2), tensor(4)], dtype=torch.int64)])
# test_id: 3206 
para_0 = torch.randint(1, 100, [2, 3, 4], dtype=torch.int64)
para_1 = torch.randn([4, 5], dtype=torch.float32)
para_2 = None
para_3 = None
para_4 = 2.0
para_5 = False
para_6 = False
class embedding(Module):
    def forward(self, *args):
        return torch.nn.functional.embedding(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(embedding().float().eval(), input_data=para_0)


# test_id: 3207 
verify_model(torch.nn.Embedding(4,5,sparse=False,).eval(), input_data=[torch.randint(1, 100, [2, 3, 4], dtype=torch.int64)])
# test_id: 3208 
para_0 = torch.randint(1, 100, [tensor(2), tensor(3), tensor(4)], dtype=torch.int64)
para_1 = torch.randn([tensor(4), tensor(5)], dtype=torch.float32)
para_2 = None
para_3 = None
para_4 = 2.0
para_5 = False
para_6 = False
class embedding(Module):
    def forward(self, *args):
        return torch.nn.functional.embedding(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(embedding().float().eval(), input_data=para_0)


# test_id: 3209 
verify_model(torch.nn.Embedding(4,5,sparse=False,).eval(), input_data=[torch.randint(1, 100, [tensor(2), tensor(3), tensor(4)], dtype=torch.int64)])
# test_id: 3210 
para_0 = torch.randint(1, 100, [2, 3, 4], dtype=torch.int64)
para_1 = torch.randn([4, 5], dtype=torch.float32)
para_2 = None
para_3 = None
para_4 = 2.0
para_5 = False
para_6 = True
class embedding(Module):
    def forward(self, *args):
        return torch.nn.functional.embedding(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(embedding().float().eval(), input_data=para_0)


# test_id: 3211 
verify_model(torch.nn.Embedding(4,5,sparse=True,).eval(), input_data=[torch.randint(1, 100, [2, 3, 4], dtype=torch.int64)])
# test_id: 3212 
para_0 = torch.randint(1, 100, [tensor(2), tensor(3), tensor(4)], dtype=torch.int64)
para_1 = torch.randn([tensor(4), tensor(5)], dtype=torch.float32)
para_2 = None
para_3 = None
para_4 = 2.0
para_5 = False
para_6 = True
class embedding(Module):
    def forward(self, *args):
        return torch.nn.functional.embedding(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(embedding().float().eval(), input_data=para_0)


# test_id: 3213 
verify_model(torch.nn.Embedding(4,5,sparse=True,).eval(), input_data=[torch.randint(1, 100, [tensor(2), tensor(3), tensor(4)], dtype=torch.int64)])
# test_id: 3214 
para_0 = torch.randint(1, 100, [5], dtype=torch.int64)
class one_hot(Module):
    def forward(self, *args):
        return torch.nn.functional.one_hot(args[0], num_classes=3,)
verify_model(one_hot().float().eval(), input_data=para_0)


# test_id: 3215 
para_0 = torch.randint(1, 100, [tensor(5)], dtype=torch.int64)
class one_hot(Module):
    def forward(self, *args):
        return torch.nn.functional.one_hot(args[0], num_classes=3,)
verify_model(one_hot().float().eval(), input_data=para_0)


# test_id: 3216 
para_0 = torch.randint(1, 100, [5], dtype=torch.int64)
class one_hot(Module):
    def forward(self, *args):
        return torch.nn.functional.one_hot(args[0], num_classes=5,)
verify_model(one_hot().float().eval(), input_data=para_0)


# test_id: 3217 
para_0 = torch.randint(1, 100, [tensor(5)], dtype=torch.int64)
class one_hot(Module):
    def forward(self, *args):
        return torch.nn.functional.one_hot(args[0], num_classes=5,)
verify_model(one_hot().float().eval(), input_data=para_0)


# test_id: 3218 
para_0 = torch.randn([tensor(2), tensor(3)], dtype=torch.float32)
para_1 = torch.randn([tensor(4), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(4)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3219 
verify_model(torch.nn.Linear(3,4,).eval(), input_data=[torch.randn([tensor(2), tensor(3)], dtype=torch.float32)])
# test_id: 3220 
para_0 = torch.randn([2, 3], dtype=torch.float32)
para_1 = torch.randn([4, 3], dtype=torch.float32)
para_2 = torch.randn([4], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3221 
verify_model(torch.nn.Linear(3,4,).eval(), input_data=[torch.randn([2, 3], dtype=torch.float32)])
# test_id: 3222 
para_0 = torch.randn([5, 5], dtype=torch.float32)
para_1 = torch.randn([3, 5], dtype=torch.float32)
para_2 = torch.randn([3], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3223 
verify_model(torch.nn.Linear(5,3,).eval(), input_data=[torch.randn([5, 5], dtype=torch.float32)])
# test_id: 3224 
para_0 = torch.randn([tensor(5), tensor(5)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(5)], dtype=torch.float32)
para_2 = torch.randn([tensor(3)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3225 
verify_model(torch.nn.Linear(5,3,).eval(), input_data=[torch.randn([tensor(5), tensor(5)], dtype=torch.float32)])
# test_id: 3226 
para_0 = torch.randn([8], dtype=torch.float32)
para_1 = False
class hardswish(Module):
    def forward(self, *args):
        return torch.nn.functional.hardswish(args[0], para_1,)
verify_model(hardswish().float().eval(), input_data=para_0)


# test_id: 3227 
verify_model(torch.nn.Hardswish().eval(), input_data=[torch.randn([8], dtype=torch.float32)])
# test_id: 3228 
para_0 = torch.randn([tensor(8)], dtype=torch.float32)
para_1 = False
class hardswish(Module):
    def forward(self, *args):
        return torch.nn.functional.hardswish(args[0], para_1,)
verify_model(hardswish().float().eval(), input_data=para_0)


# test_id: 3229 
verify_model(torch.nn.Hardswish().eval(), input_data=[torch.randn([tensor(8)], dtype=torch.float32)])
# test_id: 3230 
para_0 = torch.randn([8], dtype=torch.float32)
para_1 = True
class hardswish(Module):
    def forward(self, *args):
        return torch.nn.functional.hardswish(args[0], para_1,)
verify_model(hardswish().float().eval(), input_data=para_0)


# test_id: 3231 
verify_model(torch.nn.Hardswish(inplace=True,).eval(), input_data=[torch.randn([8], dtype=torch.float32)])
# test_id: 3232 
para_0 = torch.randn([tensor(8)], dtype=torch.float32)
para_1 = True
class hardswish(Module):
    def forward(self, *args):
        return torch.nn.functional.hardswish(args[0], para_1,)
verify_model(hardswish().float().eval(), input_data=para_0)


# test_id: 3233 
verify_model(torch.nn.Hardswish(inplace=True,).eval(), input_data=[torch.randn([tensor(8)], dtype=torch.float32)])
# test_id: 3234 
para_0 = torch.randn([8, 10], dtype=torch.float32)
para_1 = False
class hardswish(Module):
    def forward(self, *args):
        return torch.nn.functional.hardswish(args[0], para_1,)
verify_model(hardswish().float().eval(), input_data=para_0)


# test_id: 3235 
verify_model(torch.nn.Hardswish().eval(), input_data=[torch.randn([8, 10], dtype=torch.float32)])
# test_id: 3236 
para_0 = torch.randn([tensor(8), tensor(10)], dtype=torch.float32)
para_1 = False
class hardswish(Module):
    def forward(self, *args):
        return torch.nn.functional.hardswish(args[0], para_1,)
verify_model(hardswish().float().eval(), input_data=para_0)


# test_id: 3237 
verify_model(torch.nn.Hardswish().eval(), input_data=[torch.randn([tensor(8), tensor(10)], dtype=torch.float32)])
# test_id: 3238 
para_0 = torch.randn([8, 10], dtype=torch.float32)
para_1 = True
class hardswish(Module):
    def forward(self, *args):
        return torch.nn.functional.hardswish(args[0], para_1,)
verify_model(hardswish().float().eval(), input_data=para_0)


# test_id: 3239 
verify_model(torch.nn.Hardswish(inplace=True,).eval(), input_data=[torch.randn([8, 10], dtype=torch.float32)])
# test_id: 3240 
para_0 = torch.randn([tensor(8), tensor(10)], dtype=torch.float32)
para_1 = True
class hardswish(Module):
    def forward(self, *args):
        return torch.nn.functional.hardswish(args[0], para_1,)
verify_model(hardswish().float().eval(), input_data=para_0)


# test_id: 3241 
verify_model(torch.nn.Hardswish(inplace=True,).eval(), input_data=[torch.randn([tensor(8), tensor(10)], dtype=torch.float32)])
# test_id: 3242 
para_0 = torch.randn([1, 1, 10], dtype=torch.float32)
para_1 = False
class hardswish(Module):
    def forward(self, *args):
        return torch.nn.functional.hardswish(args[0], para_1,)
verify_model(hardswish().float().eval(), input_data=para_0)


# test_id: 3243 
verify_model(torch.nn.Hardswish().eval(), input_data=[torch.randn([1, 1, 10], dtype=torch.float32)])
# test_id: 3244 
para_0 = torch.randn([tensor(1), tensor(1), tensor(10)], dtype=torch.float32)
para_1 = False
class hardswish(Module):
    def forward(self, *args):
        return torch.nn.functional.hardswish(args[0], para_1,)
verify_model(hardswish().float().eval(), input_data=para_0)


# test_id: 3245 
verify_model(torch.nn.Hardswish().eval(), input_data=[torch.randn([tensor(1), tensor(1), tensor(10)], dtype=torch.float32)])
# test_id: 3246 
para_0 = torch.randn([1, 1, 10], dtype=torch.float32)
para_1 = True
class hardswish(Module):
    def forward(self, *args):
        return torch.nn.functional.hardswish(args[0], para_1,)
verify_model(hardswish().float().eval(), input_data=para_0)


# test_id: 3247 
verify_model(torch.nn.Hardswish(inplace=True,).eval(), input_data=[torch.randn([1, 1, 10], dtype=torch.float32)])
# test_id: 3248 
para_0 = torch.randn([tensor(1), tensor(1), tensor(10)], dtype=torch.float32)
para_1 = True
class hardswish(Module):
    def forward(self, *args):
        return torch.nn.functional.hardswish(args[0], para_1,)
verify_model(hardswish().float().eval(), input_data=para_0)


# test_id: 3249 
verify_model(torch.nn.Hardswish(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(1), tensor(10)], dtype=torch.float32)])
# test_id: 3250 
para_0 = torch.randn([8], dtype=torch.float32)
para_1 = False
class hardsigmoid(Module):
    def forward(self, *args):
        return torch.nn.functional.hardsigmoid(args[0], para_1,)
verify_model(hardsigmoid().float().eval(), input_data=para_0)


# test_id: 3251 
verify_model(torch.nn.Hardsigmoid().eval(), input_data=[torch.randn([8], dtype=torch.float32)])
# test_id: 3252 
para_0 = torch.randn([tensor(8)], dtype=torch.float32)
para_1 = False
class hardsigmoid(Module):
    def forward(self, *args):
        return torch.nn.functional.hardsigmoid(args[0], para_1,)
verify_model(hardsigmoid().float().eval(), input_data=para_0)


# test_id: 3253 
verify_model(torch.nn.Hardsigmoid().eval(), input_data=[torch.randn([tensor(8)], dtype=torch.float32)])
# test_id: 3254 
para_0 = torch.randn([8], dtype=torch.float32)
para_1 = True
class hardsigmoid(Module):
    def forward(self, *args):
        return torch.nn.functional.hardsigmoid(args[0], para_1,)
verify_model(hardsigmoid().float().eval(), input_data=para_0)


# test_id: 3255 
verify_model(torch.nn.Hardsigmoid(inplace=True,).eval(), input_data=[torch.randn([8], dtype=torch.float32)])
# test_id: 3256 
para_0 = torch.randn([tensor(8)], dtype=torch.float32)
para_1 = True
class hardsigmoid(Module):
    def forward(self, *args):
        return torch.nn.functional.hardsigmoid(args[0], para_1,)
verify_model(hardsigmoid().float().eval(), input_data=para_0)


# test_id: 3257 
verify_model(torch.nn.Hardsigmoid(inplace=True,).eval(), input_data=[torch.randn([tensor(8)], dtype=torch.float32)])
# test_id: 3258 
para_0 = torch.randn([8, 10], dtype=torch.float32)
para_1 = False
class hardsigmoid(Module):
    def forward(self, *args):
        return torch.nn.functional.hardsigmoid(args[0], para_1,)
verify_model(hardsigmoid().float().eval(), input_data=para_0)


# test_id: 3259 
verify_model(torch.nn.Hardsigmoid().eval(), input_data=[torch.randn([8, 10], dtype=torch.float32)])
# test_id: 3260 
para_0 = torch.randn([tensor(8), tensor(10)], dtype=torch.float32)
para_1 = False
class hardsigmoid(Module):
    def forward(self, *args):
        return torch.nn.functional.hardsigmoid(args[0], para_1,)
verify_model(hardsigmoid().float().eval(), input_data=para_0)


# test_id: 3261 
verify_model(torch.nn.Hardsigmoid().eval(), input_data=[torch.randn([tensor(8), tensor(10)], dtype=torch.float32)])
# test_id: 3262 
para_0 = torch.randn([8, 10], dtype=torch.float32)
para_1 = True
class hardsigmoid(Module):
    def forward(self, *args):
        return torch.nn.functional.hardsigmoid(args[0], para_1,)
verify_model(hardsigmoid().float().eval(), input_data=para_0)


# test_id: 3263 
verify_model(torch.nn.Hardsigmoid(inplace=True,).eval(), input_data=[torch.randn([8, 10], dtype=torch.float32)])
# test_id: 3264 
para_0 = torch.randn([tensor(8), tensor(10)], dtype=torch.float32)
para_1 = True
class hardsigmoid(Module):
    def forward(self, *args):
        return torch.nn.functional.hardsigmoid(args[0], para_1,)
verify_model(hardsigmoid().float().eval(), input_data=para_0)


# test_id: 3265 
verify_model(torch.nn.Hardsigmoid(inplace=True,).eval(), input_data=[torch.randn([tensor(8), tensor(10)], dtype=torch.float32)])
# test_id: 3266 
para_0 = torch.randn([1, 1, 10], dtype=torch.float32)
para_1 = False
class hardsigmoid(Module):
    def forward(self, *args):
        return torch.nn.functional.hardsigmoid(args[0], para_1,)
verify_model(hardsigmoid().float().eval(), input_data=para_0)


# test_id: 3267 
verify_model(torch.nn.Hardsigmoid().eval(), input_data=[torch.randn([1, 1, 10], dtype=torch.float32)])
# test_id: 3268 
para_0 = torch.randn([tensor(1), tensor(1), tensor(10)], dtype=torch.float32)
para_1 = False
class hardsigmoid(Module):
    def forward(self, *args):
        return torch.nn.functional.hardsigmoid(args[0], para_1,)
verify_model(hardsigmoid().float().eval(), input_data=para_0)


# test_id: 3269 
verify_model(torch.nn.Hardsigmoid().eval(), input_data=[torch.randn([tensor(1), tensor(1), tensor(10)], dtype=torch.float32)])
# test_id: 3270 
para_0 = torch.randn([1, 1, 10], dtype=torch.float32)
para_1 = True
class hardsigmoid(Module):
    def forward(self, *args):
        return torch.nn.functional.hardsigmoid(args[0], para_1,)
verify_model(hardsigmoid().float().eval(), input_data=para_0)


# test_id: 3271 
verify_model(torch.nn.Hardsigmoid(inplace=True,).eval(), input_data=[torch.randn([1, 1, 10], dtype=torch.float32)])
# test_id: 3272 
para_0 = torch.randn([tensor(1), tensor(1), tensor(10)], dtype=torch.float32)
para_1 = True
class hardsigmoid(Module):
    def forward(self, *args):
        return torch.nn.functional.hardsigmoid(args[0], para_1,)
verify_model(hardsigmoid().float().eval(), input_data=para_0)


# test_id: 3273 
verify_model(torch.nn.Hardsigmoid(inplace=True,).eval(), input_data=[torch.randn([tensor(1), tensor(1), tensor(10)], dtype=torch.float32)])
# test_id: 3274 
para_0 = torch.randn([10, 32, 256], dtype=torch.float32)
para_1 = torch.randn([768, 256], dtype=torch.float32)
para_2 = torch.randn([768], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3275 
para_0 = torch.randn([256, 10, 10], dtype=torch.float32)
class softmax(Module):
    def forward(self, *args):
        return torch.nn.functional.softmax(args[0], dim=-1,)
verify_model(softmax().float().eval(), input_data=para_0)


# test_id: 3276 
para_0 = torch.randn([256, 10, 10], dtype=torch.float32)
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], p=0.1,training=False,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3277 
para_0 = torch.randn([10, 32, 256], dtype=torch.float32)
para_1 = torch.randn([256, 256], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3278 
verify_model(torch.nn.MultiheadAttention(256,8,dropout=0.1,).eval(), input_data=[torch.randn([10, 32, 256], dtype=torch.float32),torch.randn([10, 32, 256], dtype=torch.float32),torch.randn([10, 32, 256], dtype=torch.float32)])
# test_id: 3279 
para_0 = torch.randn([10, 32, 256], dtype=torch.float32)
para_1 = 0.1
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3280 
verify_model(torch.nn.Dropout(0.1,).eval(), input_data=[torch.randn([10, 32, 256], dtype=torch.float32)])
# test_id: 3281 
para_0 = torch.randn([10, 32, 256], dtype=torch.float32)
para_1 = (256,)
para_2 = torch.randn([256], dtype=torch.float32)
para_3 = torch.randn([256], dtype=torch.float32)
para_4 = 1e-05
class layer_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.layer_norm(args[0], para_1,para_2,para_3,para_4,)
verify_model(layer_norm().float().eval(), input_data=para_0)


# test_id: 3282 
verify_model(torch.nn.LayerNorm(256,).eval(), input_data=[torch.randn([10, 32, 256], dtype=torch.float32)])
# test_id: 3283 
para_0 = torch.randn([10, 32, 256], dtype=torch.float32)
para_1 = torch.randn([2048, 256], dtype=torch.float32)
para_2 = torch.randn([2048], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3284 
verify_model(torch.nn.Linear(2048,256,).eval(), input_data=[torch.randn([10, 32, 256], dtype=torch.float32)])
# test_id: 3285 
para_0 = torch.randn([10, 32, 2048], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], )
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3286 
para_0 = torch.randn([10, 32, 2048], dtype=torch.float32)
para_1 = 0.1
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3287 
verify_model(torch.nn.Dropout(0.1,).eval(), input_data=[torch.randn([10, 32, 2048], dtype=torch.float32)])
# test_id: 3288 
para_0 = torch.randn([10, 32, 2048], dtype=torch.float32)
para_1 = torch.randn([256, 2048], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3289 
verify_model(torch.nn.Linear(2048,256,).eval(), input_data=[torch.randn([10, 32, 2048], dtype=torch.float32)])
# test_id: 3290 
verify_model(torch.nn.TransformerEncoderLayer(256,8,2048,0.1,'relu',).eval(), input_data=[torch.randn([10, 32, 256], dtype=torch.float32)])
# test_id: 3291 
verify_model(torch.nn.TransformerEncoder(torch.nn.modules.transformerTransformerEncoderLayer,6,torch.nn.modules.normalizationLayerNorm,).eval(), input_data=[torch.randn([10, 32, 256], dtype=torch.float32)])
# test_id: 3292 
para_0 = torch.randn([20, 32, 256], dtype=torch.float32)
para_1 = torch.randn([768, 256], dtype=torch.float32)
para_2 = torch.randn([768], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3293 
para_0 = torch.randn([256, 20, 20], dtype=torch.float32)
class softmax(Module):
    def forward(self, *args):
        return torch.nn.functional.softmax(args[0], dim=-1,)
verify_model(softmax().float().eval(), input_data=para_0)


# test_id: 3294 
para_0 = torch.randn([256, 20, 20], dtype=torch.float32)
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], p=0.1,training=False,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3295 
para_0 = torch.randn([20, 32, 256], dtype=torch.float32)
para_1 = torch.randn([256, 256], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3296 
verify_model(torch.nn.MultiheadAttention(256,8,dropout=0.1,).eval(), input_data=[torch.randn([20, 32, 256], dtype=torch.float32),torch.randn([20, 32, 256], dtype=torch.float32),torch.randn([20, 32, 256], dtype=torch.float32)])
# test_id: 3297 
para_0 = torch.randn([20, 32, 256], dtype=torch.float32)
para_1 = 0.1
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3298 
verify_model(torch.nn.Dropout(0.1,).eval(), input_data=[torch.randn([20, 32, 256], dtype=torch.float32)])
# test_id: 3299 
para_0 = torch.randn([20, 32, 256], dtype=torch.float32)
para_1 = (256,)
para_2 = torch.randn([256], dtype=torch.float32)
para_3 = torch.randn([256], dtype=torch.float32)
para_4 = 1e-05
class layer_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.layer_norm(args[0], para_1,para_2,para_3,para_4,)
verify_model(layer_norm().float().eval(), input_data=para_0)


# test_id: 3300 
verify_model(torch.nn.LayerNorm(256,).eval(), input_data=[torch.randn([20, 32, 256], dtype=torch.float32)])
# test_id: 3301 
para_0 = torch.randn([10, 32, 256], dtype=torch.float32)
para_1 = torch.randn([512, 256], dtype=torch.float32)
para_2 = torch.randn([512], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3302 
para_0 = torch.randn([256, 20, 10], dtype=torch.float32)
class softmax(Module):
    def forward(self, *args):
        return torch.nn.functional.softmax(args[0], dim=-1,)
verify_model(softmax().float().eval(), input_data=para_0)


# test_id: 3303 
para_0 = torch.randn([256, 20, 10], dtype=torch.float32)
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], p=0.1,training=False,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3304 
verify_model(torch.nn.MultiheadAttention(256,8,dropout=0.1,).eval(), input_data=[torch.randn([20, 32, 256], dtype=torch.float32),torch.randn([10, 32, 256], dtype=torch.float32),torch.randn([10, 32, 256], dtype=torch.float32)])
# test_id: 3305 
para_0 = torch.randn([20, 32, 256], dtype=torch.float32)
para_1 = torch.randn([2048, 256], dtype=torch.float32)
para_2 = torch.randn([2048], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3306 
verify_model(torch.nn.Linear(2048,256,).eval(), input_data=[torch.randn([20, 32, 256], dtype=torch.float32)])
# test_id: 3307 
para_0 = torch.randn([20, 32, 2048], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], )
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3308 
para_0 = torch.randn([20, 32, 2048], dtype=torch.float32)
para_1 = 0.1
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3309 
verify_model(torch.nn.Dropout(0.1,).eval(), input_data=[torch.randn([20, 32, 2048], dtype=torch.float32)])
# test_id: 3310 
para_0 = torch.randn([20, 32, 2048], dtype=torch.float32)
para_1 = torch.randn([256, 2048], dtype=torch.float32)
para_2 = torch.randn([256], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3311 
verify_model(torch.nn.Linear(2048,256,).eval(), input_data=[torch.randn([20, 32, 2048], dtype=torch.float32)])
# test_id: 3312 
verify_model(torch.nn.TransformerDecoderLayer(256,8,2048,0.1,'relu',).eval(), input_data=[torch.randn([20, 32, 256], dtype=torch.float32),torch.randn([10, 32, 256], dtype=torch.float32)])
# test_id: 3313 
verify_model(torch.nn.TransformerDecoder(torch.nn.modules.transformerTransformerDecoderLayer,6,torch.nn.modules.normalizationLayerNorm,).eval(), input_data=[torch.randn([20, 32, 256], dtype=torch.float32),torch.randn([10, 32, 256], dtype=torch.float32)])
# test_id: 3314 
verify_model(torch.nn.Transformer(d_model=256,nhead=8,num_encoder_layers=6,num_decoder_layers=6,).eval(), input_data=[torch.randn([10, 32, 256], dtype=torch.float32),torch.randn([20, 32, 256], dtype=torch.float32)])
# test_id: 3315 
para_0 = torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32)
para_1 = torch.randn([tensor(768), tensor(256)], dtype=torch.float32)
para_2 = torch.randn([tensor(768)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3316 
para_0 = torch.randn([tensor(256), tensor(10), tensor(10)], dtype=torch.float32)
class softmax(Module):
    def forward(self, *args):
        return torch.nn.functional.softmax(args[0], dim=-1,)
verify_model(softmax().float().eval(), input_data=para_0)


# test_id: 3317 
para_0 = torch.randn([tensor(256), tensor(10), tensor(10)], dtype=torch.float32)
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], p=0.1,training=False,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3318 
para_0 = torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(256)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3319 
verify_model(torch.nn.MultiheadAttention(256,8,dropout=0.1,).eval(), input_data=[torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32),torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32),torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32)])
# test_id: 3320 
para_0 = torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32)
para_1 = 0.1
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3321 
verify_model(torch.nn.Dropout(0.1,).eval(), input_data=[torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32)])
# test_id: 3322 
para_0 = torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32)
para_1 = (256,)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
para_3 = torch.randn([tensor(256)], dtype=torch.float32)
para_4 = 1e-05
class layer_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.layer_norm(args[0], para_1,para_2,para_3,para_4,)
verify_model(layer_norm().float().eval(), input_data=para_0)


# test_id: 3323 
verify_model(torch.nn.LayerNorm(256,).eval(), input_data=[torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32)])
# test_id: 3324 
para_0 = torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32)
para_1 = torch.randn([tensor(2048), tensor(256)], dtype=torch.float32)
para_2 = torch.randn([tensor(2048)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3325 
verify_model(torch.nn.Linear(2048,256,).eval(), input_data=[torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32)])
# test_id: 3326 
para_0 = torch.randn([tensor(10), tensor(32), tensor(2048)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], )
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3327 
para_0 = torch.randn([tensor(10), tensor(32), tensor(2048)], dtype=torch.float32)
para_1 = 0.1
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3328 
verify_model(torch.nn.Dropout(0.1,).eval(), input_data=[torch.randn([tensor(10), tensor(32), tensor(2048)], dtype=torch.float32)])
# test_id: 3329 
para_0 = torch.randn([tensor(10), tensor(32), tensor(2048)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(2048)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3330 
verify_model(torch.nn.Linear(2048,256,).eval(), input_data=[torch.randn([tensor(10), tensor(32), tensor(2048)], dtype=torch.float32)])
# test_id: 3331 
verify_model(torch.nn.TransformerEncoderLayer(256,8,2048,0.1,'relu',).eval(), input_data=[torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32)])
# test_id: 3332 
verify_model(torch.nn.TransformerEncoder(torch.nn.modules.transformerTransformerEncoderLayer,6,torch.nn.modules.normalizationLayerNorm,).eval(), input_data=[torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32)])
# test_id: 3333 
para_0 = torch.randn([tensor(20), tensor(32), tensor(256)], dtype=torch.float32)
para_1 = torch.randn([tensor(768), tensor(256)], dtype=torch.float32)
para_2 = torch.randn([tensor(768)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3334 
para_0 = torch.randn([tensor(256), tensor(20), tensor(20)], dtype=torch.float32)
class softmax(Module):
    def forward(self, *args):
        return torch.nn.functional.softmax(args[0], dim=-1,)
verify_model(softmax().float().eval(), input_data=para_0)


# test_id: 3335 
para_0 = torch.randn([tensor(256), tensor(20), tensor(20)], dtype=torch.float32)
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], p=0.1,training=False,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3336 
para_0 = torch.randn([tensor(20), tensor(32), tensor(256)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(256)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3337 
verify_model(torch.nn.MultiheadAttention(256,8,dropout=0.1,).eval(), input_data=[torch.randn([tensor(20), tensor(32), tensor(256)], dtype=torch.float32),torch.randn([tensor(20), tensor(32), tensor(256)], dtype=torch.float32),torch.randn([tensor(20), tensor(32), tensor(256)], dtype=torch.float32)])
# test_id: 3338 
para_0 = torch.randn([tensor(20), tensor(32), tensor(256)], dtype=torch.float32)
para_1 = 0.1
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3339 
verify_model(torch.nn.Dropout(0.1,).eval(), input_data=[torch.randn([tensor(20), tensor(32), tensor(256)], dtype=torch.float32)])
# test_id: 3340 
para_0 = torch.randn([tensor(20), tensor(32), tensor(256)], dtype=torch.float32)
para_1 = (256,)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
para_3 = torch.randn([tensor(256)], dtype=torch.float32)
para_4 = 1e-05
class layer_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.layer_norm(args[0], para_1,para_2,para_3,para_4,)
verify_model(layer_norm().float().eval(), input_data=para_0)


# test_id: 3341 
verify_model(torch.nn.LayerNorm(256,).eval(), input_data=[torch.randn([tensor(20), tensor(32), tensor(256)], dtype=torch.float32)])
# test_id: 3342 
para_0 = torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32)
para_1 = torch.randn([tensor(512), tensor(256)], dtype=torch.float32)
para_2 = torch.randn([tensor(512)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3343 
para_0 = torch.randn([tensor(256), tensor(20), tensor(10)], dtype=torch.float32)
class softmax(Module):
    def forward(self, *args):
        return torch.nn.functional.softmax(args[0], dim=-1,)
verify_model(softmax().float().eval(), input_data=para_0)


# test_id: 3344 
para_0 = torch.randn([tensor(256), tensor(20), tensor(10)], dtype=torch.float32)
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], p=0.1,training=False,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3345 
verify_model(torch.nn.MultiheadAttention(256,8,dropout=0.1,).eval(), input_data=[torch.randn([tensor(20), tensor(32), tensor(256)], dtype=torch.float32),torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32),torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32)])
# test_id: 3346 
para_0 = torch.randn([tensor(20), tensor(32), tensor(256)], dtype=torch.float32)
para_1 = torch.randn([tensor(2048), tensor(256)], dtype=torch.float32)
para_2 = torch.randn([tensor(2048)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3347 
verify_model(torch.nn.Linear(2048,256,).eval(), input_data=[torch.randn([tensor(20), tensor(32), tensor(256)], dtype=torch.float32)])
# test_id: 3348 
para_0 = torch.randn([tensor(20), tensor(32), tensor(2048)], dtype=torch.float32)
class relu(Module):
    def forward(self, *args):
        return torch.nn.functional.relu(args[0], )
verify_model(relu().float().eval(), input_data=para_0)


# test_id: 3349 
para_0 = torch.randn([tensor(20), tensor(32), tensor(2048)], dtype=torch.float32)
para_1 = 0.1
para_2 = False
para_3 = False
class dropout(Module):
    def forward(self, *args):
        return torch.nn.functional.dropout(args[0], para_1,para_2,para_3,)
verify_model(dropout().float().eval(), input_data=para_0)


# test_id: 3350 
verify_model(torch.nn.Dropout(0.1,).eval(), input_data=[torch.randn([tensor(20), tensor(32), tensor(2048)], dtype=torch.float32)])
# test_id: 3351 
para_0 = torch.randn([tensor(20), tensor(32), tensor(2048)], dtype=torch.float32)
para_1 = torch.randn([tensor(256), tensor(2048)], dtype=torch.float32)
para_2 = torch.randn([tensor(256)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3352 
verify_model(torch.nn.Linear(2048,256,).eval(), input_data=[torch.randn([tensor(20), tensor(32), tensor(2048)], dtype=torch.float32)])
# test_id: 3353 
verify_model(torch.nn.TransformerDecoderLayer(256,8,2048,0.1,'relu',).eval(), input_data=[torch.randn([tensor(20), tensor(32), tensor(256)], dtype=torch.float32),torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32)])
# test_id: 3354 
verify_model(torch.nn.TransformerDecoder(torch.nn.modules.transformerTransformerDecoderLayer,6,torch.nn.modules.normalizationLayerNorm,).eval(), input_data=[torch.randn([tensor(20), tensor(32), tensor(256)], dtype=torch.float32),torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32)])
# test_id: 3355 
verify_model(torch.nn.Transformer(d_model=256,nhead=8,num_encoder_layers=6,num_decoder_layers=6,).eval(), input_data=[torch.randn([tensor(10), tensor(32), tensor(256)], dtype=torch.float32),torch.randn([tensor(20), tensor(32), tensor(256)], dtype=torch.float32)])
# test_id: 3356 
para_0 = torch.randn([10, 3], dtype=torch.float32)
para_1 = torch.randint(1, 100, [10], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight=None,ignore_index=-100,reduction='mean',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3357 
verify_model(torch.nn.NLLLoss().eval(), input_data=[torch.randn([10, 3], dtype=torch.float32),torch.randint(1, 100, [10], dtype=torch.int64)])
# test_id: 3358 
para_0 = torch.randn([tensor(10), tensor(3)], dtype=torch.float32)
para_1 = torch.randint(1, 100, [tensor(10)], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight=None,ignore_index=-100,reduction='mean',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3359 
verify_model(torch.nn.NLLLoss().eval(), input_data=[torch.randn([tensor(10), tensor(3)], dtype=torch.float32),torch.randint(1, 100, [tensor(10)], dtype=torch.int64)])
# test_id: 3360 
para_0 = torch.randn([10, 3], dtype=torch.float32)
para_1 = torch.randint(1, 100, [10], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight={'shape': [3], 'dtype': 'torch.float32'},ignore_index=-100,reduction='mean',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3361 
verify_model(torch.nn.NLLLoss(weight='torchTensor',).eval(), input_data=[torch.randn([10, 3], dtype=torch.float32),torch.randint(1, 100, [10], dtype=torch.int64)])
# test_id: 3362 
para_0 = torch.randn([tensor(10), tensor(3)], dtype=torch.float32)
para_1 = torch.randint(1, 100, [tensor(10)], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight={'shape': [tensor(3)], 'dtype': 'torch.float32'},ignore_index=-100,reduction='mean',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3363 
verify_model(torch.nn.NLLLoss(weight='torchTensor',).eval(), input_data=[torch.randn([tensor(10), tensor(3)], dtype=torch.float32),torch.randint(1, 100, [tensor(10)], dtype=torch.int64)])
# test_id: 3364 
para_0 = torch.randn([10, 3], dtype=torch.float32)
para_1 = torch.randint(1, 100, [10], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight=None,ignore_index=1,reduction='mean',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3365 
verify_model(torch.nn.NLLLoss(ignore_index=1,).eval(), input_data=[torch.randn([10, 3], dtype=torch.float32),torch.randint(1, 100, [10], dtype=torch.int64)])
# test_id: 3366 
para_0 = torch.randn([tensor(10), tensor(3)], dtype=torch.float32)
para_1 = torch.randint(1, 100, [tensor(10)], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight=None,ignore_index=1,reduction='mean',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3367 
verify_model(torch.nn.NLLLoss(ignore_index=1,).eval(), input_data=[torch.randn([tensor(10), tensor(3)], dtype=torch.float32),torch.randint(1, 100, [tensor(10)], dtype=torch.int64)])
# test_id: 3368 
para_0 = torch.randn([10, 3], dtype=torch.float32)
para_1 = torch.randint(1, 100, [10], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight=None,ignore_index=-100,reduction='sum',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3369 
verify_model(torch.nn.NLLLoss(reduction='sum',).eval(), input_data=[torch.randn([10, 3], dtype=torch.float32),torch.randint(1, 100, [10], dtype=torch.int64)])
# test_id: 3370 
para_0 = torch.randn([tensor(10), tensor(3)], dtype=torch.float32)
para_1 = torch.randint(1, 100, [tensor(10)], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight=None,ignore_index=-100,reduction='sum',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3371 
verify_model(torch.nn.NLLLoss(reduction='sum',).eval(), input_data=[torch.randn([tensor(10), tensor(3)], dtype=torch.float32),torch.randint(1, 100, [tensor(10)], dtype=torch.int64)])
# test_id: 3372 
para_0 = torch.randn([10, 3], dtype=torch.float32)
para_1 = torch.randint(1, 100, [10], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight=None,ignore_index=-100,reduction='none',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3373 
verify_model(torch.nn.NLLLoss(reduction='none',).eval(), input_data=[torch.randn([10, 3], dtype=torch.float32),torch.randint(1, 100, [10], dtype=torch.int64)])
# test_id: 3374 
para_0 = torch.randn([tensor(10), tensor(3)], dtype=torch.float32)
para_1 = torch.randint(1, 100, [tensor(10)], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight=None,ignore_index=-100,reduction='none',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3375 
verify_model(torch.nn.NLLLoss(reduction='none',).eval(), input_data=[torch.randn([tensor(10), tensor(3)], dtype=torch.float32),torch.randint(1, 100, [tensor(10)], dtype=torch.int64)])
# test_id: 3376 
para_0 = torch.randn([10, 3, 2, 3], dtype=torch.float32)
para_1 = torch.randint(1, 100, [10, 2, 3], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight=None,ignore_index=-100,reduction='mean',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3377 
verify_model(torch.nn.NLLLoss().eval(), input_data=[torch.randn([10, 3, 2, 3], dtype=torch.float32),torch.randint(1, 100, [10, 2, 3], dtype=torch.int64)])
# test_id: 3378 
para_0 = torch.randn([tensor(10), tensor(3), tensor(2), tensor(3)], dtype=torch.float32)
para_1 = torch.randint(1, 100, [tensor(10), tensor(2), tensor(3)], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight=None,ignore_index=-100,reduction='mean',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3379 
verify_model(torch.nn.NLLLoss().eval(), input_data=[torch.randn([tensor(10), tensor(3), tensor(2), tensor(3)], dtype=torch.float32),torch.randint(1, 100, [tensor(10), tensor(2), tensor(3)], dtype=torch.int64)])
# test_id: 3380 
para_0 = torch.randn([10, 3, 2, 3], dtype=torch.float32)
para_1 = torch.randint(1, 100, [10, 2, 3], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight={'shape': [3], 'dtype': 'torch.float32'},ignore_index=-100,reduction='mean',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3381 
verify_model(torch.nn.NLLLoss(weight='torchTensor',).eval(), input_data=[torch.randn([10, 3, 2, 3], dtype=torch.float32),torch.randint(1, 100, [10, 2, 3], dtype=torch.int64)])
# test_id: 3382 
para_0 = torch.randn([tensor(10), tensor(3), tensor(2), tensor(3)], dtype=torch.float32)
para_1 = torch.randint(1, 100, [tensor(10), tensor(2), tensor(3)], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight={'shape': [tensor(3)], 'dtype': 'torch.float32'},ignore_index=-100,reduction='mean',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3383 
verify_model(torch.nn.NLLLoss(weight='torchTensor',).eval(), input_data=[torch.randn([tensor(10), tensor(3), tensor(2), tensor(3)], dtype=torch.float32),torch.randint(1, 100, [tensor(10), tensor(2), tensor(3)], dtype=torch.int64)])
# test_id: 3384 
para_0 = torch.randn([10, 3, 2, 3], dtype=torch.float32)
para_1 = torch.randint(1, 100, [10, 2, 3], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight=None,ignore_index=1,reduction='mean',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3385 
verify_model(torch.nn.NLLLoss(ignore_index=1,).eval(), input_data=[torch.randn([10, 3, 2, 3], dtype=torch.float32),torch.randint(1, 100, [10, 2, 3], dtype=torch.int64)])
# test_id: 3386 
para_0 = torch.randn([tensor(10), tensor(3), tensor(2), tensor(3)], dtype=torch.float32)
para_1 = torch.randint(1, 100, [tensor(10), tensor(2), tensor(3)], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight=None,ignore_index=1,reduction='mean',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3387 
verify_model(torch.nn.NLLLoss(ignore_index=1,).eval(), input_data=[torch.randn([tensor(10), tensor(3), tensor(2), tensor(3)], dtype=torch.float32),torch.randint(1, 100, [tensor(10), tensor(2), tensor(3)], dtype=torch.int64)])
# test_id: 3388 
para_0 = torch.randn([10, 3, 2, 3], dtype=torch.float32)
para_1 = torch.randint(1, 100, [10, 2, 3], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight=None,ignore_index=-100,reduction='sum',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3389 
verify_model(torch.nn.NLLLoss(reduction='sum',).eval(), input_data=[torch.randn([10, 3, 2, 3], dtype=torch.float32),torch.randint(1, 100, [10, 2, 3], dtype=torch.int64)])
# test_id: 3390 
para_0 = torch.randn([tensor(10), tensor(3), tensor(2), tensor(3)], dtype=torch.float32)
para_1 = torch.randint(1, 100, [tensor(10), tensor(2), tensor(3)], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight=None,ignore_index=-100,reduction='sum',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3391 
verify_model(torch.nn.NLLLoss(reduction='sum',).eval(), input_data=[torch.randn([tensor(10), tensor(3), tensor(2), tensor(3)], dtype=torch.float32),torch.randint(1, 100, [tensor(10), tensor(2), tensor(3)], dtype=torch.int64)])
# test_id: 3392 
para_0 = torch.randn([10, 3, 2, 3], dtype=torch.float32)
para_1 = torch.randint(1, 100, [10, 2, 3], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight=None,ignore_index=-100,reduction='none',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3393 
verify_model(torch.nn.NLLLoss(reduction='none',).eval(), input_data=[torch.randn([10, 3, 2, 3], dtype=torch.float32),torch.randint(1, 100, [10, 2, 3], dtype=torch.int64)])
# test_id: 3394 
para_0 = torch.randn([tensor(10), tensor(3), tensor(2), tensor(3)], dtype=torch.float32)
para_1 = torch.randint(1, 100, [tensor(10), tensor(2), tensor(3)], dtype=torch.int64)
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,weight=None,ignore_index=-100,reduction='none',)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3395 
verify_model(torch.nn.NLLLoss(reduction='none',).eval(), input_data=[torch.randn([tensor(10), tensor(3), tensor(2), tensor(3)], dtype=torch.float32),torch.randint(1, 100, [tensor(10), tensor(2), tensor(3)], dtype=torch.int64)])
# test_id: 3396 
para_0 = torch.randn([10, 3], dtype=torch.float32)
para_1 = 1
class log_softmax(Module):
    def forward(self, *args):
        return torch.nn.functional.log_softmax(args[0], para_1,)
verify_model(log_softmax().float().eval(), input_data=para_0)


# test_id: 3397 
para_0 = torch.randn([10, 3], dtype=torch.float32)
para_1 = torch.randint(1, 100, [10], dtype=torch.int64)
para_2 = None
para_3 = None
para_4 = -100
para_5 = None
para_6 = 'mean'
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3398 
para_0 = torch.randn([10, 3], dtype=torch.float32)
para_1 = torch.randint(1, 100, [10], dtype=torch.int64)
class cross_entropy(Module):
    def forward(self, *args):
        return torch.nn.functional.cross_entropy(args[0], para_1,weight=None,ignore_index=-100,reduction='mean',)
verify_model(cross_entropy().float().eval(), input_data=para_0)


# test_id: 3399 
verify_model(torch.nn.CrossEntropyLoss().eval(), input_data=[torch.randn([10, 3], dtype=torch.float32),torch.randint(1, 100, [10], dtype=torch.int64)])
# test_id: 3400 
para_0 = torch.randn([tensor(10), tensor(3)], dtype=torch.float32)
para_1 = 1
class log_softmax(Module):
    def forward(self, *args):
        return torch.nn.functional.log_softmax(args[0], para_1,)
verify_model(log_softmax().float().eval(), input_data=para_0)


# test_id: 3401 
para_0 = torch.randn([tensor(10), tensor(3)], dtype=torch.float32)
para_1 = torch.randint(1, 100, [tensor(10)], dtype=torch.int64)
para_2 = None
para_3 = None
para_4 = -100
para_5 = None
para_6 = 'mean'
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3402 
para_0 = torch.randn([tensor(10), tensor(3)], dtype=torch.float32)
para_1 = torch.randint(1, 100, [tensor(10)], dtype=torch.int64)
class cross_entropy(Module):
    def forward(self, *args):
        return torch.nn.functional.cross_entropy(args[0], para_1,weight=None,ignore_index=-100,reduction='mean',)
verify_model(cross_entropy().float().eval(), input_data=para_0)


# test_id: 3403 
verify_model(torch.nn.CrossEntropyLoss().eval(), input_data=[torch.randn([tensor(10), tensor(3)], dtype=torch.float32),torch.randint(1, 100, [tensor(10)], dtype=torch.int64)])
# test_id: 3404 
para_0 = torch.randn([10, 3], dtype=torch.float32)
para_1 = torch.randint(1, 100, [10], dtype=torch.int64)
para_2 = torch.randn([3], dtype=torch.float32)
para_3 = None
para_4 = -100
para_5 = None
para_6 = 'mean'
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3405 
para_0 = torch.randn([10, 3], dtype=torch.float32)
para_1 = torch.randint(1, 100, [10], dtype=torch.int64)
class cross_entropy(Module):
    def forward(self, *args):
        return torch.nn.functional.cross_entropy(args[0], para_1,weight={'shape': [3], 'dtype': 'torch.float32'},ignore_index=-100,reduction='mean',)
verify_model(cross_entropy().float().eval(), input_data=para_0)


# test_id: 3406 
verify_model(torch.nn.CrossEntropyLoss(weight='torchTensor',).eval(), input_data=[torch.randn([10, 3], dtype=torch.float32),torch.randint(1, 100, [10], dtype=torch.int64)])
# test_id: 3407 
para_0 = torch.randn([tensor(10), tensor(3)], dtype=torch.float32)
para_1 = torch.randint(1, 100, [tensor(10)], dtype=torch.int64)
para_2 = torch.randn([tensor(3)], dtype=torch.float32)
para_3 = None
para_4 = -100
para_5 = None
para_6 = 'mean'
class nll_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.nll_loss(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(nll_loss().float().eval(), input_data=para_0)


# test_id: 3408 
para_0 = torch.randn([tensor(10), tensor(3)], dtype=torch.float32)
para_1 = torch.randint(1, 100, [tensor(10)], dtype=torch.int64)
class cross_entropy(Module):
    def forward(self, *args):
        return torch.nn.functional.cross_entropy(args[0], para_1,weight={'shape': [tensor(3)], 'dtype': 'torch.float32'},ignore_index=-100,reduction='mean',)
verify_model(cross_entropy().float().eval(), input_data=para_0)


# test_id: 3409 
verify_model(torch.nn.CrossEntropyLoss(weight='torchTensor',).eval(), input_data=[torch.randn([tensor(10), tensor(3)], dtype=torch.float32),torch.randint(1, 100, [tensor(10)], dtype=torch.int64)])
# test_id: 3410 
para_0 = torch.randn([10, 3], dtype=torch.float32)
para_1 = torch.randn([10, 3], dtype=torch.float32)
class l1_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.l1_loss(args[0], para_1,reduction='mean',)
verify_model(l1_loss().float().eval(), input_data=para_0)


# test_id: 3411 
verify_model(torch.nn.L1Loss().eval(), input_data=[torch.randn([10, 3], dtype=torch.float32),torch.randn([10, 3], dtype=torch.float32)])
# test_id: 3412 
para_0 = torch.randn([tensor(10), tensor(3)], dtype=torch.float32)
para_1 = torch.randn([tensor(10), tensor(3)], dtype=torch.float32)
class l1_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.l1_loss(args[0], para_1,reduction='mean',)
verify_model(l1_loss().float().eval(), input_data=para_0)


# test_id: 3413 
verify_model(torch.nn.L1Loss().eval(), input_data=[torch.randn([tensor(10), tensor(3)], dtype=torch.float32),torch.randn([tensor(10), tensor(3)], dtype=torch.float32)])
# test_id: 3414 
para_0 = torch.randn([10, 3], dtype=torch.float32)
para_1 = torch.randn([10, 3], dtype=torch.float32)
class mse_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.mse_loss(args[0], para_1,reduction='mean',)
verify_model(mse_loss().float().eval(), input_data=para_0)


# test_id: 3415 
verify_model(torch.nn.MSELoss().eval(), input_data=[torch.randn([10, 3], dtype=torch.float32),torch.randn([10, 3], dtype=torch.float32)])
# test_id: 3416 
para_0 = torch.randn([tensor(10), tensor(3)], dtype=torch.float32)
para_1 = torch.randn([tensor(10), tensor(3)], dtype=torch.float32)
class mse_loss(Module):
    def forward(self, *args):
        return torch.nn.functional.mse_loss(args[0], para_1,reduction='mean',)
verify_model(mse_loss().float().eval(), input_data=para_0)


# test_id: 3417 
verify_model(torch.nn.MSELoss().eval(), input_data=[torch.randn([tensor(10), tensor(3)], dtype=torch.float32),torch.randn([tensor(10), tensor(3)], dtype=torch.float32)])
# test_id: 3418 
para_0 = torch.randn([tensor(1), tensor(1), tensor(12)], dtype=torch.float32)
para_1 = (1, 1)
para_2 = 'constant'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 3419 
para_0 = torch.randn([1, 1, 12], dtype=torch.float32)
para_1 = (1, 1)
para_2 = 'constant'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 3420 
para_0 = torch.randn([tensor(1), tensor(1), tensor(12)], dtype=torch.float32)
para_1 = (1, 1)
para_2 = 'reflect'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 3421 
para_0 = torch.randn([1, 1, 12], dtype=torch.float32)
para_1 = (1, 1)
para_2 = 'reflect'
class pad(Module):
    def forward(self, *args):
        return torch.nn.functional.pad(args[0], para_1,para_2,)
verify_model(pad().float().eval(), input_data=para_0)


# test_id: 3422 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 8, 8], 'dtype': 'torch.float32'},grid={'shape': [4, 16, 16, 2], 'dtype': 'torch.float32'},mode='nearest',padding_mode='zeros',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3423 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(8), tensor(8)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(16), tensor(16), tensor(2)], 'dtype': 'torch.float32'},mode='nearest',padding_mode='zeros',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3424 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 4, 4, 4], 'dtype': 'torch.float32'},grid={'shape': [4, 8, 8, 8, 3], 'dtype': 'torch.float32'},mode='nearest',padding_mode='zeros',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3425 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(4), tensor(4), tensor(4)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(8), tensor(8), tensor(8), tensor(3)], 'dtype': 'torch.float32'},mode='nearest',padding_mode='zeros',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3426 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 8, 8], 'dtype': 'torch.float32'},grid={'shape': [4, 16, 16, 2], 'dtype': 'torch.float32'},mode='nearest',padding_mode='zeros',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3427 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(8), tensor(8)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(16), tensor(16), tensor(2)], 'dtype': 'torch.float32'},mode='nearest',padding_mode='zeros',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3428 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 4, 4, 4], 'dtype': 'torch.float32'},grid={'shape': [4, 8, 8, 8, 3], 'dtype': 'torch.float32'},mode='nearest',padding_mode='zeros',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3429 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(4), tensor(4), tensor(4)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(8), tensor(8), tensor(8), tensor(3)], 'dtype': 'torch.float32'},mode='nearest',padding_mode='zeros',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3430 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 8, 8], 'dtype': 'torch.float32'},grid={'shape': [4, 16, 16, 2], 'dtype': 'torch.float32'},mode='nearest',padding_mode='border',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3431 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(8), tensor(8)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(16), tensor(16), tensor(2)], 'dtype': 'torch.float32'},mode='nearest',padding_mode='border',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3432 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 4, 4, 4], 'dtype': 'torch.float32'},grid={'shape': [4, 8, 8, 8, 3], 'dtype': 'torch.float32'},mode='nearest',padding_mode='border',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3433 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(4), tensor(4), tensor(4)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(8), tensor(8), tensor(8), tensor(3)], 'dtype': 'torch.float32'},mode='nearest',padding_mode='border',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3434 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 8, 8], 'dtype': 'torch.float32'},grid={'shape': [4, 16, 16, 2], 'dtype': 'torch.float32'},mode='nearest',padding_mode='border',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3435 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(8), tensor(8)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(16), tensor(16), tensor(2)], 'dtype': 'torch.float32'},mode='nearest',padding_mode='border',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3436 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 4, 4, 4], 'dtype': 'torch.float32'},grid={'shape': [4, 8, 8, 8, 3], 'dtype': 'torch.float32'},mode='nearest',padding_mode='border',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3437 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(4), tensor(4), tensor(4)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(8), tensor(8), tensor(8), tensor(3)], 'dtype': 'torch.float32'},mode='nearest',padding_mode='border',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3438 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 8, 8], 'dtype': 'torch.float32'},grid={'shape': [4, 16, 16, 2], 'dtype': 'torch.float32'},mode='nearest',padding_mode='reflection',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3439 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(8), tensor(8)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(16), tensor(16), tensor(2)], 'dtype': 'torch.float32'},mode='nearest',padding_mode='reflection',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3440 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 4, 4, 4], 'dtype': 'torch.float32'},grid={'shape': [4, 8, 8, 8, 3], 'dtype': 'torch.float32'},mode='nearest',padding_mode='reflection',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3441 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(4), tensor(4), tensor(4)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(8), tensor(8), tensor(8), tensor(3)], 'dtype': 'torch.float32'},mode='nearest',padding_mode='reflection',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3442 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 8, 8], 'dtype': 'torch.float32'},grid={'shape': [4, 16, 16, 2], 'dtype': 'torch.float32'},mode='nearest',padding_mode='reflection',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3443 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(8), tensor(8)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(16), tensor(16), tensor(2)], 'dtype': 'torch.float32'},mode='nearest',padding_mode='reflection',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3444 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 4, 4, 4], 'dtype': 'torch.float32'},grid={'shape': [4, 8, 8, 8, 3], 'dtype': 'torch.float32'},mode='nearest',padding_mode='reflection',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3445 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(4), tensor(4), tensor(4)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(8), tensor(8), tensor(8), tensor(3)], 'dtype': 'torch.float32'},mode='nearest',padding_mode='reflection',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3446 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 8, 8], 'dtype': 'torch.float32'},grid={'shape': [4, 16, 16, 2], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='zeros',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3447 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(8), tensor(8)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(16), tensor(16), tensor(2)], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='zeros',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3448 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 4, 4, 4], 'dtype': 'torch.float32'},grid={'shape': [4, 8, 8, 8, 3], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='zeros',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3449 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(4), tensor(4), tensor(4)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(8), tensor(8), tensor(8), tensor(3)], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='zeros',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3450 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 8, 8], 'dtype': 'torch.float32'},grid={'shape': [4, 16, 16, 2], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='zeros',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3451 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(8), tensor(8)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(16), tensor(16), tensor(2)], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='zeros',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3452 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 4, 4, 4], 'dtype': 'torch.float32'},grid={'shape': [4, 8, 8, 8, 3], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='zeros',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3453 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(4), tensor(4), tensor(4)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(8), tensor(8), tensor(8), tensor(3)], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='zeros',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3454 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 8, 8], 'dtype': 'torch.float32'},grid={'shape': [4, 16, 16, 2], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='border',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3455 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(8), tensor(8)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(16), tensor(16), tensor(2)], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='border',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3456 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 4, 4, 4], 'dtype': 'torch.float32'},grid={'shape': [4, 8, 8, 8, 3], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='border',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3457 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(4), tensor(4), tensor(4)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(8), tensor(8), tensor(8), tensor(3)], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='border',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3458 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 8, 8], 'dtype': 'torch.float32'},grid={'shape': [4, 16, 16, 2], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='border',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3459 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(8), tensor(8)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(16), tensor(16), tensor(2)], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='border',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3460 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 4, 4, 4], 'dtype': 'torch.float32'},grid={'shape': [4, 8, 8, 8, 3], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='border',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3461 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(4), tensor(4), tensor(4)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(8), tensor(8), tensor(8), tensor(3)], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='border',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3462 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 8, 8], 'dtype': 'torch.float32'},grid={'shape': [4, 16, 16, 2], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='reflection',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3463 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(8), tensor(8)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(16), tensor(16), tensor(2)], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='reflection',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3464 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 4, 4, 4], 'dtype': 'torch.float32'},grid={'shape': [4, 8, 8, 8, 3], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='reflection',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3465 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(4), tensor(4), tensor(4)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(8), tensor(8), tensor(8), tensor(3)], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='reflection',align_corners=True,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3466 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 8, 8], 'dtype': 'torch.float32'},grid={'shape': [4, 16, 16, 2], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='reflection',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3467 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(8), tensor(8)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(16), tensor(16), tensor(2)], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='reflection',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3468 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [4, 4, 4, 4, 4], 'dtype': 'torch.float32'},grid={'shape': [4, 8, 8, 8, 3], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='reflection',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3469 
class grid_sample(Module):
    def forward(self, *args):
        return torch.nn.functional.grid_sample(args[0], input={'shape': [tensor(4), tensor(4), tensor(4), tensor(4), tensor(4)], 'dtype': 'torch.float32'},grid={'shape': [tensor(4), tensor(8), tensor(8), tensor(8), tensor(3)], 'dtype': 'torch.float32'},mode='bilinear',padding_mode='reflection',align_corners=False,)
verify_model(grid_sample().float().eval(), input_data=para_0)


# test_id: 3470 
para_0 = torch.randn([3, 3, 10, 1], dtype=torch.float32)
para_1 = torch.randn([3, 3, 1, 1], dtype=torch.float32)
para_2 = torch.randn([3], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3471 
verify_model(torch.nn.Conv2d(3,3,(1, 1),1,).eval(), input_data=[torch.randn([3, 3, 10, 1], dtype=torch.float32)])
# test_id: 3472 
para_0 = torch.randn([tensor(3), tensor(3), tensor(10), tensor(1)], dtype=torch.float32)
para_1 = torch.randn([tensor(3), tensor(3), tensor(1), tensor(1)], dtype=torch.float32)
para_2 = torch.randn([tensor(3)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3473 
verify_model(torch.nn.Conv2d(3,3,(1, 1),1,).eval(), input_data=[torch.randn([tensor(3), tensor(3), tensor(10), tensor(1)], dtype=torch.float32)])
# test_id: 3474 
para_0 = torch.randn([1, 32, 32, 32], dtype=torch.float32)
para_1 = torch.randn([64, 32, 3, 3], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3475 
verify_model(torch.nn.Conv2d(32,64,kernel_size=3,).eval(), input_data=[torch.randn([1, 32, 32, 32], dtype=torch.float32)])
# test_id: 3476 
para_0 = torch.randn([tensor(1), tensor(32), tensor(32), tensor(32)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(32), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3477 
verify_model(torch.nn.Conv2d(32,64,kernel_size=3,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(32), tensor(32)], dtype=torch.float32)])
# test_id: 3478 
para_0 = torch.randn([1, 32, 32, 32], dtype=torch.float32)
para_1 = torch.randn([64, 16, 3, 3], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 2
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3479 
verify_model(torch.nn.Conv2d(32,64,kernel_size=3,groups=2,).eval(), input_data=[torch.randn([1, 32, 32, 32], dtype=torch.float32)])
# test_id: 3480 
para_0 = torch.randn([tensor(1), tensor(32), tensor(32), tensor(32)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(16), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 2
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3481 
verify_model(torch.nn.Conv2d(32,64,kernel_size=3,groups=2,).eval(), input_data=[torch.randn([tensor(1), tensor(32), tensor(32), tensor(32)], dtype=torch.float32)])
# test_id: 3482 
para_0 = torch.randn([128, 32], dtype=torch.float32)
para_1 = torch.randn([64, 32], dtype=torch.float32)
para_2 = torch.randn([64], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3483 
verify_model(torch.nn.Linear(32,64,).eval(), input_data=[torch.randn([128, 32], dtype=torch.float32)])
# test_id: 3484 
para_0 = torch.randn([tensor(128), tensor(32)], dtype=torch.float32)
para_1 = torch.randn([tensor(64), tensor(32)], dtype=torch.float32)
para_2 = torch.randn([tensor(64)], dtype=torch.float32)
class linear(Module):
    def forward(self, *args):
        return torch.nn.functional.linear(args[0], para_1,para_2,)
verify_model(linear().float().eval(), input_data=para_0)


# test_id: 3485 
verify_model(torch.nn.Linear(32,64,).eval(), input_data=[torch.randn([tensor(128), tensor(32)], dtype=torch.float32)])
# test_id: 3486 
para_0 = torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(6), tensor(3), tensor(3), tensor(3)], dtype=torch.float32)
para_2 = torch.randn([tensor(6)], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3487 
verify_model(torch.nn.Conv2d(3,6,3,bias=True,).eval(), input_data=[torch.randn([tensor(1), tensor(3), tensor(10), tensor(10)], dtype=torch.float32)])
# test_id: 3488 
para_0 = torch.randn([1, 3, 10, 10], dtype=torch.float32)
para_1 = torch.randn([6, 3, 3, 3], dtype=torch.float32)
para_2 = torch.randn([6], dtype=torch.float32)
para_3 = (1, 1)
para_4 = (0, 0)
para_5 = (1, 1)
para_6 = 1
class conv2d(Module):
    def forward(self, *args):
        return torch.nn.functional.conv2d(args[0], para_1,para_2,para_3,para_4,para_5,para_6,)
verify_model(conv2d().float().eval(), input_data=para_0)


# test_id: 3489 
verify_model(torch.nn.Conv2d(3,6,3,bias=True,).eval(), input_data=[torch.randn([1, 3, 10, 10], dtype=torch.float32)])
# test_id: 3490 
para_0 = torch.randn([tensor(1), tensor(16), tensor(10), tensor(10)], dtype=torch.float32)
para_1 = torch.randn([tensor(16)], dtype=torch.float32)
para_2 = torch.randn([tensor(16)], dtype=torch.float32)
para_3 = torch.randn([tensor(16)], dtype=torch.float32)
para_4 = torch.randn([tensor(16)], dtype=torch.float32)
para_5 = True
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 3491 
para_0 = torch.randn([1, 16, 10, 10], dtype=torch.float32)
para_1 = torch.randn([16], dtype=torch.float32)
para_2 = torch.randn([16], dtype=torch.float32)
para_3 = torch.randn([16], dtype=torch.float32)
para_4 = torch.randn([16], dtype=torch.float32)
para_5 = True
para_6 = 0.1
para_7 = 1e-05
class batch_norm(Module):
    def forward(self, *args):
        return torch.nn.functional.batch_norm(args[0], para_1,para_2,para_3,para_4,para_5,para_6,para_7,)
verify_model(batch_norm().float().eval(), input_data=para_0)


# test_id: 0 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=1,bidirectional=False,batch_first=True,bias=True,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 1 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=1,bidirectional=False,batch_first=True,bias=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 2 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=1,bidirectional=False,batch_first=True,bias=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 3 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=1,bidirectional=False,batch_first=True,bias=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 4 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=1,bidirectional=False,batch_first=False,bias=True,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 5 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=1,bidirectional=False,batch_first=False,bias=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 6 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=1,bidirectional=False,batch_first=False,bias=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 7 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=1,bidirectional=False,batch_first=False,bias=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 8 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=2,bidirectional=False,batch_first=True,bias=True,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 9 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=2,bidirectional=False,batch_first=True,bias=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 10 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=2,bidirectional=False,batch_first=True,bias=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 11 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=2,bidirectional=False,batch_first=True,bias=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 12 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=2,bidirectional=False,batch_first=False,bias=True,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 13 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=2,bidirectional=False,batch_first=False,bias=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 14 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=2,bidirectional=False,batch_first=False,bias=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 15 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=2,bidirectional=False,batch_first=False,bias=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 16 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=1,bidirectional=True,batch_first=True,bias=True,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 17 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=1,bidirectional=True,batch_first=True,bias=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 18 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=1,bidirectional=True,batch_first=True,bias=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 19 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=1,bidirectional=True,batch_first=True,bias=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 20 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=1,bidirectional=True,batch_first=False,bias=True,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 21 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=1,bidirectional=True,batch_first=False,bias=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 22 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=1,bidirectional=True,batch_first=False,bias=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 23 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=1,bidirectional=True,batch_first=False,bias=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 24 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=2,bidirectional=True,batch_first=True,bias=True,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 25 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=2,bidirectional=True,batch_first=True,bias=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 26 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=2,bidirectional=True,batch_first=True,bias=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 27 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=2,bidirectional=True,batch_first=True,bias=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 28 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=2,bidirectional=True,batch_first=False,bias=True,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 29 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=2,bidirectional=True,batch_first=False,bias=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 30 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=2,bidirectional=True,batch_first=False,bias=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 31 
verify_model(torch.nn.GRU(input_size=8,hidden_size=16,num_layers=2,bidirectional=True,batch_first=False,bias=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 32 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=1,bidirectional=False,batch_first=True,bias=True,).eval(), input_data=[torch.randn([2, 2, 16], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 33 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=1,bidirectional=False,batch_first=True,bias=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(16)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 34 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=1,bidirectional=False,batch_first=True,bias=False,).eval(), input_data=[torch.randn([2, 2, 16], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 35 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=1,bidirectional=False,batch_first=True,bias=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(16)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 36 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=1,bidirectional=False,batch_first=False,bias=True,).eval(), input_data=[torch.randn([2, 2, 16], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 37 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=1,bidirectional=False,batch_first=False,bias=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(16)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 38 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=1,bidirectional=False,batch_first=False,bias=False,).eval(), input_data=[torch.randn([2, 2, 16], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 39 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=1,bidirectional=False,batch_first=False,bias=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(16)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 40 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=2,bidirectional=False,batch_first=True,bias=True,).eval(), input_data=[torch.randn([2, 2, 16], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 41 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=2,bidirectional=False,batch_first=True,bias=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(16)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 42 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=2,bidirectional=False,batch_first=True,bias=False,).eval(), input_data=[torch.randn([2, 2, 16], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 43 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=2,bidirectional=False,batch_first=True,bias=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(16)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 44 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=2,bidirectional=False,batch_first=False,bias=True,).eval(), input_data=[torch.randn([2, 2, 16], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 45 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=2,bidirectional=False,batch_first=False,bias=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(16)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 46 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=2,bidirectional=False,batch_first=False,bias=False,).eval(), input_data=[torch.randn([2, 2, 16], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 47 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=2,bidirectional=False,batch_first=False,bias=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(16)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 48 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=1,bidirectional=True,batch_first=True,bias=True,).eval(), input_data=[torch.randn([2, 2, 16], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 49 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=1,bidirectional=True,batch_first=True,bias=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(16)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 50 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=1,bidirectional=True,batch_first=True,bias=False,).eval(), input_data=[torch.randn([2, 2, 16], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 51 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=1,bidirectional=True,batch_first=True,bias=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(16)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 52 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=1,bidirectional=True,batch_first=False,bias=True,).eval(), input_data=[torch.randn([2, 2, 16], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 53 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=1,bidirectional=True,batch_first=False,bias=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(16)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 54 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=1,bidirectional=True,batch_first=False,bias=False,).eval(), input_data=[torch.randn([2, 2, 16], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 55 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=1,bidirectional=True,batch_first=False,bias=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(16)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 56 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=2,bidirectional=True,batch_first=True,bias=True,).eval(), input_data=[torch.randn([2, 2, 16], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 57 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=2,bidirectional=True,batch_first=True,bias=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(16)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 58 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=2,bidirectional=True,batch_first=True,bias=False,).eval(), input_data=[torch.randn([2, 2, 16], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 59 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=2,bidirectional=True,batch_first=True,bias=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(16)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 60 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=2,bidirectional=True,batch_first=False,bias=True,).eval(), input_data=[torch.randn([2, 2, 16], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 61 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=2,bidirectional=True,batch_first=False,bias=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(16)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 62 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=2,bidirectional=True,batch_first=False,bias=False,).eval(), input_data=[torch.randn([2, 2, 16], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 63 
verify_model(torch.nn.LSTM(input_size=16,hidden_size=32,num_layers=2,bidirectional=True,batch_first=False,bias=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(16)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 64 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='tanh',bias=True,batch_first=True,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 65 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='tanh',bias=True,batch_first=True,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 66 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='tanh',bias=False,batch_first=True,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 67 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='tanh',bias=False,batch_first=True,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 68 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='tanh',bias=True,batch_first=False,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 69 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='tanh',bias=True,batch_first=False,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 70 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='tanh',bias=False,batch_first=False,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 71 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='tanh',bias=False,batch_first=False,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 72 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=2,nonlinearity='tanh',bias=True,batch_first=True,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 73 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=2,nonlinearity='tanh',bias=True,batch_first=True,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 74 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=2,nonlinearity='tanh',bias=False,batch_first=True,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 75 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=2,nonlinearity='tanh',bias=False,batch_first=True,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 76 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=2,nonlinearity='tanh',bias=True,batch_first=False,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 77 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=2,nonlinearity='tanh',bias=True,batch_first=False,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 78 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=2,nonlinearity='tanh',bias=False,batch_first=False,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 79 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=2,nonlinearity='tanh',bias=False,batch_first=False,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 80 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='tanh',bias=True,batch_first=True,dropout=0.0,bidirectional=True,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 81 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='tanh',bias=True,batch_first=True,dropout=0.0,bidirectional=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 82 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='tanh',bias=False,batch_first=True,dropout=0.0,bidirectional=True,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 83 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='tanh',bias=False,batch_first=True,dropout=0.0,bidirectional=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 84 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='tanh',bias=True,batch_first=False,dropout=0.0,bidirectional=True,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 85 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='tanh',bias=True,batch_first=False,dropout=0.0,bidirectional=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 86 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='tanh',bias=False,batch_first=False,dropout=0.0,bidirectional=True,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 87 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='tanh',bias=False,batch_first=False,dropout=0.0,bidirectional=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 88 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=2,nonlinearity='tanh',bias=True,batch_first=True,dropout=0.0,bidirectional=True,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 89 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=2,nonlinearity='tanh',bias=True,batch_first=True,dropout=0.0,bidirectional=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 90 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=2,nonlinearity='tanh',bias=False,batch_first=True,dropout=0.0,bidirectional=True,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 91 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=2,nonlinearity='tanh',bias=False,batch_first=True,dropout=0.0,bidirectional=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 92 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=2,nonlinearity='tanh',bias=True,batch_first=False,dropout=0.0,bidirectional=True,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 93 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=2,nonlinearity='tanh',bias=True,batch_first=False,dropout=0.0,bidirectional=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 94 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=2,nonlinearity='tanh',bias=False,batch_first=False,dropout=0.0,bidirectional=True,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 95 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=2,nonlinearity='tanh',bias=False,batch_first=False,dropout=0.0,bidirectional=True,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 96 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='relu',bias=True,batch_first=True,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 97 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='relu',bias=True,batch_first=True,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 98 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='relu',bias=False,batch_first=True,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 99 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='relu',bias=False,batch_first=True,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 100 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='relu',bias=True,batch_first=False,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 101 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='relu',bias=True,batch_first=False,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 102 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='relu',bias=False,batch_first=False,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([2, 2, 8], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
# test_id: 103 
verify_model(torch.nn.RNN(input_size=8,hidden_size=16,num_layers=1,nonlinearity='relu',bias=False,batch_first=False,dropout=0.0,bidirectional=False,).eval(), input_data=[torch.randn([tensor(2), tensor(2), tensor(8)], dtype=torch.float32),torch.randn(None, dtype=torch.float32)])
