import numpy as np


def get_accumulate_bug_num(bug_line_list, test_case_num):
    cumulative_bug_list = []
    cumulative_bug_num = 0
    for i in range(test_case_num):
        if i in bug_line_list:
            cumulative_bug_num += bug_line_list.count(i)
        cumulative_bug_list.append(cumulative_bug_num)

    return cumulative_bug_list


def cal_apfd(test_num, bug_list):
    average_rank = 0
    bug_num = len(bug_list)
    # print(bug_num)
    for rank in bug_list:
        average_rank += rank
    APFD = 1 - average_rank/(bug_num*test_num) + 1/(2*test_num)
    return round(APFD, 4)


def calc_rauc(bug_list, test_num, percent):
    use_test_num = int(test_num * percent)

    ideal_data = range(len(bug_list))
    cumulative_ideal_data = get_accumulate_bug_num(ideal_data, use_test_num)
    cumulative_ideal_data = np.array(cumulative_ideal_data)
    res_ideal = np.trapz(cumulative_ideal_data)

    cumulative_bug_list = get_accumulate_bug_num(bug_list, use_test_num)
    cumulative_bug_list = np.array(cumulative_bug_list)
    res_this = np.trapz(cumulative_bug_list)

    return round(res_this / res_ideal, 4)


all_tvm_tcp_res = {
'torch_our':[25, 40, 52, 72, 83, 89, 92, 94, 122, 136, 185, 211, 227, 270, 323, 437, 463, 542, 596, 619, 623, 644, 984, 1050, 1681, 3094, 3477, 4496, 6377, 18977],
'torch_random':[34, 56, 91, 139, 276, 321, 413, 478, 524, 636, 668, 888, 1226, 1385, 1507, 1658, 2227, 3774, 4360, 5335, 6254, 7135, 8150, 10498, 12033, 17581, 22134, 28705, 47553, 67485],
'torch_fast':[5, 15, 33, 116, 121, 142, 181, 198, 229, 544, 749, 850, 961, 1057, 1261, 1478, 1499, 1925, 2833, 2849, 2965, 3416, 4148, 6101, 6694, 13390, 16666, 31443, 47808, 53714],
'torch_cov':[5, 19, 21, 714, 781, 832, 856, 1135, 4620, 5205, 7763, 10525, 11998, 12014, 12023, 12595, 12755, 15829, 18029, 18461, 19308, 22738, 27113, 37324, 37336, 38562, 38905, 40221, 55103, 75707],
'torch_delta_cov':[59, 101, 346, 448, 712, 1002, 2234, 2455, 2964, 3412, 3555, 4359, 5686, 8508, 8966, 9327, 9342, 12063, 25160, 26494, 32591, 32753, 32918, 32964, 33889, 66828, 66838, 67809, 76026, 77586],

'keras_our':[16, 71, 78, 79, 114, 128, 130, 145, 147, 241, 261, 299, 300, 336, 414, 444, 458, 465, 510, 577, 606, 640, 678, 716, 825, 846, 872, 946, 984, 1159, 1354, 1486, 13134, 21138],
'keras_random':[4, 11, 23, 32, 55, 98, 162, 215, 252, 304, 368, 418, 521, 649, 927, 1077, 1362, 1674, 1979, 2413, 2956, 3487, 3848, 4649, 5770, 6643, 8703, 9881, 12997, 15781, 19810, 24923, 32101, 40446],
'keras_fast':[1, 33, 43, 44, 47, 53, 151, 199, 200, 303, 305, 349, 358, 524, 1021, 1149, 1503, 1618, 1811, 2048, 2353, 2404, 3003, 3218, 4009, 4066, 4651, 5151, 7622, 19719, 19925, 28613, 35896, 48614],
'keras_cov':[36, 82, 527, 529, 552, 713, 1947, 4425, 4674, 5292, 5585, 7844, 9740, 13333, 14808, 15820, 23015, 23016, 23237, 23265, 23329, 23385, 23397, 26166, 26625, 31579, 31630, 31866, 32903, 33471, 34439, 49228, 56766, 58938],
'keras_delta_cov':[6, 15, 17, 19, 27, 29, 31, 32, 36, 56, 65, 71, 72, 282, 403, 502, 751, 1570, 3229, 3258, 4553, 5053, 5243, 6990, 10068, 10305, 21031, 21537, 22138, 22860, 25501, 28920, 43583, 44415],

'onnx_our':[20, 39, 87, 125, 174, 208, 288, 291, 309, 327, 427, 493, 531, 566],
'onnx_random':[31, 86, 142, 174, 227, 279, 369, 418, 500, 590, 671, 751, 819, 947],
'onnx_fast':[28, 81, 197, 238, 321, 458, 481, 549, 550, 672, 909, 921, 937, 940],
'onnx_cov':[327, 544, 555, 568, 570, 582, 612, 756, 774, 809, 824, 909, 926, 948],
'onnx_delta_cov':[76, 79, 101, 111, 118, 132, 215, 535, 600, 700, 734, 831, 853, 951],
}

all_ov_tcp_res = {
'torch_our':[9, 19, 20, 59, 106, 230, 246, 394, 419, 496, 610, 785, 786, 1049, 1293, 1543, 1747, 1873, 2633, 2826, 3358, 4868, 5777, 9526],
'torch_random':[43, 73, 127, 313, 550, 718, 1270, 1784, 2177, 2912, 4129, 5573, 6329, 7040, 7934, 9451, 10871, 14827, 16569, 19893, 24270, 38896, 50319, 60967],
'torch_fast':[1, 53, 190, 551, 757, 878, 924, 961, 1090, 1499, 1635, 2371, 2724, 2793, 3416, 4146, 5906, 10056, 15075, 19527, 19681, 21822, 24845, 28838],
'torch_cov':[703, 11912, 12868, 12888, 12928, 14168, 14208, 16462, 17083, 28417, 28700, 38784, 39855, 56149, 56211, 57610, 58846, 58877, 58884, 58886, 60011, 61458, 63950, 74779],
'torch_delta_cov':[8, 14, 475, 661, 2288, 4140, 4366, 9300, 12040, 13452, 19266, 29611, 32645, 32774, 33165, 34230, 41929, 69185, 69438, 69638, 70498, 73412, 73480, 73979],

'keras_our':[1, 38, 44, 62, 79, 125, 534, 1793, 2993, 11113, 20731],
'keras_random':[88, 144, 274, 1143, 3096, 4835, 8219, 10673, 14125, 22169, 38943],
'keras_fast':[1, 21, 106, 139, 481, 867, 6353, 9831, 10319, 11411, 16481],
'keras_cov':[160, 787, 2164, 5634, 5884, 5895, 7048, 22845, 26690, 36797, 59088],
'keras_delta_cov':[4, 778, 816, 1298, 7241, 20996, 21115, 22691, 23133, 25496, 56396],

'onnx_our':[11, 28, 35, 78, 81, 87, 99, 154, 157, 284, 355, 521, 537],
'onnx_random':[26, 44, 73, 88, 135, 188, 221, 288, 345, 426, 514, 632, 761],
'onnx_fast':[5, 12, 35, 96, 147, 170, 262, 422, 431, 442, 550, 578, 949],
'onnx_cov':[134, 292, 382, 399, 426, 830, 831, 863, 922, 928, 929, 989, 1002],
'onnx_delta_cov':[104, 105, 274, 303, 532, 646, 674, 680, 777, 826, 858, 934, 981],

}

all_trt_tcp_res={
'torch_our':[8, 9, 15, 31, 41, 48, 90, 113, 121, 153, 166, 240, 246, 257, 263, 301, 330, 350, 374, 384, 458, 470, 751, 882, 945, 1525, 2360, 3316, 5759, 17467, 17914],
'torch_random':[8, 88, 177, 272, 382, 529, 587, 831, 1032, 1252, 1657, 1984, 2338, 2849, 3365, 4168, 4680, 5754, 6876, 8520, 9504, 11545, 14487, 16680, 18981, 23071, 28878, 34842, 41187, 46815, 56833, 64231],
'torch_fast':[17, 19, 33, 42, 112, 120, 136, 146, 221, 346, 544, 576, 863, 878, 906, 919, 940, 1261, 1425, 1479, 2028, 3445, 5343, 9324, 9669, 11025, 11898, 26707, 36398, 40209, 44612],
'torch_cov':[18, 855, 871, 941, 1732, 2699, 3062, 14991, 18423, 18913, 20803, 22921, 23033, 24619, 24621, 25453, 28023, 28058, 28064, 29467, 30158, 30925, 35086, 35434, 40898, 45955, 47318, 70783, 75412, 77501, 77544],
'torch_delta_cov':[5, 8, 9, 22, 27, 28, 35, 39, 48, 70, 72, 311, 829, 931, 2183, 2259, 4444, 9783, 9992, 10114, 10338, 10592, 21090, 24236, 27853, 32459, 32559, 35781, 65256, 66247, 73478],


'onnx_our':[72, 85, 93, 113, 148, 179, 234, 240, 334, 371, 402, 560],
'onnx_random':[67, 80, 125, 161, 217, 275, 310, 411, 508, 596, 703, 867],
'onnx_fast':[11, 19, 56, 64, 178, 301, 311, 314, 619, 758, 885, 1007],
'onnx_cov':[53, 118, 145, 231, 288, 304, 358, 366, 370, 407, 684, 781],
'onnx_delta_cov':[285, 307, 505, 619, 626, 689, 778, 795, 799, 827, 935, 942],

}

if __name__ == '__main__':
    num_keras = 62976
    num_torch = 97134
    num_onnx = 1013

    result_apfd_str = ''
    result_rauc_str = ''
    SUT_list = ['tvm', 'trt', 'ov']  # , 'trt'
    for sut in SUT_list:
        # print(f"Result for {sut}:")
        for k, v in eval(f"all_{sut}_tcp_res").items():
            # print(k)
            bug_list = [int(i) for i in v]
            project_method = k.split('_')
            project = project_method[0]
            method = project_method[1]
            test_num = eval(f'num_{project}')
            APDF = cal_apfd(test_num, bug_list)
            RAUC = calc_rauc(bug_list, test_num, 0.25)
            # print(project_method, APDF)
            result_apfd_str += str(APDF) + '\t'
            result_rauc_str += str(RAUC) + '\t'
            if method == 'delta':
                # print(result_apfd_str)
                print(result_rauc_str)
                result_apfd_str = ''
                result_rauc_str = ''
    print()
